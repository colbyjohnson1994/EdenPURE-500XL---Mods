

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Thu May 23 21:51:26 2024

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F1847
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    15                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    19                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	intentry,global,class=CODE,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    70                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    71                           	dabs	1,0x7E,2
    72     0000                     
    73                           ; Version 2.40
    74                           ; Generated 17/11/2021 GMT
    75                           ; 
    76                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution. Publication is not required when
    90                           ;        this file is used in an embedded application.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC16F1847 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108     0000                     	;# 
   109     0001                     	;# 
   110     0002                     	;# 
   111     0003                     	;# 
   112     0004                     	;# 
   113     0005                     	;# 
   114     0006                     	;# 
   115     0007                     	;# 
   116     0008                     	;# 
   117     0009                     	;# 
   118     000A                     	;# 
   119     000B                     	;# 
   120     000C                     	;# 
   121     000D                     	;# 
   122     0011                     	;# 
   123     0012                     	;# 
   124     0013                     	;# 
   125     0014                     	;# 
   126     0015                     	;# 
   127     0016                     	;# 
   128     0016                     	;# 
   129     0017                     	;# 
   130     0018                     	;# 
   131     0019                     	;# 
   132     001A                     	;# 
   133     001B                     	;# 
   134     001C                     	;# 
   135     001E                     	;# 
   136     001F                     	;# 
   137     008C                     	;# 
   138     008D                     	;# 
   139     0091                     	;# 
   140     0092                     	;# 
   141     0093                     	;# 
   142     0094                     	;# 
   143     0095                     	;# 
   144     0096                     	;# 
   145     0097                     	;# 
   146     0098                     	;# 
   147     0099                     	;# 
   148     009A                     	;# 
   149     009B                     	;# 
   150     009B                     	;# 
   151     009C                     	;# 
   152     009D                     	;# 
   153     009E                     	;# 
   154     010C                     	;# 
   155     010D                     	;# 
   156     0111                     	;# 
   157     0112                     	;# 
   158     0113                     	;# 
   159     0114                     	;# 
   160     0115                     	;# 
   161     0116                     	;# 
   162     0117                     	;# 
   163     0118                     	;# 
   164     0119                     	;# 
   165     011A                     	;# 
   166     011B                     	;# 
   167     011D                     	;# 
   168     011E                     	;# 
   169     018C                     	;# 
   170     018D                     	;# 
   171     0191                     	;# 
   172     0191                     	;# 
   173     0192                     	;# 
   174     0193                     	;# 
   175     0193                     	;# 
   176     0193                     	;# 
   177     0194                     	;# 
   178     0195                     	;# 
   179     0196                     	;# 
   180     0199                     	;# 
   181     019A                     	;# 
   182     019B                     	;# 
   183     019B                     	;# 
   184     019B                     	;# 
   185     019B                     	;# 
   186     019C                     	;# 
   187     019C                     	;# 
   188     019D                     	;# 
   189     019E                     	;# 
   190     019F                     	;# 
   191     020C                     	;# 
   192     020D                     	;# 
   193     0211                     	;# 
   194     0211                     	;# 
   195     0212                     	;# 
   196     0212                     	;# 
   197     0213                     	;# 
   198     0213                     	;# 
   199     0214                     	;# 
   200     0214                     	;# 
   201     0215                     	;# 
   202     0215                     	;# 
   203     0215                     	;# 
   204     0216                     	;# 
   205     0216                     	;# 
   206     0217                     	;# 
   207     0217                     	;# 
   208     0219                     	;# 
   209     021A                     	;# 
   210     021B                     	;# 
   211     021C                     	;# 
   212     021D                     	;# 
   213     021E                     	;# 
   214     021F                     	;# 
   215     0291                     	;# 
   216     0291                     	;# 
   217     0292                     	;# 
   218     0293                     	;# 
   219     0294                     	;# 
   220     0295                     	;# 
   221     0295                     	;# 
   222     0296                     	;# 
   223     0298                     	;# 
   224     0298                     	;# 
   225     0299                     	;# 
   226     029A                     	;# 
   227     029B                     	;# 
   228     029C                     	;# 
   229     029C                     	;# 
   230     029D                     	;# 
   231     029E                     	;# 
   232     029E                     	;# 
   233     0311                     	;# 
   234     0311                     	;# 
   235     0312                     	;# 
   236     0313                     	;# 
   237     0318                     	;# 
   238     0318                     	;# 
   239     0319                     	;# 
   240     031A                     	;# 
   241     0394                     	;# 
   242     0395                     	;# 
   243     0396                     	;# 
   244     039A                     	;# 
   245     039C                     	;# 
   246     039D                     	;# 
   247     039E                     	;# 
   248     039F                     	;# 
   249     0415                     	;# 
   250     0416                     	;# 
   251     0417                     	;# 
   252     041C                     	;# 
   253     041D                     	;# 
   254     041E                     	;# 
   255     0FE4                     	;# 
   256     0FE5                     	;# 
   257     0FE6                     	;# 
   258     0FE7                     	;# 
   259     0FE8                     	;# 
   260     0FE9                     	;# 
   261     0FEA                     	;# 
   262     0FEB                     	;# 
   263     0FED                     	;# 
   264     0FEE                     	;# 
   265     0FEF                     	;# 
   266     0000                     	;# 
   267     0001                     	;# 
   268     0002                     	;# 
   269     0003                     	;# 
   270     0004                     	;# 
   271     0005                     	;# 
   272     0006                     	;# 
   273     0007                     	;# 
   274     0008                     	;# 
   275     0009                     	;# 
   276     000A                     	;# 
   277     000B                     	;# 
   278     000C                     	;# 
   279     000D                     	;# 
   280     0011                     	;# 
   281     0012                     	;# 
   282     0013                     	;# 
   283     0014                     	;# 
   284     0015                     	;# 
   285     0016                     	;# 
   286     0016                     	;# 
   287     0017                     	;# 
   288     0018                     	;# 
   289     0019                     	;# 
   290     001A                     	;# 
   291     001B                     	;# 
   292     001C                     	;# 
   293     001E                     	;# 
   294     001F                     	;# 
   295     008C                     	;# 
   296     008D                     	;# 
   297     0091                     	;# 
   298     0092                     	;# 
   299     0093                     	;# 
   300     0094                     	;# 
   301     0095                     	;# 
   302     0096                     	;# 
   303     0097                     	;# 
   304     0098                     	;# 
   305     0099                     	;# 
   306     009A                     	;# 
   307     009B                     	;# 
   308     009B                     	;# 
   309     009C                     	;# 
   310     009D                     	;# 
   311     009E                     	;# 
   312     010C                     	;# 
   313     010D                     	;# 
   314     0111                     	;# 
   315     0112                     	;# 
   316     0113                     	;# 
   317     0114                     	;# 
   318     0115                     	;# 
   319     0116                     	;# 
   320     0117                     	;# 
   321     0118                     	;# 
   322     0119                     	;# 
   323     011A                     	;# 
   324     011B                     	;# 
   325     011D                     	;# 
   326     011E                     	;# 
   327     018C                     	;# 
   328     018D                     	;# 
   329     0191                     	;# 
   330     0191                     	;# 
   331     0192                     	;# 
   332     0193                     	;# 
   333     0193                     	;# 
   334     0193                     	;# 
   335     0194                     	;# 
   336     0195                     	;# 
   337     0196                     	;# 
   338     0199                     	;# 
   339     019A                     	;# 
   340     019B                     	;# 
   341     019B                     	;# 
   342     019B                     	;# 
   343     019B                     	;# 
   344     019C                     	;# 
   345     019C                     	;# 
   346     019D                     	;# 
   347     019E                     	;# 
   348     019F                     	;# 
   349     020C                     	;# 
   350     020D                     	;# 
   351     0211                     	;# 
   352     0211                     	;# 
   353     0212                     	;# 
   354     0212                     	;# 
   355     0213                     	;# 
   356     0213                     	;# 
   357     0214                     	;# 
   358     0214                     	;# 
   359     0215                     	;# 
   360     0215                     	;# 
   361     0215                     	;# 
   362     0216                     	;# 
   363     0216                     	;# 
   364     0217                     	;# 
   365     0217                     	;# 
   366     0219                     	;# 
   367     021A                     	;# 
   368     021B                     	;# 
   369     021C                     	;# 
   370     021D                     	;# 
   371     021E                     	;# 
   372     021F                     	;# 
   373     0291                     	;# 
   374     0291                     	;# 
   375     0292                     	;# 
   376     0293                     	;# 
   377     0294                     	;# 
   378     0295                     	;# 
   379     0295                     	;# 
   380     0296                     	;# 
   381     0298                     	;# 
   382     0298                     	;# 
   383     0299                     	;# 
   384     029A                     	;# 
   385     029B                     	;# 
   386     029C                     	;# 
   387     029C                     	;# 
   388     029D                     	;# 
   389     029E                     	;# 
   390     029E                     	;# 
   391     0311                     	;# 
   392     0311                     	;# 
   393     0312                     	;# 
   394     0313                     	;# 
   395     0318                     	;# 
   396     0318                     	;# 
   397     0319                     	;# 
   398     031A                     	;# 
   399     0394                     	;# 
   400     0395                     	;# 
   401     0396                     	;# 
   402     039A                     	;# 
   403     039C                     	;# 
   404     039D                     	;# 
   405     039E                     	;# 
   406     039F                     	;# 
   407     0415                     	;# 
   408     0416                     	;# 
   409     0417                     	;# 
   410     041C                     	;# 
   411     041D                     	;# 
   412     041E                     	;# 
   413     0FE4                     	;# 
   414     0FE5                     	;# 
   415     0FE6                     	;# 
   416     0FE7                     	;# 
   417     0FE8                     	;# 
   418     0FE9                     	;# 
   419     0FEA                     	;# 
   420     0FEB                     	;# 
   421     0FED                     	;# 
   422     0FEE                     	;# 
   423     0FEF                     	;# 
   424     0000                     	;# 
   425     0001                     	;# 
   426     0002                     	;# 
   427     0003                     	;# 
   428     0004                     	;# 
   429     0005                     	;# 
   430     0006                     	;# 
   431     0007                     	;# 
   432     0008                     	;# 
   433     0009                     	;# 
   434     000A                     	;# 
   435     000B                     	;# 
   436     000C                     	;# 
   437     000D                     	;# 
   438     0011                     	;# 
   439     0012                     	;# 
   440     0013                     	;# 
   441     0014                     	;# 
   442     0015                     	;# 
   443     0016                     	;# 
   444     0016                     	;# 
   445     0017                     	;# 
   446     0018                     	;# 
   447     0019                     	;# 
   448     001A                     	;# 
   449     001B                     	;# 
   450     001C                     	;# 
   451     001E                     	;# 
   452     001F                     	;# 
   453     008C                     	;# 
   454     008D                     	;# 
   455     0091                     	;# 
   456     0092                     	;# 
   457     0093                     	;# 
   458     0094                     	;# 
   459     0095                     	;# 
   460     0096                     	;# 
   461     0097                     	;# 
   462     0098                     	;# 
   463     0099                     	;# 
   464     009A                     	;# 
   465     009B                     	;# 
   466     009B                     	;# 
   467     009C                     	;# 
   468     009D                     	;# 
   469     009E                     	;# 
   470     010C                     	;# 
   471     010D                     	;# 
   472     0111                     	;# 
   473     0112                     	;# 
   474     0113                     	;# 
   475     0114                     	;# 
   476     0115                     	;# 
   477     0116                     	;# 
   478     0117                     	;# 
   479     0118                     	;# 
   480     0119                     	;# 
   481     011A                     	;# 
   482     011B                     	;# 
   483     011D                     	;# 
   484     011E                     	;# 
   485     018C                     	;# 
   486     018D                     	;# 
   487     0191                     	;# 
   488     0191                     	;# 
   489     0192                     	;# 
   490     0193                     	;# 
   491     0193                     	;# 
   492     0193                     	;# 
   493     0194                     	;# 
   494     0195                     	;# 
   495     0196                     	;# 
   496     0199                     	;# 
   497     019A                     	;# 
   498     019B                     	;# 
   499     019B                     	;# 
   500     019B                     	;# 
   501     019B                     	;# 
   502     019C                     	;# 
   503     019C                     	;# 
   504     019D                     	;# 
   505     019E                     	;# 
   506     019F                     	;# 
   507     020C                     	;# 
   508     020D                     	;# 
   509     0211                     	;# 
   510     0211                     	;# 
   511     0212                     	;# 
   512     0212                     	;# 
   513     0213                     	;# 
   514     0213                     	;# 
   515     0214                     	;# 
   516     0214                     	;# 
   517     0215                     	;# 
   518     0215                     	;# 
   519     0215                     	;# 
   520     0216                     	;# 
   521     0216                     	;# 
   522     0217                     	;# 
   523     0217                     	;# 
   524     0219                     	;# 
   525     021A                     	;# 
   526     021B                     	;# 
   527     021C                     	;# 
   528     021D                     	;# 
   529     021E                     	;# 
   530     021F                     	;# 
   531     0291                     	;# 
   532     0291                     	;# 
   533     0292                     	;# 
   534     0293                     	;# 
   535     0294                     	;# 
   536     0295                     	;# 
   537     0295                     	;# 
   538     0296                     	;# 
   539     0298                     	;# 
   540     0298                     	;# 
   541     0299                     	;# 
   542     029A                     	;# 
   543     029B                     	;# 
   544     029C                     	;# 
   545     029C                     	;# 
   546     029D                     	;# 
   547     029E                     	;# 
   548     029E                     	;# 
   549     0311                     	;# 
   550     0311                     	;# 
   551     0312                     	;# 
   552     0313                     	;# 
   553     0318                     	;# 
   554     0318                     	;# 
   555     0319                     	;# 
   556     031A                     	;# 
   557     0394                     	;# 
   558     0395                     	;# 
   559     0396                     	;# 
   560     039A                     	;# 
   561     039C                     	;# 
   562     039D                     	;# 
   563     039E                     	;# 
   564     039F                     	;# 
   565     0415                     	;# 
   566     0416                     	;# 
   567     0417                     	;# 
   568     041C                     	;# 
   569     041D                     	;# 
   570     041E                     	;# 
   571     0FE4                     	;# 
   572     0FE5                     	;# 
   573     0FE6                     	;# 
   574     0FE7                     	;# 
   575     0FE8                     	;# 
   576     0FE9                     	;# 
   577     0FEA                     	;# 
   578     0FEB                     	;# 
   579     0FED                     	;# 
   580     0FEE                     	;# 
   581     0FEF                     	;# 
   582     0000                     	;# 
   583     0001                     	;# 
   584     0002                     	;# 
   585     0003                     	;# 
   586     0004                     	;# 
   587     0005                     	;# 
   588     0006                     	;# 
   589     0007                     	;# 
   590     0008                     	;# 
   591     0009                     	;# 
   592     000A                     	;# 
   593     000B                     	;# 
   594     000C                     	;# 
   595     000D                     	;# 
   596     0011                     	;# 
   597     0012                     	;# 
   598     0013                     	;# 
   599     0014                     	;# 
   600     0015                     	;# 
   601     0016                     	;# 
   602     0016                     	;# 
   603     0017                     	;# 
   604     0018                     	;# 
   605     0019                     	;# 
   606     001A                     	;# 
   607     001B                     	;# 
   608     001C                     	;# 
   609     001E                     	;# 
   610     001F                     	;# 
   611     008C                     	;# 
   612     008D                     	;# 
   613     0091                     	;# 
   614     0092                     	;# 
   615     0093                     	;# 
   616     0094                     	;# 
   617     0095                     	;# 
   618     0096                     	;# 
   619     0097                     	;# 
   620     0098                     	;# 
   621     0099                     	;# 
   622     009A                     	;# 
   623     009B                     	;# 
   624     009B                     	;# 
   625     009C                     	;# 
   626     009D                     	;# 
   627     009E                     	;# 
   628     010C                     	;# 
   629     010D                     	;# 
   630     0111                     	;# 
   631     0112                     	;# 
   632     0113                     	;# 
   633     0114                     	;# 
   634     0115                     	;# 
   635     0116                     	;# 
   636     0117                     	;# 
   637     0118                     	;# 
   638     0119                     	;# 
   639     011A                     	;# 
   640     011B                     	;# 
   641     011D                     	;# 
   642     011E                     	;# 
   643     018C                     	;# 
   644     018D                     	;# 
   645     0191                     	;# 
   646     0191                     	;# 
   647     0192                     	;# 
   648     0193                     	;# 
   649     0193                     	;# 
   650     0193                     	;# 
   651     0194                     	;# 
   652     0195                     	;# 
   653     0196                     	;# 
   654     0199                     	;# 
   655     019A                     	;# 
   656     019B                     	;# 
   657     019B                     	;# 
   658     019B                     	;# 
   659     019B                     	;# 
   660     019C                     	;# 
   661     019C                     	;# 
   662     019D                     	;# 
   663     019E                     	;# 
   664     019F                     	;# 
   665     020C                     	;# 
   666     020D                     	;# 
   667     0211                     	;# 
   668     0211                     	;# 
   669     0212                     	;# 
   670     0212                     	;# 
   671     0213                     	;# 
   672     0213                     	;# 
   673     0214                     	;# 
   674     0214                     	;# 
   675     0215                     	;# 
   676     0215                     	;# 
   677     0215                     	;# 
   678     0216                     	;# 
   679     0216                     	;# 
   680     0217                     	;# 
   681     0217                     	;# 
   682     0219                     	;# 
   683     021A                     	;# 
   684     021B                     	;# 
   685     021C                     	;# 
   686     021D                     	;# 
   687     021E                     	;# 
   688     021F                     	;# 
   689     0291                     	;# 
   690     0291                     	;# 
   691     0292                     	;# 
   692     0293                     	;# 
   693     0294                     	;# 
   694     0295                     	;# 
   695     0295                     	;# 
   696     0296                     	;# 
   697     0298                     	;# 
   698     0298                     	;# 
   699     0299                     	;# 
   700     029A                     	;# 
   701     029B                     	;# 
   702     029C                     	;# 
   703     029C                     	;# 
   704     029D                     	;# 
   705     029E                     	;# 
   706     029E                     	;# 
   707     0311                     	;# 
   708     0311                     	;# 
   709     0312                     	;# 
   710     0313                     	;# 
   711     0318                     	;# 
   712     0318                     	;# 
   713     0319                     	;# 
   714     031A                     	;# 
   715     0394                     	;# 
   716     0395                     	;# 
   717     0396                     	;# 
   718     039A                     	;# 
   719     039C                     	;# 
   720     039D                     	;# 
   721     039E                     	;# 
   722     039F                     	;# 
   723     0415                     	;# 
   724     0416                     	;# 
   725     0417                     	;# 
   726     041C                     	;# 
   727     041D                     	;# 
   728     041E                     	;# 
   729     0FE4                     	;# 
   730     0FE5                     	;# 
   731     0FE6                     	;# 
   732     0FE7                     	;# 
   733     0FE8                     	;# 
   734     0FE9                     	;# 
   735     0FEA                     	;# 
   736     0FEB                     	;# 
   737     0FED                     	;# 
   738     0FEE                     	;# 
   739     0FEF                     	;# 
   740     0000                     	;# 
   741     0001                     	;# 
   742     0002                     	;# 
   743     0003                     	;# 
   744     0004                     	;# 
   745     0005                     	;# 
   746     0006                     	;# 
   747     0007                     	;# 
   748     0008                     	;# 
   749     0009                     	;# 
   750     000A                     	;# 
   751     000B                     	;# 
   752     000C                     	;# 
   753     000D                     	;# 
   754     0011                     	;# 
   755     0012                     	;# 
   756     0013                     	;# 
   757     0014                     	;# 
   758     0015                     	;# 
   759     0016                     	;# 
   760     0016                     	;# 
   761     0017                     	;# 
   762     0018                     	;# 
   763     0019                     	;# 
   764     001A                     	;# 
   765     001B                     	;# 
   766     001C                     	;# 
   767     001E                     	;# 
   768     001F                     	;# 
   769     008C                     	;# 
   770     008D                     	;# 
   771     0091                     	;# 
   772     0092                     	;# 
   773     0093                     	;# 
   774     0094                     	;# 
   775     0095                     	;# 
   776     0096                     	;# 
   777     0097                     	;# 
   778     0098                     	;# 
   779     0099                     	;# 
   780     009A                     	;# 
   781     009B                     	;# 
   782     009B                     	;# 
   783     009C                     	;# 
   784     009D                     	;# 
   785     009E                     	;# 
   786     010C                     	;# 
   787     010D                     	;# 
   788     0111                     	;# 
   789     0112                     	;# 
   790     0113                     	;# 
   791     0114                     	;# 
   792     0115                     	;# 
   793     0116                     	;# 
   794     0117                     	;# 
   795     0118                     	;# 
   796     0119                     	;# 
   797     011A                     	;# 
   798     011B                     	;# 
   799     011D                     	;# 
   800     011E                     	;# 
   801     018C                     	;# 
   802     018D                     	;# 
   803     0191                     	;# 
   804     0191                     	;# 
   805     0192                     	;# 
   806     0193                     	;# 
   807     0193                     	;# 
   808     0193                     	;# 
   809     0194                     	;# 
   810     0195                     	;# 
   811     0196                     	;# 
   812     0199                     	;# 
   813     019A                     	;# 
   814     019B                     	;# 
   815     019B                     	;# 
   816     019B                     	;# 
   817     019B                     	;# 
   818     019C                     	;# 
   819     019C                     	;# 
   820     019D                     	;# 
   821     019E                     	;# 
   822     019F                     	;# 
   823     020C                     	;# 
   824     020D                     	;# 
   825     0211                     	;# 
   826     0211                     	;# 
   827     0212                     	;# 
   828     0212                     	;# 
   829     0213                     	;# 
   830     0213                     	;# 
   831     0214                     	;# 
   832     0214                     	;# 
   833     0215                     	;# 
   834     0215                     	;# 
   835     0215                     	;# 
   836     0216                     	;# 
   837     0216                     	;# 
   838     0217                     	;# 
   839     0217                     	;# 
   840     0219                     	;# 
   841     021A                     	;# 
   842     021B                     	;# 
   843     021C                     	;# 
   844     021D                     	;# 
   845     021E                     	;# 
   846     021F                     	;# 
   847     0291                     	;# 
   848     0291                     	;# 
   849     0292                     	;# 
   850     0293                     	;# 
   851     0294                     	;# 
   852     0295                     	;# 
   853     0295                     	;# 
   854     0296                     	;# 
   855     0298                     	;# 
   856     0298                     	;# 
   857     0299                     	;# 
   858     029A                     	;# 
   859     029B                     	;# 
   860     029C                     	;# 
   861     029C                     	;# 
   862     029D                     	;# 
   863     029E                     	;# 
   864     029E                     	;# 
   865     0311                     	;# 
   866     0311                     	;# 
   867     0312                     	;# 
   868     0313                     	;# 
   869     0318                     	;# 
   870     0318                     	;# 
   871     0319                     	;# 
   872     031A                     	;# 
   873     0394                     	;# 
   874     0395                     	;# 
   875     0396                     	;# 
   876     039A                     	;# 
   877     039C                     	;# 
   878     039D                     	;# 
   879     039E                     	;# 
   880     039F                     	;# 
   881     0415                     	;# 
   882     0416                     	;# 
   883     0417                     	;# 
   884     041C                     	;# 
   885     041D                     	;# 
   886     041E                     	;# 
   887     0FE4                     	;# 
   888     0FE5                     	;# 
   889     0FE6                     	;# 
   890     0FE7                     	;# 
   891     0FE8                     	;# 
   892     0FE9                     	;# 
   893     0FEA                     	;# 
   894     0FEB                     	;# 
   895     0FED                     	;# 
   896     0FEE                     	;# 
   897     0FEF                     	;# 
   898     0000                     	;# 
   899     0001                     	;# 
   900     0002                     	;# 
   901     0003                     	;# 
   902     0004                     	;# 
   903     0005                     	;# 
   904     0006                     	;# 
   905     0007                     	;# 
   906     0008                     	;# 
   907     0009                     	;# 
   908     000A                     	;# 
   909     000B                     	;# 
   910     000C                     	;# 
   911     000D                     	;# 
   912     0011                     	;# 
   913     0012                     	;# 
   914     0013                     	;# 
   915     0014                     	;# 
   916     0015                     	;# 
   917     0016                     	;# 
   918     0016                     	;# 
   919     0017                     	;# 
   920     0018                     	;# 
   921     0019                     	;# 
   922     001A                     	;# 
   923     001B                     	;# 
   924     001C                     	;# 
   925     001E                     	;# 
   926     001F                     	;# 
   927     008C                     	;# 
   928     008D                     	;# 
   929     0091                     	;# 
   930     0092                     	;# 
   931     0093                     	;# 
   932     0094                     	;# 
   933     0095                     	;# 
   934     0096                     	;# 
   935     0097                     	;# 
   936     0098                     	;# 
   937     0099                     	;# 
   938     009A                     	;# 
   939     009B                     	;# 
   940     009B                     	;# 
   941     009C                     	;# 
   942     009D                     	;# 
   943     009E                     	;# 
   944     010C                     	;# 
   945     010D                     	;# 
   946     0111                     	;# 
   947     0112                     	;# 
   948     0113                     	;# 
   949     0114                     	;# 
   950     0115                     	;# 
   951     0116                     	;# 
   952     0117                     	;# 
   953     0118                     	;# 
   954     0119                     	;# 
   955     011A                     	;# 
   956     011B                     	;# 
   957     011D                     	;# 
   958     011E                     	;# 
   959     018C                     	;# 
   960     018D                     	;# 
   961     0191                     	;# 
   962     0191                     	;# 
   963     0192                     	;# 
   964     0193                     	;# 
   965     0193                     	;# 
   966     0193                     	;# 
   967     0194                     	;# 
   968     0195                     	;# 
   969     0196                     	;# 
   970     0199                     	;# 
   971     019A                     	;# 
   972     019B                     	;# 
   973     019B                     	;# 
   974     019B                     	;# 
   975     019B                     	;# 
   976     019C                     	;# 
   977     019C                     	;# 
   978     019D                     	;# 
   979     019E                     	;# 
   980     019F                     	;# 
   981     020C                     	;# 
   982     020D                     	;# 
   983     0211                     	;# 
   984     0211                     	;# 
   985     0212                     	;# 
   986     0212                     	;# 
   987     0213                     	;# 
   988     0213                     	;# 
   989     0214                     	;# 
   990     0214                     	;# 
   991     0215                     	;# 
   992     0215                     	;# 
   993     0215                     	;# 
   994     0216                     	;# 
   995     0216                     	;# 
   996     0217                     	;# 
   997     0217                     	;# 
   998     0219                     	;# 
   999     021A                     	;# 
  1000     021B                     	;# 
  1001     021C                     	;# 
  1002     021D                     	;# 
  1003     021E                     	;# 
  1004     021F                     	;# 
  1005     0291                     	;# 
  1006     0291                     	;# 
  1007     0292                     	;# 
  1008     0293                     	;# 
  1009     0294                     	;# 
  1010     0295                     	;# 
  1011     0295                     	;# 
  1012     0296                     	;# 
  1013     0298                     	;# 
  1014     0298                     	;# 
  1015     0299                     	;# 
  1016     029A                     	;# 
  1017     029B                     	;# 
  1018     029C                     	;# 
  1019     029C                     	;# 
  1020     029D                     	;# 
  1021     029E                     	;# 
  1022     029E                     	;# 
  1023     0311                     	;# 
  1024     0311                     	;# 
  1025     0312                     	;# 
  1026     0313                     	;# 
  1027     0318                     	;# 
  1028     0318                     	;# 
  1029     0319                     	;# 
  1030     031A                     	;# 
  1031     0394                     	;# 
  1032     0395                     	;# 
  1033     0396                     	;# 
  1034     039A                     	;# 
  1035     039C                     	;# 
  1036     039D                     	;# 
  1037     039E                     	;# 
  1038     039F                     	;# 
  1039     0415                     	;# 
  1040     0416                     	;# 
  1041     0417                     	;# 
  1042     041C                     	;# 
  1043     041D                     	;# 
  1044     041E                     	;# 
  1045     0FE4                     	;# 
  1046     0FE5                     	;# 
  1047     0FE6                     	;# 
  1048     0FE7                     	;# 
  1049     0FE8                     	;# 
  1050     0FE9                     	;# 
  1051     0FEA                     	;# 
  1052     0FEB                     	;# 
  1053     0FED                     	;# 
  1054     0FEE                     	;# 
  1055     0FEF                     	;# 
  1056     0000                     	;# 
  1057     0001                     	;# 
  1058     0002                     	;# 
  1059     0003                     	;# 
  1060     0004                     	;# 
  1061     0005                     	;# 
  1062     0006                     	;# 
  1063     0007                     	;# 
  1064     0008                     	;# 
  1065     0009                     	;# 
  1066     000A                     	;# 
  1067     000B                     	;# 
  1068     000C                     	;# 
  1069     000D                     	;# 
  1070     0011                     	;# 
  1071     0012                     	;# 
  1072     0013                     	;# 
  1073     0014                     	;# 
  1074     0015                     	;# 
  1075     0016                     	;# 
  1076     0016                     	;# 
  1077     0017                     	;# 
  1078     0018                     	;# 
  1079     0019                     	;# 
  1080     001A                     	;# 
  1081     001B                     	;# 
  1082     001C                     	;# 
  1083     001E                     	;# 
  1084     001F                     	;# 
  1085     008C                     	;# 
  1086     008D                     	;# 
  1087     0091                     	;# 
  1088     0092                     	;# 
  1089     0093                     	;# 
  1090     0094                     	;# 
  1091     0095                     	;# 
  1092     0096                     	;# 
  1093     0097                     	;# 
  1094     0098                     	;# 
  1095     0099                     	;# 
  1096     009A                     	;# 
  1097     009B                     	;# 
  1098     009B                     	;# 
  1099     009C                     	;# 
  1100     009D                     	;# 
  1101     009E                     	;# 
  1102     010C                     	;# 
  1103     010D                     	;# 
  1104     0111                     	;# 
  1105     0112                     	;# 
  1106     0113                     	;# 
  1107     0114                     	;# 
  1108     0115                     	;# 
  1109     0116                     	;# 
  1110     0117                     	;# 
  1111     0118                     	;# 
  1112     0119                     	;# 
  1113     011A                     	;# 
  1114     011B                     	;# 
  1115     011D                     	;# 
  1116     011E                     	;# 
  1117     018C                     	;# 
  1118     018D                     	;# 
  1119     0191                     	;# 
  1120     0191                     	;# 
  1121     0192                     	;# 
  1122     0193                     	;# 
  1123     0193                     	;# 
  1124     0193                     	;# 
  1125     0194                     	;# 
  1126     0195                     	;# 
  1127     0196                     	;# 
  1128     0199                     	;# 
  1129     019A                     	;# 
  1130     019B                     	;# 
  1131     019B                     	;# 
  1132     019B                     	;# 
  1133     019B                     	;# 
  1134     019C                     	;# 
  1135     019C                     	;# 
  1136     019D                     	;# 
  1137     019E                     	;# 
  1138     019F                     	;# 
  1139     020C                     	;# 
  1140     020D                     	;# 
  1141     0211                     	;# 
  1142     0211                     	;# 
  1143     0212                     	;# 
  1144     0212                     	;# 
  1145     0213                     	;# 
  1146     0213                     	;# 
  1147     0214                     	;# 
  1148     0214                     	;# 
  1149     0215                     	;# 
  1150     0215                     	;# 
  1151     0215                     	;# 
  1152     0216                     	;# 
  1153     0216                     	;# 
  1154     0217                     	;# 
  1155     0217                     	;# 
  1156     0219                     	;# 
  1157     021A                     	;# 
  1158     021B                     	;# 
  1159     021C                     	;# 
  1160     021D                     	;# 
  1161     021E                     	;# 
  1162     021F                     	;# 
  1163     0291                     	;# 
  1164     0291                     	;# 
  1165     0292                     	;# 
  1166     0293                     	;# 
  1167     0294                     	;# 
  1168     0295                     	;# 
  1169     0295                     	;# 
  1170     0296                     	;# 
  1171     0298                     	;# 
  1172     0298                     	;# 
  1173     0299                     	;# 
  1174     029A                     	;# 
  1175     029B                     	;# 
  1176     029C                     	;# 
  1177     029C                     	;# 
  1178     029D                     	;# 
  1179     029E                     	;# 
  1180     029E                     	;# 
  1181     0311                     	;# 
  1182     0311                     	;# 
  1183     0312                     	;# 
  1184     0313                     	;# 
  1185     0318                     	;# 
  1186     0318                     	;# 
  1187     0319                     	;# 
  1188     031A                     	;# 
  1189     0394                     	;# 
  1190     0395                     	;# 
  1191     0396                     	;# 
  1192     039A                     	;# 
  1193     039C                     	;# 
  1194     039D                     	;# 
  1195     039E                     	;# 
  1196     039F                     	;# 
  1197     0415                     	;# 
  1198     0416                     	;# 
  1199     0417                     	;# 
  1200     041C                     	;# 
  1201     041D                     	;# 
  1202     041E                     	;# 
  1203     0FE4                     	;# 
  1204     0FE5                     	;# 
  1205     0FE6                     	;# 
  1206     0FE7                     	;# 
  1207     0FE8                     	;# 
  1208     0FE9                     	;# 
  1209     0FEA                     	;# 
  1210     0FEB                     	;# 
  1211     0FED                     	;# 
  1212     0FEE                     	;# 
  1213     0FEF                     	;# 
  1214     0000                     	;# 
  1215     0001                     	;# 
  1216     0002                     	;# 
  1217     0003                     	;# 
  1218     0004                     	;# 
  1219     0005                     	;# 
  1220     0006                     	;# 
  1221     0007                     	;# 
  1222     0008                     	;# 
  1223     0009                     	;# 
  1224     000A                     	;# 
  1225     000B                     	;# 
  1226     000C                     	;# 
  1227     000D                     	;# 
  1228     0011                     	;# 
  1229     0012                     	;# 
  1230     0013                     	;# 
  1231     0014                     	;# 
  1232     0015                     	;# 
  1233     0016                     	;# 
  1234     0016                     	;# 
  1235     0017                     	;# 
  1236     0018                     	;# 
  1237     0019                     	;# 
  1238     001A                     	;# 
  1239     001B                     	;# 
  1240     001C                     	;# 
  1241     001E                     	;# 
  1242     001F                     	;# 
  1243     008C                     	;# 
  1244     008D                     	;# 
  1245     0091                     	;# 
  1246     0092                     	;# 
  1247     0093                     	;# 
  1248     0094                     	;# 
  1249     0095                     	;# 
  1250     0096                     	;# 
  1251     0097                     	;# 
  1252     0098                     	;# 
  1253     0099                     	;# 
  1254     009A                     	;# 
  1255     009B                     	;# 
  1256     009B                     	;# 
  1257     009C                     	;# 
  1258     009D                     	;# 
  1259     009E                     	;# 
  1260     010C                     	;# 
  1261     010D                     	;# 
  1262     0111                     	;# 
  1263     0112                     	;# 
  1264     0113                     	;# 
  1265     0114                     	;# 
  1266     0115                     	;# 
  1267     0116                     	;# 
  1268     0117                     	;# 
  1269     0118                     	;# 
  1270     0119                     	;# 
  1271     011A                     	;# 
  1272     011B                     	;# 
  1273     011D                     	;# 
  1274     011E                     	;# 
  1275     018C                     	;# 
  1276     018D                     	;# 
  1277     0191                     	;# 
  1278     0191                     	;# 
  1279     0192                     	;# 
  1280     0193                     	;# 
  1281     0193                     	;# 
  1282     0193                     	;# 
  1283     0194                     	;# 
  1284     0195                     	;# 
  1285     0196                     	;# 
  1286     0199                     	;# 
  1287     019A                     	;# 
  1288     019B                     	;# 
  1289     019B                     	;# 
  1290     019B                     	;# 
  1291     019B                     	;# 
  1292     019C                     	;# 
  1293     019C                     	;# 
  1294     019D                     	;# 
  1295     019E                     	;# 
  1296     019F                     	;# 
  1297     020C                     	;# 
  1298     020D                     	;# 
  1299     0211                     	;# 
  1300     0211                     	;# 
  1301     0212                     	;# 
  1302     0212                     	;# 
  1303     0213                     	;# 
  1304     0213                     	;# 
  1305     0214                     	;# 
  1306     0214                     	;# 
  1307     0215                     	;# 
  1308     0215                     	;# 
  1309     0215                     	;# 
  1310     0216                     	;# 
  1311     0216                     	;# 
  1312     0217                     	;# 
  1313     0217                     	;# 
  1314     0219                     	;# 
  1315     021A                     	;# 
  1316     021B                     	;# 
  1317     021C                     	;# 
  1318     021D                     	;# 
  1319     021E                     	;# 
  1320     021F                     	;# 
  1321     0291                     	;# 
  1322     0291                     	;# 
  1323     0292                     	;# 
  1324     0293                     	;# 
  1325     0294                     	;# 
  1326     0295                     	;# 
  1327     0295                     	;# 
  1328     0296                     	;# 
  1329     0298                     	;# 
  1330     0298                     	;# 
  1331     0299                     	;# 
  1332     029A                     	;# 
  1333     029B                     	;# 
  1334     029C                     	;# 
  1335     029C                     	;# 
  1336     029D                     	;# 
  1337     029E                     	;# 
  1338     029E                     	;# 
  1339     0311                     	;# 
  1340     0311                     	;# 
  1341     0312                     	;# 
  1342     0313                     	;# 
  1343     0318                     	;# 
  1344     0318                     	;# 
  1345     0319                     	;# 
  1346     031A                     	;# 
  1347     0394                     	;# 
  1348     0395                     	;# 
  1349     0396                     	;# 
  1350     039A                     	;# 
  1351     039C                     	;# 
  1352     039D                     	;# 
  1353     039E                     	;# 
  1354     039F                     	;# 
  1355     0415                     	;# 
  1356     0416                     	;# 
  1357     0417                     	;# 
  1358     041C                     	;# 
  1359     041D                     	;# 
  1360     041E                     	;# 
  1361     0FE4                     	;# 
  1362     0FE5                     	;# 
  1363     0FE6                     	;# 
  1364     0FE7                     	;# 
  1365     0FE8                     	;# 
  1366     0FE9                     	;# 
  1367     0FEA                     	;# 
  1368     0FEB                     	;# 
  1369     0FED                     	;# 
  1370     0FEE                     	;# 
  1371     0FEF                     	;# 
  1372     0000                     	;# 
  1373     0001                     	;# 
  1374     0002                     	;# 
  1375     0003                     	;# 
  1376     0004                     	;# 
  1377     0005                     	;# 
  1378     0006                     	;# 
  1379     0007                     	;# 
  1380     0008                     	;# 
  1381     0009                     	;# 
  1382     000A                     	;# 
  1383     000B                     	;# 
  1384     000C                     	;# 
  1385     000D                     	;# 
  1386     0011                     	;# 
  1387     0012                     	;# 
  1388     0013                     	;# 
  1389     0014                     	;# 
  1390     0015                     	;# 
  1391     0016                     	;# 
  1392     0016                     	;# 
  1393     0017                     	;# 
  1394     0018                     	;# 
  1395     0019                     	;# 
  1396     001A                     	;# 
  1397     001B                     	;# 
  1398     001C                     	;# 
  1399     001E                     	;# 
  1400     001F                     	;# 
  1401     008C                     	;# 
  1402     008D                     	;# 
  1403     0091                     	;# 
  1404     0092                     	;# 
  1405     0093                     	;# 
  1406     0094                     	;# 
  1407     0095                     	;# 
  1408     0096                     	;# 
  1409     0097                     	;# 
  1410     0098                     	;# 
  1411     0099                     	;# 
  1412     009A                     	;# 
  1413     009B                     	;# 
  1414     009B                     	;# 
  1415     009C                     	;# 
  1416     009D                     	;# 
  1417     009E                     	;# 
  1418     010C                     	;# 
  1419     010D                     	;# 
  1420     0111                     	;# 
  1421     0112                     	;# 
  1422     0113                     	;# 
  1423     0114                     	;# 
  1424     0115                     	;# 
  1425     0116                     	;# 
  1426     0117                     	;# 
  1427     0118                     	;# 
  1428     0119                     	;# 
  1429     011A                     	;# 
  1430     011B                     	;# 
  1431     011D                     	;# 
  1432     011E                     	;# 
  1433     018C                     	;# 
  1434     018D                     	;# 
  1435     0191                     	;# 
  1436     0191                     	;# 
  1437     0192                     	;# 
  1438     0193                     	;# 
  1439     0193                     	;# 
  1440     0193                     	;# 
  1441     0194                     	;# 
  1442     0195                     	;# 
  1443     0196                     	;# 
  1444     0199                     	;# 
  1445     019A                     	;# 
  1446     019B                     	;# 
  1447     019B                     	;# 
  1448     019B                     	;# 
  1449     019B                     	;# 
  1450     019C                     	;# 
  1451     019C                     	;# 
  1452     019D                     	;# 
  1453     019E                     	;# 
  1454     019F                     	;# 
  1455     020C                     	;# 
  1456     020D                     	;# 
  1457     0211                     	;# 
  1458     0211                     	;# 
  1459     0212                     	;# 
  1460     0212                     	;# 
  1461     0213                     	;# 
  1462     0213                     	;# 
  1463     0214                     	;# 
  1464     0214                     	;# 
  1465     0215                     	;# 
  1466     0215                     	;# 
  1467     0215                     	;# 
  1468     0216                     	;# 
  1469     0216                     	;# 
  1470     0217                     	;# 
  1471     0217                     	;# 
  1472     0219                     	;# 
  1473     021A                     	;# 
  1474     021B                     	;# 
  1475     021C                     	;# 
  1476     021D                     	;# 
  1477     021E                     	;# 
  1478     021F                     	;# 
  1479     0291                     	;# 
  1480     0291                     	;# 
  1481     0292                     	;# 
  1482     0293                     	;# 
  1483     0294                     	;# 
  1484     0295                     	;# 
  1485     0295                     	;# 
  1486     0296                     	;# 
  1487     0298                     	;# 
  1488     0298                     	;# 
  1489     0299                     	;# 
  1490     029A                     	;# 
  1491     029B                     	;# 
  1492     029C                     	;# 
  1493     029C                     	;# 
  1494     029D                     	;# 
  1495     029E                     	;# 
  1496     029E                     	;# 
  1497     0311                     	;# 
  1498     0311                     	;# 
  1499     0312                     	;# 
  1500     0313                     	;# 
  1501     0318                     	;# 
  1502     0318                     	;# 
  1503     0319                     	;# 
  1504     031A                     	;# 
  1505     0394                     	;# 
  1506     0395                     	;# 
  1507     0396                     	;# 
  1508     039A                     	;# 
  1509     039C                     	;# 
  1510     039D                     	;# 
  1511     039E                     	;# 
  1512     039F                     	;# 
  1513     0415                     	;# 
  1514     0416                     	;# 
  1515     0417                     	;# 
  1516     041C                     	;# 
  1517     041D                     	;# 
  1518     041E                     	;# 
  1519     0FE4                     	;# 
  1520     0FE5                     	;# 
  1521     0FE6                     	;# 
  1522     0FE7                     	;# 
  1523     0FE8                     	;# 
  1524     0FE9                     	;# 
  1525     0FEA                     	;# 
  1526     0FEB                     	;# 
  1527     0FED                     	;# 
  1528     0FEE                     	;# 
  1529     0FEF                     	;# 
  1530     0000                     	;# 
  1531     0001                     	;# 
  1532     0002                     	;# 
  1533     0003                     	;# 
  1534     0004                     	;# 
  1535     0005                     	;# 
  1536     0006                     	;# 
  1537     0007                     	;# 
  1538     0008                     	;# 
  1539     0009                     	;# 
  1540     000A                     	;# 
  1541     000B                     	;# 
  1542     000C                     	;# 
  1543     000D                     	;# 
  1544     0011                     	;# 
  1545     0012                     	;# 
  1546     0013                     	;# 
  1547     0014                     	;# 
  1548     0015                     	;# 
  1549     0016                     	;# 
  1550     0016                     	;# 
  1551     0017                     	;# 
  1552     0018                     	;# 
  1553     0019                     	;# 
  1554     001A                     	;# 
  1555     001B                     	;# 
  1556     001C                     	;# 
  1557     001E                     	;# 
  1558     001F                     	;# 
  1559     008C                     	;# 
  1560     008D                     	;# 
  1561     0091                     	;# 
  1562     0092                     	;# 
  1563     0093                     	;# 
  1564     0094                     	;# 
  1565     0095                     	;# 
  1566     0096                     	;# 
  1567     0097                     	;# 
  1568     0098                     	;# 
  1569     0099                     	;# 
  1570     009A                     	;# 
  1571     009B                     	;# 
  1572     009B                     	;# 
  1573     009C                     	;# 
  1574     009D                     	;# 
  1575     009E                     	;# 
  1576     010C                     	;# 
  1577     010D                     	;# 
  1578     0111                     	;# 
  1579     0112                     	;# 
  1580     0113                     	;# 
  1581     0114                     	;# 
  1582     0115                     	;# 
  1583     0116                     	;# 
  1584     0117                     	;# 
  1585     0118                     	;# 
  1586     0119                     	;# 
  1587     011A                     	;# 
  1588     011B                     	;# 
  1589     011D                     	;# 
  1590     011E                     	;# 
  1591     018C                     	;# 
  1592     018D                     	;# 
  1593     0191                     	;# 
  1594     0191                     	;# 
  1595     0192                     	;# 
  1596     0193                     	;# 
  1597     0193                     	;# 
  1598     0193                     	;# 
  1599     0194                     	;# 
  1600     0195                     	;# 
  1601     0196                     	;# 
  1602     0199                     	;# 
  1603     019A                     	;# 
  1604     019B                     	;# 
  1605     019B                     	;# 
  1606     019B                     	;# 
  1607     019B                     	;# 
  1608     019C                     	;# 
  1609     019C                     	;# 
  1610     019D                     	;# 
  1611     019E                     	;# 
  1612     019F                     	;# 
  1613     020C                     	;# 
  1614     020D                     	;# 
  1615     0211                     	;# 
  1616     0211                     	;# 
  1617     0212                     	;# 
  1618     0212                     	;# 
  1619     0213                     	;# 
  1620     0213                     	;# 
  1621     0214                     	;# 
  1622     0214                     	;# 
  1623     0215                     	;# 
  1624     0215                     	;# 
  1625     0215                     	;# 
  1626     0216                     	;# 
  1627     0216                     	;# 
  1628     0217                     	;# 
  1629     0217                     	;# 
  1630     0219                     	;# 
  1631     021A                     	;# 
  1632     021B                     	;# 
  1633     021C                     	;# 
  1634     021D                     	;# 
  1635     021E                     	;# 
  1636     021F                     	;# 
  1637     0291                     	;# 
  1638     0291                     	;# 
  1639     0292                     	;# 
  1640     0293                     	;# 
  1641     0294                     	;# 
  1642     0295                     	;# 
  1643     0295                     	;# 
  1644     0296                     	;# 
  1645     0298                     	;# 
  1646     0298                     	;# 
  1647     0299                     	;# 
  1648     029A                     	;# 
  1649     029B                     	;# 
  1650     029C                     	;# 
  1651     029C                     	;# 
  1652     029D                     	;# 
  1653     029E                     	;# 
  1654     029E                     	;# 
  1655     0311                     	;# 
  1656     0311                     	;# 
  1657     0312                     	;# 
  1658     0313                     	;# 
  1659     0318                     	;# 
  1660     0318                     	;# 
  1661     0319                     	;# 
  1662     031A                     	;# 
  1663     0394                     	;# 
  1664     0395                     	;# 
  1665     0396                     	;# 
  1666     039A                     	;# 
  1667     039C                     	;# 
  1668     039D                     	;# 
  1669     039E                     	;# 
  1670     039F                     	;# 
  1671     0415                     	;# 
  1672     0416                     	;# 
  1673     0417                     	;# 
  1674     041C                     	;# 
  1675     041D                     	;# 
  1676     041E                     	;# 
  1677     0FE4                     	;# 
  1678     0FE5                     	;# 
  1679     0FE6                     	;# 
  1680     0FE7                     	;# 
  1681     0FE8                     	;# 
  1682     0FE9                     	;# 
  1683     0FEA                     	;# 
  1684     0FEB                     	;# 
  1685     0FED                     	;# 
  1686     0FEE                     	;# 
  1687     0FEF                     	;# 
  1688                           
  1689 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  1690     0000                     
  1691 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  1692     0000                     
  1693 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  1694     0000                     
  1695                           	psect	idataCOMMON
  1696     0002                     __pidataCOMMON:
  1697                           
  1698                           ;initializer for _CURRENT_MODE
  1699     0002  3405               	retlw	5
  1700     0003  3400               	retlw	0
  1701                           
  1702                           	psect	idataBANK1
  1703     07FF                     __pidataBANK1:
  1704                           
  1705                           ;initializer for __LastUpState
  1706     07FF  3401               	retlw	1
  1707                           
  1708                           	psect	stringtext1
  1709     1000                     __pstringtext1:
  1710     1000                     _SETPOINTS:
  1711     1000  3441               	retlw	65
  1712     1001  3400               	retlw	0
  1713     1002  3444               	retlw	68
  1714     1003  3400               	retlw	0
  1715     1004  3447               	retlw	71
  1716     1005  3400               	retlw	0
  1717     1006  344A               	retlw	74
  1718     1007  3400               	retlw	0
  1719     1008  344D               	retlw	77
  1720     1009  3400               	retlw	0
  1721     100A                     __end_of_SETPOINTS:
  1722                           
  1723                           	psect	stringtext2
  1724     100A                     __pstringtext2:
  1725     100A                     _C:
  1726     100A  3480               	retlw	128
  1727     100B  3425               	retlw	37
  1728     100C  34C4               	retlw	196
  1729     100D  3433               	retlw	51
  1730     100E                     __end_of_C:
  1731                           
  1732                           	psect	stringtext3
  1733     100E                     __pstringtext3:
  1734     100E                     _B:
  1735     100E  3416               	retlw	22
  1736     100F  342D               	retlw	45
  1737     1010  3478               	retlw	120
  1738     1011  3439               	retlw	57
  1739     1012                     __end_of_B:
  1740                           
  1741                           	psect	stringtext4
  1742     1012                     __pstringtext4:
  1743     1012                     _A:
  1744     1012  3410               	retlw	16
  1745     1013  3400               	retlw	0
  1746     1014  34A8               	retlw	168
  1747     1015  343A               	retlw	58
  1748     1016                     __end_of_A:
  1749                           
  1750                           	psect	stringtext5
  1751     1016                     __pstringtext5:
  1752     1016                     _ONE_SECOND:
  1753     1016  340A               	retlw	10
  1754     1017  3400               	retlw	0
  1755     1018                     __end_of_ONE_SECOND:
  1756                           
  1757                           	psect	stringtext6
  1758     1018                     __pstringtext6:
  1759     1018                     _TURN_ON:
  1760     1018  3401               	retlw	1
  1761     1019  3400               	retlw	0
  1762     101A                     __end_of_TURN_ON:
  1763                           
  1764                           	psect	stringtext7
  1765     101A                     __pstringtext7:
  1766     101A                     _SHUT_OFF:
  1767     101A  3402               	retlw	2
  1768     101B  3400               	retlw	0
  1769     101C                     __end_of_SHUT_OFF:
  1770                           
  1771                           	psect	stringtext8
  1772     101C                     __pstringtext8:
  1773     101C                     _MIN_IDLE_TIME:
  1774     101C  3403               	retlw	3
  1775     101D  3400               	retlw	0
  1776     101E                     __end_of_MIN_IDLE_TIME:
  1777                           
  1778                           	psect	stringtext9
  1779     101E                     __pstringtext9:
  1780     101E                     _MIN_RUN_TIME:
  1781     101E  3403               	retlw	3
  1782     101F  3400               	retlw	0
  1783     1020                     __end_of_MIN_RUN_TIME:
  1784                           
  1785                           	psect	nvBANK2
  1786     0160                     __pnvBANK2:
  1787     0160                     _EUSART_ErrorHandler:
  1788     0160                     	ds	2
  1789     0162                     _EUSART_OverrunErrorHandler:
  1790     0162                     	ds	2
  1791     0164                     _EUSART_FramingErrorHandler:
  1792     0164                     	ds	2
  1793     0166                     _TMR1_InterruptHandler:
  1794     0166                     	ds	2
  1795     0168                     _TMR0_InterruptHandler:
  1796     0168                     	ds	2
  1797     000D                     _PORTBbits	set	13
  1798     000C                     _PORTAbits	set	12
  1799     0018                     _T1CONbits	set	24
  1800     0018                     _T1CON	set	24
  1801     0016                     _TMR1L	set	22
  1802     0017                     _TMR1H	set	23
  1803     0019                     _T1GCON	set	25
  1804     0011                     _PIR1bits	set	17
  1805     000B                     _INTCONbits	set	11
  1806     0015                     _TMR0	set	21
  1807     008D                     _TRISBbits	set	141
  1808     008C                     _TRISAbits	set	140
  1809     0091                     _PIE1bits	set	145
  1810     0095                     _OPTION_REG	set	149
  1811     009D                     _ADCON0bits	set	157
  1812     009D                     _ADCON0	set	157
  1813     009C                     _ADRESH	set	156
  1814     009B                     _ADRESL	set	155
  1815     009E                     _ADCON1	set	158
  1816     0097                     _WDTCON	set	151
  1817     0098                     _OSCTUNE	set	152
  1818     0099                     _OSCCON	set	153
  1819     0095                     _OPTION_REGbits	set	149
  1820     008D                     _TRISB	set	141
  1821     008C                     _TRISA	set	140
  1822     010D                     _LATBbits	set	269
  1823     010C                     _LATAbits	set	268
  1824     0116                     _BORCON	set	278
  1825     011E                     _APFCON1	set	286
  1826     011D                     _APFCON0	set	285
  1827     010D                     _LATB	set	269
  1828     010C                     _LATA	set	268
  1829     019A                     _TXREG	set	410
  1830     019C                     _SPBRGH	set	412
  1831     019B                     _SPBRGL	set	411
  1832     019E                     _TXSTA	set	414
  1833     019D                     _RCSTA	set	413
  1834     019F                     _BAUDCON	set	415
  1835     018C                     _ANSELA	set	396
  1836     018D                     _ANSELB	set	397
  1837     020C                     _WPUA	set	524
  1838     020D                     _WPUB	set	525
  1839                           
  1840                           	psect	cinit
  1841     001B                     start_initialization:	
  1842                           ; #config settings
  1843                           
  1844     001B                     __initialization:
  1845                           
  1846                           ; Initialize objects allocated to COMMON
  1847     001B  3180  2002  3180   	fcall	__pidataCOMMON	;fetch initializer
  1848     001E  00F8               	movwf	__pdataCOMMON& (0+127)
  1849     001F  3180  2003  3180   	fcall	__pidataCOMMON+1	;fetch initializer
  1850     0022  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
  1851                           
  1852                           ; Initialize objects allocated to BANK1
  1853     0023  0021               	movlb	1	; select bank1
  1854     0024  3187  27FF  3180   	fcall	__pidataBANK1	;fetch initializer
  1855     0027  00CA               	movwf	__pdataBANK1& (0+127)
  1856                           
  1857                           ; Clear objects allocated to COMMON
  1858     0028  01FA               	clrf	__pbssCOMMON& (0+127)
  1859                           
  1860                           ; Clear objects allocated to BANK0
  1861     0029  0020               	movlb	0	; select bank0
  1862     002A  01E6               	clrf	__pbssBANK0& (0+127)
  1863                           
  1864                           ; Clear objects allocated to BANK1
  1865     002B  30C3               	movlw	low __pbssBANK1
  1866     002C  0084               	movwf	4
  1867     002D  3000               	movlw	high __pbssBANK1
  1868     002E  0085               	movwf	5
  1869     002F  3007               	movlw	7
  1870     0030  3188  206C  3180   	fcall	clear_ram0
  1871                           
  1872                           ; Clear objects allocated to BANK2
  1873     0033  3052               	movlw	low __pbssBANK2
  1874     0034  0084               	movwf	4
  1875     0035  3001               	movlw	high __pbssBANK2
  1876     0036  0085               	movwf	5
  1877     0037  300E               	movlw	14
  1878     0038  3188  206C         	fcall	clear_ram0
  1879     003A                     end_of_initialization:	
  1880                           ;End of C runtime variable initialization code
  1881                           
  1882     003A                     __end_of__initialization:
  1883     003A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1884     003B  0020               	movlb	0
  1885     003C  318A  2A18         	ljmp	_main	;jump to C main() function
  1886                           
  1887                           	psect	bssCOMMON
  1888     007A                     __pbssCOMMON:
  1889     007A                     _LOGIC_TICK:
  1890     007A                     	ds	1
  1891                           
  1892                           	psect	dataCOMMON
  1893     0078                     __pdataCOMMON:
  1894     0078                     _CURRENT_MODE:
  1895     0078                     	ds	2
  1896                           
  1897                           	psect	bssBANK0
  1898     0066                     __pbssBANK0:
  1899     0066                     _RELAY_STATUS:
  1900     0066                     	ds	1
  1901                           
  1902                           	psect	bssBANK1
  1903     00C3                     __pbssBANK1:
  1904     00C3                     _HEAT_CALL_TICKS:
  1905     00C3                     	ds	2
  1906     00C5                     _TEMP:
  1907     00C5                     	ds	2
  1908     00C7                     _READ_FLAG:
  1909     00C7                     	ds	1
  1910     00C8                     __LastDownState:
  1911     00C8                     	ds	1
  1912     00C9                     _timer0ReloadVal:
  1913     00C9                     	ds	1
  1914                           
  1915                           	psect	dataBANK1
  1916     00CA                     __pdataBANK1:
  1917     00CA                     __LastUpState:
  1918     00CA                     	ds	1
  1919                           
  1920                           	psect	bssBANK2
  1921     0152                     __pbssBANK2:
  1922     0152                     _READING_ITER:
  1923     0152                     	ds	2
  1924     0154                     _DISP_STATE:
  1925     0154                     	ds	2
  1926     0156                     _timer1ReloadVal:
  1927     0156                     	ds	2
  1928     0158                     TMR0_ISR@CountCallBack:
  1929     0158                     	ds	2
  1930     015A                     _ADC_InterruptHandler:
  1931     015A                     	ds	2
  1932     015C                     _LOGIC_FLAG:
  1933     015C                     	ds	1
  1934     015D                     _UART_FLAG:
  1935     015D                     	ds	1
  1936     015E                     _FULL_SAMPLE:
  1937     015E                     	ds	1
  1938     015F                     _eusartRxLastError:
  1939     015F                     	ds	1
  1940                           
  1941                           	psect	clrtext
  1942     086C                     clear_ram0:	
  1943                           ;	Called with FSR0 containing the base address, and
  1944                           ;	WREG with the size to clear
  1945                           
  1946     086C  0064               	clrwdt	;clear the watchdog before getting into this loop
  1947     086D                     clrloop0:
  1948     086D  0180               	clrf	0	;clear RAM location pointed to by FSR
  1949     086E  3101               	addfsr 0,1
  1950     086F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1951     0870  286D               	goto	clrloop0	;have we reached the end yet?
  1952     0871  3400               	retlw	0	;all done for this memory range, return
  1953                           
  1954                           	psect	cstackBANK2
  1955     0120                     __pcstackBANK2:
  1956     0120                     __ReadSensor@Vout:
  1957                           
  1958                           ; 4 bytes @ 0x0
  1959     0120                     	ds	4
  1960     0124                     __ReadSensor@Rpullup:
  1961                           
  1962                           ; 4 bytes @ 0x4
  1963     0124                     	ds	4
  1964     0128                     __ReadSensor@Vcc:
  1965                           
  1966                           ; 4 bytes @ 0x8
  1967     0128                     	ds	4
  1968     012C                     __ReadSensor@Rntc:
  1969                           
  1970                           ; 4 bytes @ 0xC
  1971     012C                     	ds	4
  1972     0130                     __ReadSensor@invT:
  1973                           
  1974                           ; 4 bytes @ 0x10
  1975     0130                     	ds	4
  1976     0134                     __ReadSensor@T:
  1977                           
  1978                           ; 4 bytes @ 0x14
  1979     0134                     	ds	4
  1980     0138                     __ReadSensor@Tc:
  1981                           
  1982                           ; 4 bytes @ 0x18
  1983     0138                     	ds	4
  1984     013C                     __ReadSensor@Tf:
  1985                           
  1986                           ; 4 bytes @ 0x1C
  1987     013C                     	ds	4
  1988     0140                     __ReadSensor$1709:
  1989                           
  1990                           ; 4 bytes @ 0x20
  1991     0140                     	ds	4
  1992     0144                     __ReadSensor$1710:
  1993                           
  1994                           ; 4 bytes @ 0x24
  1995     0144                     	ds	4
  1996     0148                     __ReadSensor$1711:
  1997                           
  1998                           ; 4 bytes @ 0x28
  1999     0148                     	ds	4
  2000     014C                     __ReadSensor@adcValue:
  2001                           
  2002                           ; 2 bytes @ 0x2C
  2003     014C                     	ds	2
  2004     014E                     __ReadSensor@logR:
  2005                           
  2006                           ; 4 bytes @ 0x2E
  2007     014E                     	ds	4
  2008                           
  2009                           	psect	cstackBANK1
  2010     00A0                     __pcstackBANK1:
  2011     00A0                     ___flmul@sign:
  2012                           
  2013                           ; 1 bytes @ 0x0
  2014     00A0                     	ds	1
  2015     00A1                     ___flmul@aexp:
  2016                           
  2017                           ; 1 bytes @ 0x1
  2018     00A1                     	ds	1
  2019     00A2                     ___flmul@bexp:
  2020                           
  2021                           ; 1 bytes @ 0x2
  2022     00A2                     	ds	1
  2023     00A3                     ___flmul@grs:
  2024                           
  2025                           ; 4 bytes @ 0x3
  2026     00A3                     	ds	4
  2027     00A7                     ___flmul@prod:
  2028                           
  2029                           ; 4 bytes @ 0x7
  2030     00A7                     	ds	4
  2031     00AB                     ___flmul@temp:
  2032                           
  2033                           ; 2 bytes @ 0xB
  2034     00AB                     	ds	2
  2035     00AD                     ?_my_log:
  2036     00AD                     my_log@x:	
  2037                           ; 4 bytes @ 0xD
  2038                           
  2039                           
  2040                           ; 4 bytes @ 0xD
  2041     00AD                     	ds	4
  2042     00B1                     _my_log$1712:
  2043                           
  2044                           ; 4 bytes @ 0x11
  2045     00B1                     	ds	4
  2046     00B5                     my_log@result:
  2047                           
  2048                           ; 4 bytes @ 0x15
  2049     00B5                     	ds	4
  2050     00B9                     my_log@sum:
  2051                           
  2052                           ; 4 bytes @ 0x19
  2053     00B9                     	ds	4
  2054     00BD                     my_log@n:
  2055                           
  2056                           ; 2 bytes @ 0x1D
  2057     00BD                     	ds	2
  2058     00BF                     my_log@term:
  2059                           
  2060                           ; 4 bytes @ 0x1F
  2061     00BF                     	ds	4
  2062                           
  2063                           	psect	cstackCOMMON
  2064     0070                     __pcstackCOMMON:
  2065     0070                     ?_OSCILLATOR_Initialize:
  2066     0070                     ?_WDT_Initialize:	
  2067                           ; 1 bytes @ 0x0
  2068                           
  2069     0070                     ?_ADC_Initialize:	
  2070                           ; 1 bytes @ 0x0
  2071                           
  2072     0070                     ?_TMR1_Initialize:	
  2073                           ; 1 bytes @ 0x0
  2074                           
  2075     0070                     ?_TMR0_Initialize:	
  2076                           ; 1 bytes @ 0x0
  2077                           
  2078     0070                     ?_EUSART_Initialize:	
  2079                           ; 1 bytes @ 0x0
  2080                           
  2081     0070                     ?_TMR0_DefaultInterruptHandler:	
  2082                           ; 1 bytes @ 0x0
  2083                           
  2084     0070                     ??_TMR0_DefaultInterruptHandler:	
  2085                           ; 1 bytes @ 0x0
  2086                           
  2087     0070                     ?_TMR0_CallBack:	
  2088                           ; 1 bytes @ 0x0
  2089                           
  2090     0070                     ?_TMR1_ISR:	
  2091                           ; 1 bytes @ 0x0
  2092                           
  2093     0070                     ?_TMR1_DefaultInterruptHandler:	
  2094                           ; 1 bytes @ 0x0
  2095                           
  2096     0070                     ??_TMR1_DefaultInterruptHandler:	
  2097                           ; 1 bytes @ 0x0
  2098                           
  2099     0070                     ?_TMR1_CallBack:	
  2100                           ; 1 bytes @ 0x0
  2101                           
  2102     0070                     ?__UIControlISR:	
  2103                           ; 1 bytes @ 0x0
  2104                           
  2105     0070                     ??__UIControlISR:	
  2106                           ; 1 bytes @ 0x0
  2107                           
  2108     0070                     ?__LogicControlISR:	
  2109                           ; 1 bytes @ 0x0
  2110                           
  2111     0070                     ??__LogicControlISR:	
  2112                           ; 1 bytes @ 0x0
  2113                           
  2114     0070                     ?__ReadSensor:	
  2115                           ; 1 bytes @ 0x0
  2116                           
  2117     0070                     ?__SendDataToConsole:	
  2118                           ; 1 bytes @ 0x0
  2119                           
  2120     0070                     ?__ControlHeat:	
  2121                           ; 1 bytes @ 0x0
  2122                           
  2123     0070                     ?_PIN_MANAGER_Initialize:	
  2124                           ; 1 bytes @ 0x0
  2125                           
  2126     0070                     ?_SYSTEM_Initialize:	
  2127                           ; 1 bytes @ 0x0
  2128                           
  2129     0070                     ?_TMR0_ISR:	
  2130                           ; 1 bytes @ 0x0
  2131                           
  2132     0070                     ?_INTERRUPT_InterruptManager:	
  2133                           ; 1 bytes @ 0x0
  2134                           
  2135     0070                     ?_TMR1_WriteTimer:	
  2136                           ; 1 bytes @ 0x0
  2137                           
  2138     0070                     ?_EUSART_Write:	
  2139                           ; 1 bytes @ 0x0
  2140                           
  2141     0070                     ?_main:	
  2142                           ; 1 bytes @ 0x0
  2143                           
  2144     0070                     TMR1_WriteTimer@timerVal:	
  2145                           ; 1 bytes @ 0x0
  2146                           
  2147                           
  2148                           ; 2 bytes @ 0x0
  2149     0070                     	ds	1
  2150     0071                     ??_TMR1_CallBack:
  2151     0071                     __UIControlISR@btnUpRead:	
  2152                           ; 1 bytes @ 0x1
  2153                           
  2154                           
  2155                           ; 1 bytes @ 0x1
  2156     0071                     	ds	1
  2157     0072                     ??_TMR1_ISR:
  2158     0072                     ??_TMR1_WriteTimer:	
  2159                           ; 1 bytes @ 0x2
  2160                           
  2161     0072                     __UIControlISR@btnDnRead:	
  2162                           ; 1 bytes @ 0x2
  2163                           
  2164                           
  2165                           ; 1 bytes @ 0x2
  2166     0072                     	ds	1
  2167     0073                     ??_OSCILLATOR_Initialize:
  2168     0073                     ??_WDT_Initialize:	
  2169                           ; 1 bytes @ 0x3
  2170                           
  2171     0073                     ??_ADC_Initialize:	
  2172                           ; 1 bytes @ 0x3
  2173                           
  2174     0073                     ?_TMR0_SetInterruptHandler:	
  2175                           ; 1 bytes @ 0x3
  2176                           
  2177     0073                     ??_TMR0_CallBack:	
  2178                           ; 1 bytes @ 0x3
  2179                           
  2180     0073                     ?_TMR1_SetInterruptHandler:	
  2181                           ; 1 bytes @ 0x3
  2182                           
  2183     0073                     ?_EUSART_SetFramingErrorHandler:	
  2184                           ; 1 bytes @ 0x3
  2185                           
  2186     0073                     ?_EUSART_SetOverrunErrorHandler:	
  2187                           ; 1 bytes @ 0x3
  2188                           
  2189     0073                     ?_EUSART_SetErrorHandler:	
  2190                           ; 1 bytes @ 0x3
  2191                           
  2192     0073                     ??__ControlHeat:	
  2193                           ; 1 bytes @ 0x3
  2194                           
  2195     0073                     ??_PIN_MANAGER_Initialize:	
  2196                           ; 1 bytes @ 0x3
  2197                           
  2198     0073                     ??_TMR0_ISR:	
  2199                           ; 1 bytes @ 0x3
  2200                           
  2201     0073                     ??_INTERRUPT_InterruptManager:	
  2202                           ; 1 bytes @ 0x3
  2203                           
  2204     0073                     ??_EUSART_Write:	
  2205                           ; 1 bytes @ 0x3
  2206                           
  2207     0073                     ??___flge:	
  2208                           ; 1 bytes @ 0x3
  2209                           
  2210     0073                     ?__Umul8_16:	
  2211                           ; 1 bytes @ 0x3
  2212                           
  2213     0073                     ?_ADC_GetConversion:	
  2214                           ; 2 bytes @ 0x3
  2215                           
  2216     0073                     ?___wmul:	
  2217                           ; 2 bytes @ 0x3
  2218                           
  2219     0073                     ?___flneg:	
  2220                           ; 2 bytes @ 0x3
  2221                           
  2222     0073                     ?___fltol:	
  2223                           ; 4 bytes @ 0x3
  2224                           
  2225     0073                     ?___xxtofl:	
  2226                           ; 4 bytes @ 0x3
  2227                           
  2228     0073                     EUSART_Write@txData:	
  2229                           ; 4 bytes @ 0x3
  2230                           
  2231     0073                     __Umul8_16@multiplicand:	
  2232                           ; 1 bytes @ 0x3
  2233                           
  2234     0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  2235                           ; 1 bytes @ 0x3
  2236                           
  2237     0073                     TMR1_SetInterruptHandler@InterruptHandler:	
  2238                           ; 2 bytes @ 0x3
  2239                           
  2240     0073                     EUSART_SetFramingErrorHandler@interruptHandler:	
  2241                           ; 2 bytes @ 0x3
  2242                           
  2243     0073                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  2244                           ; 2 bytes @ 0x3
  2245                           
  2246     0073                     EUSART_SetErrorHandler@interruptHandler:	
  2247                           ; 2 bytes @ 0x3
  2248                           
  2249     0073                     ___wmul@multiplier:	
  2250                           ; 2 bytes @ 0x3
  2251                           
  2252     0073                     ___flneg@f1:	
  2253                           ; 2 bytes @ 0x3
  2254                           
  2255     0073                     ___fltol@f1:	
  2256                           ; 4 bytes @ 0x3
  2257                           
  2258     0073                     ___xxtofl@val:	
  2259                           ; 4 bytes @ 0x3
  2260                           
  2261                           
  2262                           ; 4 bytes @ 0x3
  2263     0073                     	ds	2
  2264     0075                     ??_TMR1_Initialize:
  2265     0075                     ??_TMR0_Initialize:	
  2266                           ; 1 bytes @ 0x5
  2267                           
  2268     0075                     ??_EUSART_Initialize:	
  2269                           ; 1 bytes @ 0x5
  2270                           
  2271     0075                     ??_TMR0_SetInterruptHandler:	
  2272                           ; 1 bytes @ 0x5
  2273                           
  2274     0075                     ??_TMR1_SetInterruptHandler:	
  2275                           ; 1 bytes @ 0x5
  2276                           
  2277     0075                     ??_EUSART_SetFramingErrorHandler:	
  2278                           ; 1 bytes @ 0x5
  2279                           
  2280     0075                     ??_EUSART_SetOverrunErrorHandler:	
  2281                           ; 1 bytes @ 0x5
  2282                           
  2283     0075                     ??_EUSART_SetErrorHandler:	
  2284                           ; 1 bytes @ 0x5
  2285                           
  2286     0075                     ??__Umul8_16:	
  2287                           ; 1 bytes @ 0x5
  2288                           
  2289     0075                     ??_SYSTEM_Initialize:	
  2290                           ; 1 bytes @ 0x5
  2291                           
  2292     0075                     ??_ADC_GetConversion:	
  2293                           ; 1 bytes @ 0x5
  2294                           
  2295     0075                     ___wmul@multiplicand:	
  2296                           ; 1 bytes @ 0x5
  2297                           
  2298                           
  2299                           ; 2 bytes @ 0x5
  2300     0075                     	ds	1
  2301     0076                     ADC_GetConversion@channel:
  2302                           
  2303                           ; 1 bytes @ 0x6
  2304     0076                     	ds	1
  2305     0077                     ??__ReadSensor:
  2306     0077                     ??_my_log:	
  2307                           ; 1 bytes @ 0x7
  2308                           
  2309     0077                     ??___wmul:	
  2310                           ; 1 bytes @ 0x7
  2311                           
  2312     0077                     ??___awdiv:	
  2313                           ; 1 bytes @ 0x7
  2314                           
  2315     0077                     ??___flneg:	
  2316                           ; 1 bytes @ 0x7
  2317                           
  2318     0077                     ??___flsub:	
  2319                           ; 1 bytes @ 0x7
  2320                           
  2321                           
  2322                           ; 1 bytes @ 0x7
  2323     0077                     	ds	1
  2324     0078                     ??_main:
  2325                           
  2326                           	psect	cstackBANK0
  2327     0020                     __pcstackBANK0:	
  2328                           ; 1 bytes @ 0x8
  2329                           
  2330     0020                     ?___flge:
  2331     0020                     ??___fltol:	
  2332                           ; 1 bit 
  2333                           
  2334     0020                     ??___xxtofl:	
  2335                           ; 1 bytes @ 0x0
  2336                           
  2337     0020                     ___wmul@product:	
  2338                           ; 1 bytes @ 0x0
  2339                           
  2340     0020                     __Umul8_16@product:	
  2341                           ; 2 bytes @ 0x0
  2342                           
  2343     0020                     ___flge@ff1:	
  2344                           ; 2 bytes @ 0x0
  2345                           
  2346                           
  2347                           ; 4 bytes @ 0x0
  2348     0020                     	ds	2
  2349     0022                     ?___awdiv:
  2350     0022                     ___awdiv@divisor:	
  2351                           ; 2 bytes @ 0x2
  2352                           
  2353     0022                     __Umul8_16@word_mpld:	
  2354                           ; 2 bytes @ 0x2
  2355                           
  2356                           
  2357                           ; 2 bytes @ 0x2
  2358     0022                     	ds	2
  2359     0024                     ___fltol@sign1:
  2360     0024                     __Umul8_16@multiplier:	
  2361                           ; 1 bytes @ 0x4
  2362                           
  2363     0024                     ___xxtofl@sign:	
  2364                           ; 1 bytes @ 0x4
  2365                           
  2366     0024                     ___awdiv@dividend:	
  2367                           ; 1 bytes @ 0x4
  2368                           
  2369     0024                     ___flge@ff2:	
  2370                           ; 2 bytes @ 0x4
  2371                           
  2372                           
  2373                           ; 4 bytes @ 0x4
  2374     0024                     	ds	1
  2375     0025                     ___fltol@exp1:
  2376     0025                     ___xxtofl@exp:	
  2377                           ; 1 bytes @ 0x5
  2378                           
  2379                           
  2380                           ; 1 bytes @ 0x5
  2381     0025                     	ds	1
  2382     0026                     ___awdiv@counter:
  2383     0026                     ___xxtofl@arg:	
  2384                           ; 1 bytes @ 0x6
  2385                           
  2386                           
  2387                           ; 4 bytes @ 0x6
  2388     0026                     	ds	1
  2389     0027                     ___awdiv@sign:
  2390                           
  2391                           ; 1 bytes @ 0x7
  2392     0027                     	ds	1
  2393     0028                     ___awdiv@quotient:
  2394                           
  2395                           ; 2 bytes @ 0x8
  2396     0028                     	ds	2
  2397     002A                     ??__SendDataToConsole:
  2398     002A                     ?___fldiv:	
  2399                           ; 1 bytes @ 0xA
  2400                           
  2401     002A                     ___fldiv@a:	
  2402                           ; 4 bytes @ 0xA
  2403                           
  2404                           
  2405                           ; 4 bytes @ 0xA
  2406     002A                     	ds	4
  2407     002E                     __SendDataToConsole@ones:
  2408     002E                     ___fldiv@b:	
  2409                           ; 2 bytes @ 0xE
  2410                           
  2411                           
  2412                           ; 4 bytes @ 0xE
  2413     002E                     	ds	2
  2414     0030                     __SendDataToConsole@tens:
  2415                           
  2416                           ; 2 bytes @ 0x10
  2417     0030                     	ds	2
  2418     0032                     ??___fldiv:
  2419     0032                     __SendDataToConsole@huns:	
  2420                           ; 1 bytes @ 0x12
  2421                           
  2422                           
  2423                           ; 2 bytes @ 0x12
  2424     0032                     	ds	5
  2425     0037                     ___fldiv@rem:
  2426                           
  2427                           ; 4 bytes @ 0x17
  2428     0037                     	ds	4
  2429     003B                     ___fldiv@sign:
  2430                           
  2431                           ; 1 bytes @ 0x1B
  2432     003B                     	ds	1
  2433     003C                     ___fldiv@new_exp:
  2434                           
  2435                           ; 2 bytes @ 0x1C
  2436     003C                     	ds	2
  2437     003E                     ___fldiv@grs:
  2438                           
  2439                           ; 4 bytes @ 0x1E
  2440     003E                     	ds	4
  2441     0042                     ___fldiv@bexp:
  2442                           
  2443                           ; 1 bytes @ 0x22
  2444     0042                     	ds	1
  2445     0043                     ___fldiv@aexp:
  2446                           
  2447                           ; 1 bytes @ 0x23
  2448     0043                     	ds	1
  2449     0044                     ?___fladd:
  2450     0044                     ___fladd@b:	
  2451                           ; 4 bytes @ 0x24
  2452                           
  2453                           
  2454                           ; 4 bytes @ 0x24
  2455     0044                     	ds	4
  2456     0048                     ___fladd@a:
  2457                           
  2458                           ; 4 bytes @ 0x28
  2459     0048                     	ds	4
  2460     004C                     ??___fladd:
  2461                           
  2462                           ; 1 bytes @ 0x2C
  2463     004C                     	ds	8
  2464     0054                     ___fladd@signs:
  2465                           
  2466                           ; 1 bytes @ 0x34
  2467     0054                     	ds	1
  2468     0055                     ___fladd@aexp:
  2469                           
  2470                           ; 1 bytes @ 0x35
  2471     0055                     	ds	1
  2472     0056                     ___fladd@bexp:
  2473                           
  2474                           ; 1 bytes @ 0x36
  2475     0056                     	ds	1
  2476     0057                     ___fladd@grs:
  2477                           
  2478                           ; 1 bytes @ 0x37
  2479     0057                     	ds	1
  2480     0058                     ?___flsub:
  2481     0058                     ?___flmul:	
  2482                           ; 4 bytes @ 0x38
  2483                           
  2484     0058                     ___flsub@a:	
  2485                           ; 4 bytes @ 0x38
  2486                           
  2487     0058                     ___flmul@b:	
  2488                           ; 4 bytes @ 0x38
  2489                           
  2490                           
  2491                           ; 4 bytes @ 0x38
  2492     0058                     	ds	4
  2493     005C                     ___flsub@b:
  2494     005C                     ___flmul@a:	
  2495                           ; 4 bytes @ 0x3C
  2496                           
  2497                           
  2498                           ; 4 bytes @ 0x3C
  2499     005C                     	ds	4
  2500     0060                     ??___flmul:
  2501                           
  2502                           ; 1 bytes @ 0x40
  2503     0060                     	ds	5
  2504     0065                     main@savedRelay:
  2505                           
  2506                           ; 1 bytes @ 0x45
  2507     0065                     	ds	1
  2508                           
  2509                           	psect	maintext
  2510     0A18                     __pmaintext:	
  2511 ;;
  2512 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2513 ;;
  2514 ;; *************** function _main *****************
  2515 ;; Defined at:
  2516 ;;		line 52 in file "main.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;		None
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  savedRelay      1   69[BANK0 ] _Bool 
  2521 ;; Return value:  Size  Location     Type
  2522 ;;                  1    wreg      void 
  2523 ;; Registers used:
  2524 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2525 ;; Tracked objects:
  2526 ;;		On entry : B1F/0
  2527 ;;		On exit  : 1F/2
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2531 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2533 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2534 ;;Total ram usage:        1 bytes
  2535 ;; Hardware stack levels required when called: 8
  2536 ;; This function calls:
  2537 ;;		_SYSTEM_Initialize
  2538 ;;		_TMR0_SetInterruptHandler
  2539 ;;		_TMR1_SetInterruptHandler
  2540 ;;		__ControlHeat
  2541 ;;		__ReadSensor
  2542 ;;		__SendDataToConsole
  2543 ;; This function is called by:
  2544 ;;		Startup code after reset
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548     0A18                     _main:	
  2549                           ;psect for function _main
  2550                           
  2551                           
  2552                           ;main.c: 55:     SYSTEM_Initialize();
  2553                           
  2554                           ;incstack = 0
  2555                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2556     0A18  3188  20D5  318A   	fcall	_SYSTEM_Initialize
  2557                           
  2558                           ;main.c: 61:     (INTCONbits.GIE = 1);
  2559     0A1B  178B               	bsf	11,7	;volatile
  2560                           
  2561                           ;main.c: 64:     (INTCONbits.PEIE = 1);
  2562     0A1C  170B               	bsf	11,6	;volatile
  2563                           
  2564                           ;main.c: 72:     TMR0_SetInterruptHandler(_UIControlISR);
  2565     0A1D  3031               	movlw	low __UIControlISR
  2566     0A1E  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2567     0A1F  3007               	movlw	high __UIControlISR
  2568     0A20  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2569     0A21  3188  2060  318A   	fcall	_TMR0_SetInterruptHandler
  2570                           
  2571                           ;main.c: 73:     TMR1_SetInterruptHandler(_LogicControlISR);
  2572     0A24  3035               	movlw	low __LogicControlISR
  2573     0A25  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  2574     0A26  3009               	movlw	high __LogicControlISR
  2575     0A27  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  2576     0A28  3188  2066  318A   	fcall	_TMR1_SetInterruptHandler
  2577     0A2B                     l3823:
  2578                           
  2579                           ;main.c: 76:     {;main.c: 77:         _Bool savedRelay;;main.c: 80:         if (READ_FL
      +                          AG)
  2580     0A2B  0021               	movlb	1	; select bank1
  2581     0A2C  0847               	movf	_READ_FLAG^(0+128),w
  2582     0A2D  1903               	btfsc	3,2
  2583     0A2E  2A33               	goto	l3829
  2584                           
  2585                           ;main.c: 81:         {;main.c: 82:             READ_FLAG = 0;
  2586     0A2F  01C7               	clrf	_READ_FLAG^(0+128)
  2587                           
  2588                           ;main.c: 83:             _ReadSensor();
  2589     0A30  3182  22CC  318A   	fcall	__ReadSensor
  2590     0A33                     l3829:
  2591                           
  2592                           ;main.c: 86:         if (UART_FLAG)
  2593     0A33  0022               	movlb	2	; select bank2
  2594     0A34  085D               	movf	_UART_FLAG^(0+256),w
  2595     0A35  1903               	btfsc	3,2
  2596     0A36  2A3B               	goto	l3835
  2597                           
  2598                           ;main.c: 89:             if (1)
  2599     0A37  01DD               	clrf	_UART_FLAG^(0+256)
  2600                           
  2601                           ;main.c: 90:                 _SendDataToConsole();
  2602     0A38  318C  243D  318A   	fcall	__SendDataToConsole
  2603     0A3B                     l3835:
  2604                           
  2605                           ;main.c: 93:         if (LOGIC_FLAG)
  2606     0A3B  0022               	movlb	2	; select bank2
  2607     0A3C  085C               	movf	_LOGIC_FLAG^(0+256),w
  2608     0A3D  1903               	btfsc	3,2
  2609     0A3E  2A2B               	goto	l3823
  2610                           
  2611                           ;main.c: 94:         {;main.c: 95:             LOGIC_FLAG = 0;
  2612     0A3F  01DC               	clrf	_LOGIC_FLAG^(0+256)
  2613                           
  2614                           ;main.c: 97:             savedRelay = RELAY_STATUS;
  2615     0A40  0020               	movlb	0	; select bank0
  2616     0A41  0866               	movf	_RELAY_STATUS,w
  2617     0A42  00E5               	movwf	main@savedRelay
  2618                           
  2619                           ;main.c: 100:             HEAT_CALL_TICKS++;
  2620     0A43  3001               	movlw	1
  2621     0A44  0021               	movlb	1	; select bank1
  2622     0A45  07C3               	addwf	_HEAT_CALL_TICKS^(0+128),f
  2623     0A46  3000               	movlw	0
  2624     0A47  3DC4               	addwfc	(_HEAT_CALL_TICKS+1)^(0+128),f
  2625                           
  2626                           ;main.c: 101:             if (RELAY_STATUS)
  2627     0A48  0020               	movlb	0	; select bank0
  2628     0A49  0866               	movf	_RELAY_STATUS,w
  2629     0A4A  3000               	movlw	0
  2630     0A4B  0021               	movlb	1	; select bank1
  2631     0A4C  0244               	subwf	(_HEAT_CALL_TICKS+1)^(0+128),w
  2632     0A4D  30B5               	movlw	181
  2633     0A4E  1903               	skipnz
  2634     0A4F  0243               	subwf	_HEAT_CALL_TICKS^(0+128),w
  2635     0A50  1C03               	skipc
  2636     0A51  2A56               	goto	l3853
  2637     0A52  30B4               	movlw	180
  2638     0A53  00C3               	movwf	_HEAT_CALL_TICKS^(0+128)
  2639     0A54  3000               	movlw	0
  2640     0A55  00C4               	movwf	(_HEAT_CALL_TICKS^(0+128)+1)
  2641     0A56                     l3853:
  2642                           
  2643                           ;main.c: 115:             _ControlHeat();
  2644     0A56  318A  226B  318A   	fcall	__ControlHeat
  2645                           
  2646                           ;main.c: 117:             if (savedRelay != RELAY_STATUS)
  2647     0A59  0020               	movlb	0	; select bank0
  2648     0A5A  0865               	movf	main@savedRelay,w
  2649     0A5B  0666               	xorwf	_RELAY_STATUS,w
  2650     0A5C  1903               	skipnz
  2651     0A5D  2A61               	goto	l3859
  2652                           
  2653                           ;main.c: 118:             {;main.c: 120:                 HEAT_CALL_TICKS = 0;
  2654     0A5E  0021               	movlb	1	; select bank1
  2655     0A5F  01C3               	clrf	_HEAT_CALL_TICKS^(0+128)
  2656     0A60  01C4               	clrf	(_HEAT_CALL_TICKS+1)^(0+128)
  2657     0A61                     l3859:
  2658                           
  2659                           ;main.c: 123:             if (RELAY_STATUS)
  2660     0A61  0020               	movlb	0	; select bank0
  2661     0A62  0866               	movf	_RELAY_STATUS,w
  2662     0A63  1903               	btfsc	3,2
  2663     0A64  2A68               	goto	l464
  2664                           
  2665                           ;main.c: 124:                 do { LATAbits.LATA2 = 1; } while(0);
  2666     0A65  0022               	movlb	2	; select bank2
  2667     0A66  150C               	bsf	12,2	;volatile
  2668     0A67  2A2B               	goto	l3823
  2669     0A68                     l464:	
  2670                           ;main.c: 126:                 do { LATAbits.LATA2 = 0; } while(0);
  2671                           
  2672     0A68  0022               	movlb	2	; select bank2
  2673     0A69  110C               	bcf	12,2	;volatile
  2674     0A6A  2A2B               	goto	l3823
  2675     0A6B                     __end_of_main:
  2676                           
  2677                           	psect	text1
  2678     0C3D                     __ptext1:	
  2679 ;; *************** function __SendDataToConsole *****************
  2680 ;; Defined at:
  2681 ;;		line 336 in file "main.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;		None
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;  huns            2   18[BANK0 ] int 
  2686 ;;  tens            2   16[BANK0 ] int 
  2687 ;;  ones            2   14[BANK0 ] int 
  2688 ;; Return value:  Size  Location     Type
  2689 ;;                  1    wreg      void 
  2690 ;; Registers used:
  2691 ;;		wreg, status,2, status,0, pclath, cstack
  2692 ;; Tracked objects:
  2693 ;;		On entry : 1F/2
  2694 ;;		On exit  : 1F/3
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2698 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2699 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2700 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2701 ;;Total ram usage:       10 bytes
  2702 ;; Hardware stack levels used: 1
  2703 ;; Hardware stack levels required when called: 5
  2704 ;; This function calls:
  2705 ;;		_EUSART_Write
  2706 ;;		___awdiv
  2707 ;;		___wmul
  2708 ;; This function is called by:
  2709 ;;		_main
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713     0C3D                     __SendDataToConsole:	
  2714                           ;psect for function __SendDataToConsole
  2715                           
  2716                           
  2717                           ;main.c: 340:     int huns, tens, ones;;main.c: 342:     huns = TEMP / 100;
  2718                           
  2719                           ;incstack = 0
  2720                           ; Regs used in __SendDataToConsole: [wreg+status,2+status,0+pclath+cstack]
  2721     0C3D  3064               	movlw	100
  2722     0C3E  0020               	movlb	0	; select bank0
  2723     0C3F  00A2               	movwf	___awdiv@divisor
  2724     0C40  3000               	movlw	0
  2725     0C41  00A3               	movwf	___awdiv@divisor+1
  2726     0C42  0021               	movlb	1	; select bank1
  2727     0C43  0846               	movf	(_TEMP+1)^(0+128),w
  2728     0C44  0020               	movlb	0	; select bank0
  2729     0C45  00A5               	movwf	___awdiv@dividend+1
  2730     0C46  0021               	movlb	1	; select bank1
  2731     0C47  0845               	movf	_TEMP^(0+128),w
  2732     0C48  0020               	movlb	0	; select bank0
  2733     0C49  00A4               	movwf	___awdiv@dividend
  2734     0C4A  3189  21C7  318C   	fcall	___awdiv
  2735     0C4D  0823               	movf	?___awdiv+1,w
  2736     0C4E  00B3               	movwf	__SendDataToConsole@huns+1
  2737     0C4F  0822               	movf	?___awdiv,w
  2738     0C50  00B2               	movwf	__SendDataToConsole@huns
  2739                           
  2740                           ;main.c: 343:     tens = (TEMP - huns * 100) / 10;
  2741     0C51  300A               	movlw	10
  2742     0C52  00A2               	movwf	___awdiv@divisor
  2743     0C53  3000               	movlw	0
  2744     0C54  00A3               	movwf	___awdiv@divisor+1
  2745     0C55  0833               	movf	__SendDataToConsole@huns+1,w
  2746     0C56  00F4               	movwf	___wmul@multiplier+1
  2747     0C57  0832               	movf	__SendDataToConsole@huns,w
  2748     0C58  00F3               	movwf	___wmul@multiplier
  2749     0C59  309C               	movlw	156
  2750     0C5A  00F5               	movwf	___wmul@multiplicand
  2751     0C5B  30FF               	movlw	255
  2752     0C5C  00F6               	movwf	___wmul@multiplicand+1
  2753     0C5D  3189  2150  318C   	fcall	___wmul
  2754     0C60  0021               	movlb	1	; select bank1
  2755     0C61  0845               	movf	_TEMP^(0+128),w
  2756     0C62  0773               	addwf	?___wmul,w
  2757     0C63  0020               	movlb	0	; select bank0
  2758     0C64  00A4               	movwf	___awdiv@dividend
  2759     0C65  0021               	movlb	1	; select bank1
  2760     0C66  0846               	movf	(_TEMP+1)^(0+128),w
  2761     0C67  3D74               	addwfc	?___wmul+1,w
  2762     0C68  0020               	movlb	0	; select bank0
  2763     0C69  00A5               	movwf	___awdiv@dividend+1
  2764     0C6A  3189  21C7  318C   	fcall	___awdiv
  2765     0C6D  0823               	movf	?___awdiv+1,w
  2766     0C6E  00B1               	movwf	__SendDataToConsole@tens+1
  2767     0C6F  0822               	movf	?___awdiv,w
  2768     0C70  00B0               	movwf	__SendDataToConsole@tens
  2769                           
  2770                           ;main.c: 344:     ones = (TEMP - huns * 100 - tens * 10);
  2771     0C71  0833               	movf	__SendDataToConsole@huns+1,w
  2772     0C72  00F4               	movwf	___wmul@multiplier+1
  2773     0C73  0832               	movf	__SendDataToConsole@huns,w
  2774     0C74  00F3               	movwf	___wmul@multiplier
  2775     0C75  309C               	movlw	156
  2776     0C76  00F5               	movwf	___wmul@multiplicand
  2777     0C77  30FF               	movlw	255
  2778     0C78  00F6               	movwf	___wmul@multiplicand+1
  2779     0C79  3189  2150  318C   	fcall	___wmul
  2780     0C7C  0873               	movf	?___wmul,w
  2781     0C7D  00AA               	movwf	??__SendDataToConsole
  2782     0C7E  0874               	movf	?___wmul+1,w
  2783     0C7F  00AB               	movwf	??__SendDataToConsole+1
  2784     0C80  0831               	movf	__SendDataToConsole@tens+1,w
  2785     0C81  00F4               	movwf	___wmul@multiplier+1
  2786     0C82  0830               	movf	__SendDataToConsole@tens,w
  2787     0C83  00F3               	movwf	___wmul@multiplier
  2788     0C84  30F6               	movlw	246
  2789     0C85  00F5               	movwf	___wmul@multiplicand
  2790     0C86  30FF               	movlw	255
  2791     0C87  00F6               	movwf	___wmul@multiplicand+1
  2792     0C88  3189  2150  318C   	fcall	___wmul
  2793     0C8B  0873               	movf	?___wmul,w
  2794     0C8C  072A               	addwf	??__SendDataToConsole,w
  2795     0C8D  00AC               	movwf	??__SendDataToConsole+2
  2796     0C8E  0874               	movf	?___wmul+1,w
  2797     0C8F  3D2B               	addwfc	??__SendDataToConsole+1,w
  2798     0C90  00AD               	movwf	??__SendDataToConsole+3
  2799     0C91  0021               	movlb	1	; select bank1
  2800     0C92  0845               	movf	_TEMP^(0+128),w
  2801     0C93  0020               	movlb	0	; select bank0
  2802     0C94  072C               	addwf	??__SendDataToConsole+2,w
  2803     0C95  00AE               	movwf	__SendDataToConsole@ones
  2804     0C96  0021               	movlb	1	; select bank1
  2805     0C97  0846               	movf	(_TEMP+1)^(0+128),w
  2806     0C98  0020               	movlb	0	; select bank0
  2807     0C99  3D2D               	addwfc	??__SendDataToConsole+3,w
  2808     0C9A  00AF               	movwf	__SendDataToConsole@ones+1
  2809                           
  2810                           ;main.c: 347:     EUSART_Write('T');
  2811     0C9B  3054               	movlw	84
  2812     0C9C  3188  2080  318C   	fcall	_EUSART_Write
  2813                           
  2814                           ;main.c: 348:     EUSART_Write(':');
  2815     0C9F  303A               	movlw	58
  2816     0CA0  3188  2080  318C   	fcall	_EUSART_Write
  2817                           
  2818                           ;main.c: 349:     EUSART_Write(huns + 48);
  2819     0CA3  0020               	movlb	0	; select bank0
  2820     0CA4  0832               	movf	__SendDataToConsole@huns,w
  2821     0CA5  3E30               	addlw	48
  2822     0CA6  3188  2080  318C   	fcall	_EUSART_Write
  2823                           
  2824                           ;main.c: 350:     EUSART_Write(tens + 48);
  2825     0CA9  0020               	movlb	0	; select bank0
  2826     0CAA  0830               	movf	__SendDataToConsole@tens,w
  2827     0CAB  3E30               	addlw	48
  2828     0CAC  3188  2080  318C   	fcall	_EUSART_Write
  2829                           
  2830                           ;main.c: 351:     EUSART_Write(ones + 48);
  2831     0CAF  0020               	movlb	0	; select bank0
  2832     0CB0  082E               	movf	__SendDataToConsole@ones,w
  2833     0CB1  3E30               	addlw	48
  2834     0CB2  3188  2080  318C   	fcall	_EUSART_Write
  2835                           
  2836                           ;main.c: 352:     EUSART_Write('\t');
  2837     0CB5  3009               	movlw	9
  2838     0CB6  3188  2080  318C   	fcall	_EUSART_Write
  2839                           
  2840                           ;main.c: 353:     EUSART_Write('M');
  2841     0CB9  304D               	movlw	77
  2842     0CBA  3188  2080  318C   	fcall	_EUSART_Write
  2843                           
  2844                           ;main.c: 354:     EUSART_Write(':');
  2845     0CBD  303A               	movlw	58
  2846     0CBE  3188  2080  318C   	fcall	_EUSART_Write
  2847                           
  2848                           ;main.c: 355:     EUSART_Write(CURRENT_MODE + 48);
  2849     0CC1  0878               	movf	_CURRENT_MODE,w
  2850     0CC2  3E30               	addlw	48
  2851     0CC3  3188  2080  318C   	fcall	_EUSART_Write
  2852                           
  2853                           ;main.c: 356:     EUSART_Write('\t');
  2854     0CC6  3009               	movlw	9
  2855     0CC7  3188  2080  318C   	fcall	_EUSART_Write
  2856                           
  2857                           ;main.c: 357:     EUSART_Write('H');
  2858     0CCA  3048               	movlw	72
  2859     0CCB  3188  2080  318C   	fcall	_EUSART_Write
  2860                           
  2861                           ;main.c: 358:     EUSART_Write(':');
  2862     0CCE  303A               	movlw	58
  2863     0CCF  3188  2080  318C   	fcall	_EUSART_Write
  2864                           
  2865                           ;main.c: 359:     EUSART_Write(RELAY_STATUS + 48);
  2866     0CD2  0020               	movlb	0	; select bank0
  2867     0CD3  0866               	movf	_RELAY_STATUS,w
  2868     0CD4  3E30               	addlw	48
  2869     0CD5  3188  2080  318C   	fcall	_EUSART_Write
  2870                           
  2871                           ;main.c: 360:     EUSART_Write('\r');
  2872     0CD8  300D               	movlw	13
  2873     0CD9  3188  2080  318C   	fcall	_EUSART_Write
  2874                           
  2875                           ;main.c: 361:     EUSART_Write('\n');
  2876     0CDC  300A               	movlw	10
  2877     0CDD  3188  2080         	fcall	_EUSART_Write
  2878     0CDF  0008               	return
  2879     0CE0                     __end_of__SendDataToConsole:
  2880                           
  2881                           	psect	text2
  2882     0950                     __ptext2:	
  2883 ;; *************** function ___wmul *****************
  2884 ;; Defined at:
  2885 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\Umul16.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;  multiplier      2    3[COMMON] unsigned int 
  2888 ;;  multiplicand    2    5[COMMON] unsigned int 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  product         2    0[BANK0 ] unsigned int 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  2    3[COMMON] unsigned int 
  2893 ;; Registers used:
  2894 ;;		wreg, status,2, status,0
  2895 ;; Tracked objects:
  2896 ;;		On entry : 1F/0
  2897 ;;		On exit  : 1F/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2900 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2901 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2903 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2904 ;;Total ram usage:        6 bytes
  2905 ;; Hardware stack levels used: 1
  2906 ;; Hardware stack levels required when called: 4
  2907 ;; This function calls:
  2908 ;;		Nothing
  2909 ;; This function is called by:
  2910 ;;		__SendDataToConsole
  2911 ;; This function uses a non-reentrant model
  2912 ;;
  2913                           
  2914     0950                     ___wmul:	
  2915                           ;psect for function ___wmul
  2916                           
  2917                           
  2918                           ;incstack = 0
  2919                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2920     0950  01A0               	clrf	___wmul@product
  2921     0951  01A1               	clrf	___wmul@product+1
  2922     0952                     l3761:
  2923     0952  1C73               	btfss	___wmul@multiplier,0
  2924     0953  2958               	goto	l713
  2925     0954  0875               	movf	___wmul@multiplicand,w
  2926     0955  07A0               	addwf	___wmul@product,f
  2927     0956  0876               	movf	___wmul@multiplicand+1,w
  2928     0957  3DA1               	addwfc	___wmul@product+1,f
  2929     0958                     l713:
  2930     0958  3001               	movlw	1
  2931     0959                     u4995:
  2932     0959  35F5               	lslf	___wmul@multiplicand,f
  2933     095A  0DF6               	rlf	___wmul@multiplicand+1,f
  2934     095B  0B89               	decfsz	9,f
  2935     095C  2959               	goto	u4995
  2936     095D  3001               	movlw	1
  2937     095E                     u5005:
  2938     095E  36F4               	lsrf	___wmul@multiplier+1,f
  2939     095F  0CF3               	rrf	___wmul@multiplier,f
  2940     0960  0B89               	decfsz	9,f
  2941     0961  295E               	goto	u5005
  2942     0962  0873               	movf	___wmul@multiplier,w
  2943     0963  0474               	iorwf	___wmul@multiplier+1,w
  2944     0964  1D03               	btfss	3,2
  2945     0965  2952               	goto	l3761
  2946     0966  0821               	movf	___wmul@product+1,w
  2947     0967  00F4               	movwf	?___wmul+1
  2948     0968  0820               	movf	___wmul@product,w
  2949     0969  00F3               	movwf	?___wmul
  2950     096A  0008               	return
  2951     096B                     __end_of___wmul:
  2952                           
  2953                           	psect	text3
  2954     09C7                     __ptext3:	
  2955 ;; *************** function ___awdiv *****************
  2956 ;; Defined at:
  2957 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\awdiv.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;  divisor         2    2[BANK0 ] int 
  2960 ;;  dividend        2    4[BANK0 ] int 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  quotient        2    8[BANK0 ] int 
  2963 ;;  sign            1    7[BANK0 ] unsigned char 
  2964 ;;  counter         1    6[BANK0 ] unsigned char 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  2    2[BANK0 ] int 
  2967 ;; Registers used:
  2968 ;;		wreg, status,2, status,0
  2969 ;; Tracked objects:
  2970 ;;		On entry : 1F/0
  2971 ;;		On exit  : 1F/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2974 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2975 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2976 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2977 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2978 ;;Total ram usage:        9 bytes
  2979 ;; Hardware stack levels used: 1
  2980 ;; Hardware stack levels required when called: 4
  2981 ;; This function calls:
  2982 ;;		Nothing
  2983 ;; This function is called by:
  2984 ;;		__SendDataToConsole
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988     09C7                     ___awdiv:	
  2989                           ;psect for function ___awdiv
  2990                           
  2991                           
  2992                           ;incstack = 0
  2993                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2994     09C7  01A7               	clrf	___awdiv@sign
  2995     09C8  1FA3               	btfss	___awdiv@divisor+1,7
  2996     09C9  29D1               	goto	l2957
  2997     09CA  09A2               	comf	___awdiv@divisor,f
  2998     09CB  09A3               	comf	___awdiv@divisor+1,f
  2999     09CC  0AA2               	incf	___awdiv@divisor,f
  3000     09CD  1903               	skipnz
  3001     09CE  0AA3               	incf	___awdiv@divisor+1,f
  3002     09CF  01A7               	clrf	___awdiv@sign
  3003     09D0  0AA7               	incf	___awdiv@sign,f
  3004     09D1                     l2957:
  3005     09D1  1FA5               	btfss	___awdiv@dividend+1,7
  3006     09D2  29DC               	goto	l2963
  3007     09D3  09A4               	comf	___awdiv@dividend,f
  3008     09D4  09A5               	comf	___awdiv@dividend+1,f
  3009     09D5  0AA4               	incf	___awdiv@dividend,f
  3010     09D6  1903               	skipnz
  3011     09D7  0AA5               	incf	___awdiv@dividend+1,f
  3012     09D8  3001               	movlw	1
  3013     09D9  00F7               	movwf	??___awdiv
  3014     09DA  0877               	movf	??___awdiv,w
  3015     09DB  06A7               	xorwf	___awdiv@sign,f
  3016     09DC                     l2963:
  3017     09DC  01A8               	clrf	___awdiv@quotient
  3018     09DD  01A9               	clrf	___awdiv@quotient+1
  3019     09DE  0822               	movf	___awdiv@divisor,w
  3020     09DF  0423               	iorwf	___awdiv@divisor+1,w
  3021     09E0  1903               	btfsc	3,2
  3022     09E1  2A0B               	goto	l2985
  3023     09E2  01A6               	clrf	___awdiv@counter
  3024     09E3  0AA6               	incf	___awdiv@counter,f
  3025     09E4                     l2973:
  3026     09E4  1BA3               	btfsc	___awdiv@divisor+1,7
  3027     09E5  29F0               	goto	l2975
  3028     09E6  3001               	movlw	1
  3029     09E7                     u3375:
  3030     09E7  35A2               	lslf	___awdiv@divisor,f
  3031     09E8  0DA3               	rlf	___awdiv@divisor+1,f
  3032     09E9  0B89               	decfsz	9,f
  3033     09EA  29E7               	goto	u3375
  3034     09EB  3001               	movlw	1
  3035     09EC  00F7               	movwf	??___awdiv
  3036     09ED  0877               	movf	??___awdiv,w
  3037     09EE  07A6               	addwf	___awdiv@counter,f
  3038     09EF  29E4               	goto	l2973
  3039     09F0                     l2975:
  3040     09F0  3001               	movlw	1
  3041     09F1                     u3395:
  3042     09F1  35A8               	lslf	___awdiv@quotient,f
  3043     09F2  0DA9               	rlf	___awdiv@quotient+1,f
  3044     09F3  0B89               	decfsz	9,f
  3045     09F4  29F1               	goto	u3395
  3046     09F5  0823               	movf	___awdiv@divisor+1,w
  3047     09F6  0225               	subwf	___awdiv@dividend+1,w
  3048     09F7  1D03               	skipz
  3049     09F8  29FB               	goto	u3405
  3050     09F9  0822               	movf	___awdiv@divisor,w
  3051     09FA  0224               	subwf	___awdiv@dividend,w
  3052     09FB                     u3405:
  3053     09FB  1C03               	skipc
  3054     09FC  2A02               	goto	l2981
  3055     09FD  0822               	movf	___awdiv@divisor,w
  3056     09FE  02A4               	subwf	___awdiv@dividend,f
  3057     09FF  0823               	movf	___awdiv@divisor+1,w
  3058     0A00  3BA5               	subwfb	___awdiv@dividend+1,f
  3059     0A01  1428               	bsf	___awdiv@quotient,0
  3060     0A02                     l2981:
  3061     0A02  3001               	movlw	1
  3062     0A03                     u3415:
  3063     0A03  36A3               	lsrf	___awdiv@divisor+1,f
  3064     0A04  0CA2               	rrf	___awdiv@divisor,f
  3065     0A05  0B89               	decfsz	9,f
  3066     0A06  2A03               	goto	u3415
  3067     0A07  3001               	movlw	1
  3068     0A08  02A6               	subwf	___awdiv@counter,f
  3069     0A09  1D03               	btfss	3,2
  3070     0A0A  29F0               	goto	l2975
  3071     0A0B                     l2985:
  3072     0A0B  0827               	movf	___awdiv@sign,w
  3073     0A0C  1903               	btfsc	3,2
  3074     0A0D  2A13               	goto	l2989
  3075     0A0E  09A8               	comf	___awdiv@quotient,f
  3076     0A0F  09A9               	comf	___awdiv@quotient+1,f
  3077     0A10  0AA8               	incf	___awdiv@quotient,f
  3078     0A11  1903               	skipnz
  3079     0A12  0AA9               	incf	___awdiv@quotient+1,f
  3080     0A13                     l2989:
  3081     0A13  0829               	movf	___awdiv@quotient+1,w
  3082     0A14  00A3               	movwf	?___awdiv+1
  3083     0A15  0828               	movf	___awdiv@quotient,w
  3084     0A16  00A2               	movwf	?___awdiv
  3085     0A17  0008               	return
  3086     0A18                     __end_of___awdiv:
  3087                           
  3088                           	psect	text4
  3089     0880                     __ptext4:	
  3090 ;; *************** function _EUSART_Write *****************
  3091 ;; Defined at:
  3092 ;;		line 132 in file "mcc_generated_files/eusart.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;  txData          1    wreg     unsigned char 
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;  txData          1    3[COMMON] unsigned char 
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  1    wreg      void 
  3099 ;; Registers used:
  3100 ;;		wreg
  3101 ;; Tracked objects:
  3102 ;;		On entry : 1C/0
  3103 ;;		On exit  : 1F/3
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3107 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3109 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3110 ;;Total ram usage:        1 bytes
  3111 ;; Hardware stack levels used: 1
  3112 ;; Hardware stack levels required when called: 4
  3113 ;; This function calls:
  3114 ;;		Nothing
  3115 ;; This function is called by:
  3116 ;;		__SendDataToConsole
  3117 ;; This function uses a non-reentrant model
  3118 ;;
  3119                           
  3120     0880                     _EUSART_Write:	
  3121                           ;psect for function _EUSART_Write
  3122                           
  3123                           
  3124                           ;incstack = 0
  3125                           ; Regs used in _EUSART_Write: [wreg]
  3126                           ;EUSART_Write@txData stored from wreg
  3127     0880  00F3               	movwf	EUSART_Write@txData
  3128     0881                     l294:	
  3129                           ;mcc_generated_files/eusart.c: 135:     {;mcc_generated_files/eusart.c: 136:     }
  3130                           
  3131                           
  3132                           ;mcc_generated_files/eusart.c: 134:     while(0 == PIR1bits.TXIF)
  3133     0881  0020               	movlb	0	; select bank0
  3134     0882  1E11               	btfss	17,4	;volatile
  3135     0883  2881               	goto	l294
  3136                           
  3137                           ;mcc_generated_files/eusart.c: 138:     TXREG = txData;
  3138     0884  0873               	movf	EUSART_Write@txData,w
  3139     0885  0023               	movlb	3	; select bank3
  3140     0886  009A               	movwf	26	;volatile
  3141     0887  0008               	return
  3142     0888                     __end_of_EUSART_Write:
  3143                           
  3144                           	psect	text5
  3145     02CC                     __ptext5:	
  3146 ;; *************** function __ReadSensor *****************
  3147 ;; Defined at:
  3148 ;;		line 279 in file "main.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;		None
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;  logR            4   46[BANK2 ] float 
  3153 ;;  Tf              4   28[BANK2 ] float 
  3154 ;;  Tc              4   24[BANK2 ] float 
  3155 ;;  T               4   20[BANK2 ] float 
  3156 ;;  invT            4   16[BANK2 ] float 
  3157 ;;  Rntc            4   12[BANK2 ] float 
  3158 ;;  Vcc             4    8[BANK2 ] float 
  3159 ;;  Rpullup         4    4[BANK2 ] float 
  3160 ;;  Vout            4    0[BANK2 ] float 
  3161 ;;  adcValue        2   44[BANK2 ] unsigned short 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  1    wreg      void 
  3164 ;; Registers used:
  3165 ;;		wreg, status,2, status,0, pclath, cstack
  3166 ;; Tracked objects:
  3167 ;;		On entry : 1F/1
  3168 ;;		On exit  : 1F/1
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3172 ;;      Locals:         0       0       0      50       0       0       0       0       0       0       0       0       
      +0       0
  3173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3174 ;;      Totals:         0       0       0      50       0       0       0       0       0       0       0       0       
      +0       0
  3175 ;;Total ram usage:       50 bytes
  3176 ;; Hardware stack levels used: 1
  3177 ;; Hardware stack levels required when called: 7
  3178 ;; This function calls:
  3179 ;;		_ADC_GetConversion
  3180 ;;		___fladd
  3181 ;;		___fldiv
  3182 ;;		___flmul
  3183 ;;		___fltol
  3184 ;;		___xxtofl
  3185 ;;		_my_log
  3186 ;; This function is called by:
  3187 ;;		_main
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191     02CC                     __ReadSensor:	
  3192                           ;psect for function __ReadSensor
  3193                           
  3194                           
  3195                           ;main.c: 282:     uint16_t adcValue = ADC_GetConversion(NTC);
  3196                           
  3197                           ;incstack = 0
  3198                           ; Regs used in __ReadSensor: [wreg+status,2+status,0+pclath+cstack]
  3199     02CC  3006               	movlw	6
  3200     02CD  3187  27E7  3182   	fcall	_ADC_GetConversion
  3201     02D0  0874               	movf	?_ADC_GetConversion+1,w
  3202     02D1  0022               	movlb	2	; select bank2
  3203     02D2  00CD               	movwf	(__ReadSensor@adcValue+1)^(0+256)
  3204     02D3  0873               	movf	?_ADC_GetConversion,w
  3205     02D4  00CC               	movwf	__ReadSensor@adcValue^(0+256)
  3206                           
  3207                           ;main.c: 283:     float Vout = adcValue * (5.0f / 1023.0f);
  3208     02D5  303B               	movlw	59
  3209     02D6  0020               	movlb	0	; select bank0
  3210     02D7  00DB               	movwf	___flmul@b+3
  3211     02D8  30A0               	movlw	160
  3212     02D9  00DA               	movwf	___flmul@b+2
  3213     02DA  3028               	movlw	40
  3214     02DB  00D9               	movwf	___flmul@b+1
  3215     02DC  300A               	movlw	10
  3216     02DD  00D8               	movwf	___flmul@b
  3217     02DE  0022               	movlb	2	; select bank2
  3218     02DF  084C               	movf	__ReadSensor@adcValue^(0+256),w
  3219     02E0  00F3               	movwf	___xxtofl@val
  3220     02E1  084D               	movf	(__ReadSensor@adcValue+1)^(0+256),w
  3221     02E2  00F4               	movwf	___xxtofl@val+1
  3222     02E3  01F5               	clrf	___xxtofl@val+2
  3223     02E4  01F6               	clrf	___xxtofl@val+3
  3224     02E5  3000               	movlw	0
  3225     02E6  318B  23A9  3182   	fcall	___xxtofl
  3226     02E9  0876               	movf	?___xxtofl+3,w
  3227     02EA  00DF               	movwf	___flmul@a+3
  3228     02EB  0875               	movf	?___xxtofl+2,w
  3229     02EC  00DE               	movwf	___flmul@a+2
  3230     02ED  0874               	movf	?___xxtofl+1,w
  3231     02EE  00DD               	movwf	___flmul@a+1
  3232     02EF  0873               	movf	?___xxtofl,w
  3233     02F0  00DC               	movwf	___flmul@a
  3234     02F1  3180  203E  3182   	fcall	___flmul
  3235     02F4  085B               	movf	?___flmul+3,w
  3236     02F5  0022               	movlb	2	; select bank2
  3237     02F6  00A3               	movwf	(__ReadSensor@Vout+3)^(0+256)
  3238     02F7  0020               	movlb	0	; select bank0
  3239     02F8  085A               	movf	?___flmul+2,w
  3240     02F9  0022               	movlb	2	; select bank2
  3241     02FA  00A2               	movwf	(__ReadSensor@Vout+2)^(0+256)
  3242     02FB  0020               	movlb	0	; select bank0
  3243     02FC  0859               	movf	?___flmul+1,w
  3244     02FD  0022               	movlb	2	; select bank2
  3245     02FE  00A1               	movwf	(__ReadSensor@Vout+1)^(0+256)
  3246     02FF  0020               	movlb	0	; select bank0
  3247     0300  0858               	movf	?___flmul,w
  3248     0301  0022               	movlb	2	; select bank2
  3249     0302  00A0               	movwf	__ReadSensor@Vout^(0+256)
  3250                           
  3251                           ;main.c: 286:     float Rpullup = 10000.0;
  3252     0303  3046               	movlw	70
  3253     0304  00A7               	movwf	(__ReadSensor@Rpullup+3)^(0+256)
  3254     0305  301C               	movlw	28
  3255     0306  00A6               	movwf	(__ReadSensor@Rpullup+2)^(0+256)
  3256     0307  3040               	movlw	64
  3257     0308  00A5               	movwf	(__ReadSensor@Rpullup+1)^(0+256)
  3258     0309  3000               	movlw	0
  3259     030A  00A4               	movwf	__ReadSensor@Rpullup^(0+256)
  3260                           
  3261                           ;main.c: 287:     float Vcc = 5.0;
  3262     030B  3040               	movlw	64
  3263     030C  00AB               	movwf	(__ReadSensor@Vcc+3)^(0+256)
  3264     030D  30A0               	movlw	160
  3265     030E  00AA               	movwf	(__ReadSensor@Vcc+2)^(0+256)
  3266     030F  3000               	movlw	0
  3267     0310  00A9               	movwf	(__ReadSensor@Vcc+1)^(0+256)
  3268     0311  3000               	movlw	0
  3269     0312  00A8               	movwf	__ReadSensor@Vcc^(0+256)
  3270                           
  3271                           ;main.c: 288:     float Rntc = Rpullup * (Vcc / Vout - 1.0f);
  3272     0313  0827               	movf	(__ReadSensor@Rpullup+3)^(0+256),w
  3273     0314  0020               	movlb	0	; select bank0
  3274     0315  00DB               	movwf	___flmul@b+3
  3275     0316  0022               	movlb	2	; select bank2
  3276     0317  0826               	movf	(__ReadSensor@Rpullup+2)^(0+256),w
  3277     0318  0020               	movlb	0	; select bank0
  3278     0319  00DA               	movwf	___flmul@b+2
  3279     031A  0022               	movlb	2	; select bank2
  3280     031B  0825               	movf	(__ReadSensor@Rpullup+1)^(0+256),w
  3281     031C  0020               	movlb	0	; select bank0
  3282     031D  00D9               	movwf	___flmul@b+1
  3283     031E  0022               	movlb	2	; select bank2
  3284     031F  0824               	movf	__ReadSensor@Rpullup^(0+256),w
  3285     0320  0020               	movlb	0	; select bank0
  3286     0321  00D8               	movwf	___flmul@b
  3287     0322  30BF               	movlw	191
  3288     0323  00C7               	movwf	___fladd@b+3
  3289     0324  3080               	movlw	128
  3290     0325  00C6               	movwf	___fladd@b+2
  3291     0326  3000               	movlw	0
  3292     0327  00C5               	movwf	___fladd@b+1
  3293     0328  3000               	movlw	0
  3294     0329  00C4               	movwf	___fladd@b
  3295     032A  0022               	movlb	2	; select bank2
  3296     032B  0823               	movf	(__ReadSensor@Vout+3)^(0+256),w
  3297     032C  0020               	movlb	0	; select bank0
  3298     032D  00AD               	movwf	___fldiv@a+3
  3299     032E  0022               	movlb	2	; select bank2
  3300     032F  0822               	movf	(__ReadSensor@Vout+2)^(0+256),w
  3301     0330  0020               	movlb	0	; select bank0
  3302     0331  00AC               	movwf	___fldiv@a+2
  3303     0332  0022               	movlb	2	; select bank2
  3304     0333  0821               	movf	(__ReadSensor@Vout+1)^(0+256),w
  3305     0334  0020               	movlb	0	; select bank0
  3306     0335  00AB               	movwf	___fldiv@a+1
  3307     0336  0022               	movlb	2	; select bank2
  3308     0337  0820               	movf	__ReadSensor@Vout^(0+256),w
  3309     0338  0020               	movlb	0	; select bank0
  3310     0339  00AA               	movwf	___fldiv@a
  3311     033A  0022               	movlb	2	; select bank2
  3312     033B  082B               	movf	(__ReadSensor@Vcc+3)^(0+256),w
  3313     033C  0020               	movlb	0	; select bank0
  3314     033D  00B1               	movwf	___fldiv@b+3
  3315     033E  0022               	movlb	2	; select bank2
  3316     033F  082A               	movf	(__ReadSensor@Vcc+2)^(0+256),w
  3317     0340  0020               	movlb	0	; select bank0
  3318     0341  00B0               	movwf	___fldiv@b+2
  3319     0342  0022               	movlb	2	; select bank2
  3320     0343  0829               	movf	(__ReadSensor@Vcc+1)^(0+256),w
  3321     0344  0020               	movlb	0	; select bank0
  3322     0345  00AF               	movwf	___fldiv@b+1
  3323     0346  0022               	movlb	2	; select bank2
  3324     0347  0828               	movf	__ReadSensor@Vcc^(0+256),w
  3325     0348  0020               	movlb	0	; select bank0
  3326     0349  00AE               	movwf	___fldiv@b
  3327     034A  318C  24E0  3182   	fcall	___fldiv
  3328     034D  082D               	movf	?___fldiv+3,w
  3329     034E  00CB               	movwf	___fladd@a+3
  3330     034F  082C               	movf	?___fldiv+2,w
  3331     0350  00CA               	movwf	___fladd@a+2
  3332     0351  082B               	movf	?___fldiv+1,w
  3333     0352  00C9               	movwf	___fladd@a+1
  3334     0353  082A               	movf	?___fldiv,w
  3335     0354  00C8               	movwf	___fladd@a
  3336     0355  318E  264F  3182   	fcall	___fladd
  3337     0358  0847               	movf	?___fladd+3,w
  3338     0359  00DF               	movwf	___flmul@a+3
  3339     035A  0846               	movf	?___fladd+2,w
  3340     035B  00DE               	movwf	___flmul@a+2
  3341     035C  0845               	movf	?___fladd+1,w
  3342     035D  00DD               	movwf	___flmul@a+1
  3343     035E  0844               	movf	?___fladd,w
  3344     035F  00DC               	movwf	___flmul@a
  3345     0360  3180  203E  3182   	fcall	___flmul
  3346     0363  085B               	movf	?___flmul+3,w
  3347     0364  0022               	movlb	2	; select bank2
  3348     0365  00AF               	movwf	(__ReadSensor@Rntc+3)^(0+256)
  3349     0366  0020               	movlb	0	; select bank0
  3350     0367  085A               	movf	?___flmul+2,w
  3351     0368  0022               	movlb	2	; select bank2
  3352     0369  00AE               	movwf	(__ReadSensor@Rntc+2)^(0+256)
  3353     036A  0020               	movlb	0	; select bank0
  3354     036B  0859               	movf	?___flmul+1,w
  3355     036C  0022               	movlb	2	; select bank2
  3356     036D  00AD               	movwf	(__ReadSensor@Rntc+1)^(0+256)
  3357     036E  0020               	movlb	0	; select bank0
  3358     036F  0858               	movf	?___flmul,w
  3359     0370  0022               	movlb	2	; select bank2
  3360     0371  00AC               	movwf	__ReadSensor@Rntc^(0+256)
  3361                           
  3362                           ;main.c: 291:     float logR = my_log(Rntc);
  3363     0372  082F               	movf	(__ReadSensor@Rntc+3)^(0+256),w
  3364     0373  0021               	movlb	1	; select bank1
  3365     0374  00B0               	movwf	(my_log@x+3)^(0+128)
  3366     0375  0022               	movlb	2	; select bank2
  3367     0376  082E               	movf	(__ReadSensor@Rntc+2)^(0+256),w
  3368     0377  0021               	movlb	1	; select bank1
  3369     0378  00AF               	movwf	(my_log@x+2)^(0+128)
  3370     0379  0022               	movlb	2	; select bank2
  3371     037A  082D               	movf	(__ReadSensor@Rntc+1)^(0+256),w
  3372     037B  0021               	movlb	1	; select bank1
  3373     037C  00AE               	movwf	(my_log@x+1)^(0+128)
  3374     037D  0022               	movlb	2	; select bank2
  3375     037E  082C               	movf	__ReadSensor@Rntc^(0+256),w
  3376     037F  0021               	movlb	1	; select bank1
  3377     0380  00AD               	movwf	my_log@x^(0+128)
  3378     0381  3185  251B  3182   	fcall	_my_log
  3379     0384  0830               	movf	(?_my_log+3)^(0+128),w
  3380     0385  0022               	movlb	2	; select bank2
  3381     0386  00D1               	movwf	(__ReadSensor@logR+3)^(0+256)
  3382     0387  0021               	movlb	1	; select bank1
  3383     0388  082F               	movf	(?_my_log+2)^(0+128),w
  3384     0389  0022               	movlb	2	; select bank2
  3385     038A  00D0               	movwf	(__ReadSensor@logR+2)^(0+256)
  3386     038B  0021               	movlb	1	; select bank1
  3387     038C  082E               	movf	(?_my_log+1)^(0+128),w
  3388     038D  0022               	movlb	2	; select bank2
  3389     038E  00CF               	movwf	(__ReadSensor@logR+1)^(0+256)
  3390     038F  0021               	movlb	1	; select bank1
  3391     0390  082D               	movf	?_my_log^(0+128),w
  3392     0391  0022               	movlb	2	; select bank2
  3393     0392  00CE               	movwf	__ReadSensor@logR^(0+256)
  3394     0393  3033               	movlw	51
  3395     0394  0020               	movlb	0	; select bank0
  3396     0395  00DB               	movwf	___flmul@b+3
  3397     0396  30C4               	movlw	196
  3398     0397  00DA               	movwf	___flmul@b+2
  3399     0398  3025               	movlw	37
  3400     0399  00D9               	movwf	___flmul@b+1
  3401     039A  3080               	movlw	128
  3402     039B  00D8               	movwf	___flmul@b
  3403     039C  0022               	movlb	2	; select bank2
  3404     039D  0851               	movf	(__ReadSensor@logR+3)^(0+256),w
  3405     039E  0020               	movlb	0	; select bank0
  3406     039F  00DF               	movwf	___flmul@a+3
  3407     03A0  0022               	movlb	2	; select bank2
  3408     03A1  0850               	movf	(__ReadSensor@logR+2)^(0+256),w
  3409     03A2  0020               	movlb	0	; select bank0
  3410     03A3  00DE               	movwf	___flmul@a+2
  3411     03A4  0022               	movlb	2	; select bank2
  3412     03A5  084F               	movf	(__ReadSensor@logR+1)^(0+256),w
  3413     03A6  0020               	movlb	0	; select bank0
  3414     03A7  00DD               	movwf	___flmul@a+1
  3415     03A8  0022               	movlb	2	; select bank2
  3416     03A9  084E               	movf	__ReadSensor@logR^(0+256),w
  3417     03AA  0020               	movlb	0	; select bank0
  3418     03AB  00DC               	movwf	___flmul@a
  3419     03AC  3180  203E  3182   	fcall	___flmul
  3420     03AF  085B               	movf	?___flmul+3,w
  3421     03B0  0022               	movlb	2	; select bank2
  3422     03B1  00C3               	movwf	(__ReadSensor$1709+3)^(0+256)
  3423     03B2  0020               	movlb	0	; select bank0
  3424     03B3  085A               	movf	?___flmul+2,w
  3425     03B4  0022               	movlb	2	; select bank2
  3426     03B5  00C2               	movwf	(__ReadSensor$1709+2)^(0+256)
  3427     03B6  0020               	movlb	0	; select bank0
  3428     03B7  0859               	movf	?___flmul+1,w
  3429     03B8  0022               	movlb	2	; select bank2
  3430     03B9  00C1               	movwf	(__ReadSensor$1709+1)^(0+256)
  3431     03BA  0020               	movlb	0	; select bank0
  3432     03BB  0858               	movf	?___flmul,w
  3433     03BC  0022               	movlb	2	; select bank2
  3434     03BD  00C0               	movwf	__ReadSensor$1709^(0+256)
  3435     03BE  0851               	movf	(__ReadSensor@logR+3)^(0+256),w
  3436     03BF  0020               	movlb	0	; select bank0
  3437     03C0  00DB               	movwf	___flmul@b+3
  3438     03C1  0022               	movlb	2	; select bank2
  3439     03C2  0850               	movf	(__ReadSensor@logR+2)^(0+256),w
  3440     03C3  0020               	movlb	0	; select bank0
  3441     03C4  00DA               	movwf	___flmul@b+2
  3442     03C5  0022               	movlb	2	; select bank2
  3443     03C6  084F               	movf	(__ReadSensor@logR+1)^(0+256),w
  3444     03C7  0020               	movlb	0	; select bank0
  3445     03C8  00D9               	movwf	___flmul@b+1
  3446     03C9  0022               	movlb	2	; select bank2
  3447     03CA  084E               	movf	__ReadSensor@logR^(0+256),w
  3448     03CB  0020               	movlb	0	; select bank0
  3449     03CC  00D8               	movwf	___flmul@b
  3450     03CD  0022               	movlb	2	; select bank2
  3451     03CE  0843               	movf	(__ReadSensor$1709+3)^(0+256),w
  3452     03CF  0020               	movlb	0	; select bank0
  3453     03D0  00DF               	movwf	___flmul@a+3
  3454     03D1  0022               	movlb	2	; select bank2
  3455     03D2  0842               	movf	(__ReadSensor$1709+2)^(0+256),w
  3456     03D3  0020               	movlb	0	; select bank0
  3457     03D4  00DE               	movwf	___flmul@a+2
  3458     03D5  0022               	movlb	2	; select bank2
  3459     03D6  0841               	movf	(__ReadSensor$1709+1)^(0+256),w
  3460     03D7  0020               	movlb	0	; select bank0
  3461     03D8  00DD               	movwf	___flmul@a+1
  3462     03D9  0022               	movlb	2	; select bank2
  3463     03DA  0840               	movf	__ReadSensor$1709^(0+256),w
  3464     03DB  0020               	movlb	0	; select bank0
  3465     03DC  00DC               	movwf	___flmul@a
  3466     03DD  3180  203E  3182   	fcall	___flmul
  3467     03E0  085B               	movf	?___flmul+3,w
  3468     03E1  0022               	movlb	2	; select bank2
  3469     03E2  00C7               	movwf	(__ReadSensor$1710+3)^(0+256)
  3470     03E3  0020               	movlb	0	; select bank0
  3471     03E4  085A               	movf	?___flmul+2,w
  3472     03E5  0022               	movlb	2	; select bank2
  3473     03E6  00C6               	movwf	(__ReadSensor$1710+2)^(0+256)
  3474     03E7  0020               	movlb	0	; select bank0
  3475     03E8  0859               	movf	?___flmul+1,w
  3476     03E9  0022               	movlb	2	; select bank2
  3477     03EA  00C5               	movwf	(__ReadSensor$1710+1)^(0+256)
  3478     03EB  0020               	movlb	0	; select bank0
  3479     03EC  0858               	movf	?___flmul,w
  3480     03ED  0022               	movlb	2	; select bank2
  3481     03EE  00C4               	movwf	__ReadSensor$1710^(0+256)
  3482     03EF  303A               	movlw	58
  3483     03F0  0020               	movlb	0	; select bank0
  3484     03F1  00C7               	movwf	___fladd@b+3
  3485     03F2  30A8               	movlw	168
  3486     03F3  00C6               	movwf	___fladd@b+2
  3487     03F4  3000               	movlw	0
  3488     03F5  00C5               	movwf	___fladd@b+1
  3489     03F6  3010               	movlw	16
  3490     03F7  00C4               	movwf	___fladd@b
  3491     03F8  3039               	movlw	57
  3492     03F9  00DB               	movwf	___flmul@b+3
  3493     03FA  3078               	movlw	120
  3494     03FB  00DA               	movwf	___flmul@b+2
  3495     03FC  302D               	movlw	45
  3496     03FD  00D9               	movwf	___flmul@b+1
  3497     03FE  3016               	movlw	22
  3498     03FF  00D8               	movwf	___flmul@b
  3499     0400  0022               	movlb	2	; select bank2
  3500     0401  0851               	movf	(__ReadSensor@logR+3)^(0+256),w
  3501     0402  0020               	movlb	0	; select bank0
  3502     0403  00DF               	movwf	___flmul@a+3
  3503     0404  0022               	movlb	2	; select bank2
  3504     0405  0850               	movf	(__ReadSensor@logR+2)^(0+256),w
  3505     0406  0020               	movlb	0	; select bank0
  3506     0407  00DE               	movwf	___flmul@a+2
  3507     0408  0022               	movlb	2	; select bank2
  3508     0409  084F               	movf	(__ReadSensor@logR+1)^(0+256),w
  3509     040A  0020               	movlb	0	; select bank0
  3510     040B  00DD               	movwf	___flmul@a+1
  3511     040C  0022               	movlb	2	; select bank2
  3512     040D  084E               	movf	__ReadSensor@logR^(0+256),w
  3513     040E  0020               	movlb	0	; select bank0
  3514     040F  00DC               	movwf	___flmul@a
  3515     0410  3180  203E  3182   	fcall	___flmul
  3516     0413  085B               	movf	?___flmul+3,w
  3517     0414  00CB               	movwf	___fladd@a+3
  3518     0415  085A               	movf	?___flmul+2,w
  3519     0416  00CA               	movwf	___fladd@a+2
  3520     0417  0859               	movf	?___flmul+1,w
  3521     0418  00C9               	movwf	___fladd@a+1
  3522     0419  0858               	movf	?___flmul,w
  3523     041A  00C8               	movwf	___fladd@a
  3524     041B  318E  264F  3182   	fcall	___fladd
  3525     041E  0847               	movf	?___fladd+3,w
  3526     041F  0022               	movlb	2	; select bank2
  3527     0420  00CB               	movwf	(__ReadSensor$1711+3)^(0+256)
  3528     0421  0020               	movlb	0	; select bank0
  3529     0422  0846               	movf	?___fladd+2,w
  3530     0423  0022               	movlb	2	; select bank2
  3531     0424  00CA               	movwf	(__ReadSensor$1711+2)^(0+256)
  3532     0425  0020               	movlb	0	; select bank0
  3533     0426  0845               	movf	?___fladd+1,w
  3534     0427  0022               	movlb	2	; select bank2
  3535     0428  00C9               	movwf	(__ReadSensor$1711+1)^(0+256)
  3536     0429  0020               	movlb	0	; select bank0
  3537     042A  0844               	movf	?___fladd,w
  3538     042B  0022               	movlb	2	; select bank2
  3539     042C  00C8               	movwf	__ReadSensor$1711^(0+256)
  3540     042D  0851               	movf	(__ReadSensor@logR+3)^(0+256),w
  3541     042E  0020               	movlb	0	; select bank0
  3542     042F  00DB               	movwf	___flmul@b+3
  3543     0430  0022               	movlb	2	; select bank2
  3544     0431  0850               	movf	(__ReadSensor@logR+2)^(0+256),w
  3545     0432  0020               	movlb	0	; select bank0
  3546     0433  00DA               	movwf	___flmul@b+2
  3547     0434  0022               	movlb	2	; select bank2
  3548     0435  084F               	movf	(__ReadSensor@logR+1)^(0+256),w
  3549     0436  0020               	movlb	0	; select bank0
  3550     0437  00D9               	movwf	___flmul@b+1
  3551     0438  0022               	movlb	2	; select bank2
  3552     0439  084E               	movf	__ReadSensor@logR^(0+256),w
  3553     043A  0020               	movlb	0	; select bank0
  3554     043B  00D8               	movwf	___flmul@b
  3555     043C  0022               	movlb	2	; select bank2
  3556     043D  0847               	movf	(__ReadSensor$1710+3)^(0+256),w
  3557     043E  0020               	movlb	0	; select bank0
  3558     043F  00DF               	movwf	___flmul@a+3
  3559     0440  0022               	movlb	2	; select bank2
  3560     0441  0846               	movf	(__ReadSensor$1710+2)^(0+256),w
  3561     0442  0020               	movlb	0	; select bank0
  3562     0443  00DE               	movwf	___flmul@a+2
  3563     0444  0022               	movlb	2	; select bank2
  3564     0445  0845               	movf	(__ReadSensor$1710+1)^(0+256),w
  3565     0446  0020               	movlb	0	; select bank0
  3566     0447  00DD               	movwf	___flmul@a+1
  3567     0448  0022               	movlb	2	; select bank2
  3568     0449  0844               	movf	__ReadSensor$1710^(0+256),w
  3569     044A  0020               	movlb	0	; select bank0
  3570     044B  00DC               	movwf	___flmul@a
  3571     044C  3180  203E  3182   	fcall	___flmul
  3572     044F  085B               	movf	?___flmul+3,w
  3573     0450  00C7               	movwf	___fladd@b+3
  3574     0451  085A               	movf	?___flmul+2,w
  3575     0452  00C6               	movwf	___fladd@b+2
  3576     0453  0859               	movf	?___flmul+1,w
  3577     0454  00C5               	movwf	___fladd@b+1
  3578     0455  0858               	movf	?___flmul,w
  3579     0456  00C4               	movwf	___fladd@b
  3580     0457  0022               	movlb	2	; select bank2
  3581     0458  084B               	movf	(__ReadSensor$1711+3)^(0+256),w
  3582     0459  0020               	movlb	0	; select bank0
  3583     045A  00CB               	movwf	___fladd@a+3
  3584     045B  0022               	movlb	2	; select bank2
  3585     045C  084A               	movf	(__ReadSensor$1711+2)^(0+256),w
  3586     045D  0020               	movlb	0	; select bank0
  3587     045E  00CA               	movwf	___fladd@a+2
  3588     045F  0022               	movlb	2	; select bank2
  3589     0460  0849               	movf	(__ReadSensor$1711+1)^(0+256),w
  3590     0461  0020               	movlb	0	; select bank0
  3591     0462  00C9               	movwf	___fladd@a+1
  3592     0463  0022               	movlb	2	; select bank2
  3593     0464  0848               	movf	__ReadSensor$1711^(0+256),w
  3594     0465  0020               	movlb	0	; select bank0
  3595     0466  00C8               	movwf	___fladd@a
  3596     0467  318E  264F  3182   	fcall	___fladd
  3597     046A  0847               	movf	?___fladd+3,w
  3598     046B  0022               	movlb	2	; select bank2
  3599     046C  00B3               	movwf	(__ReadSensor@invT+3)^(0+256)
  3600     046D  0020               	movlb	0	; select bank0
  3601     046E  0846               	movf	?___fladd+2,w
  3602     046F  0022               	movlb	2	; select bank2
  3603     0470  00B2               	movwf	(__ReadSensor@invT+2)^(0+256)
  3604     0471  0020               	movlb	0	; select bank0
  3605     0472  0845               	movf	?___fladd+1,w
  3606     0473  0022               	movlb	2	; select bank2
  3607     0474  00B1               	movwf	(__ReadSensor@invT+1)^(0+256)
  3608     0475  0020               	movlb	0	; select bank0
  3609     0476  0844               	movf	?___fladd,w
  3610     0477  0022               	movlb	2	; select bank2
  3611     0478  00B0               	movwf	__ReadSensor@invT^(0+256)
  3612                           
  3613                           ;main.c: 295:     float T = 1.0f / invT;
  3614     0479  0833               	movf	(__ReadSensor@invT+3)^(0+256),w
  3615     047A  0020               	movlb	0	; select bank0
  3616     047B  00AD               	movwf	___fldiv@a+3
  3617     047C  0022               	movlb	2	; select bank2
  3618     047D  0832               	movf	(__ReadSensor@invT+2)^(0+256),w
  3619     047E  0020               	movlb	0	; select bank0
  3620     047F  00AC               	movwf	___fldiv@a+2
  3621     0480  0022               	movlb	2	; select bank2
  3622     0481  0831               	movf	(__ReadSensor@invT+1)^(0+256),w
  3623     0482  0020               	movlb	0	; select bank0
  3624     0483  00AB               	movwf	___fldiv@a+1
  3625     0484  0022               	movlb	2	; select bank2
  3626     0485  0830               	movf	__ReadSensor@invT^(0+256),w
  3627     0486  0020               	movlb	0	; select bank0
  3628     0487  00AA               	movwf	___fldiv@a
  3629     0488  303F               	movlw	63
  3630     0489  00B1               	movwf	___fldiv@b+3
  3631     048A  3080               	movlw	128
  3632     048B  00B0               	movwf	___fldiv@b+2
  3633     048C  3000               	movlw	0
  3634     048D  00AF               	movwf	___fldiv@b+1
  3635     048E  3000               	movlw	0
  3636     048F  00AE               	movwf	___fldiv@b
  3637     0490  318C  24E0  3182   	fcall	___fldiv
  3638     0493  082D               	movf	?___fldiv+3,w
  3639     0494  0022               	movlb	2	; select bank2
  3640     0495  00B7               	movwf	(__ReadSensor@T+3)^(0+256)
  3641     0496  0020               	movlb	0	; select bank0
  3642     0497  082C               	movf	?___fldiv+2,w
  3643     0498  0022               	movlb	2	; select bank2
  3644     0499  00B6               	movwf	(__ReadSensor@T+2)^(0+256)
  3645     049A  0020               	movlb	0	; select bank0
  3646     049B  082B               	movf	?___fldiv+1,w
  3647     049C  0022               	movlb	2	; select bank2
  3648     049D  00B5               	movwf	(__ReadSensor@T+1)^(0+256)
  3649     049E  0020               	movlb	0	; select bank0
  3650     049F  082A               	movf	?___fldiv,w
  3651     04A0  0022               	movlb	2	; select bank2
  3652     04A1  00B4               	movwf	__ReadSensor@T^(0+256)
  3653                           
  3654                           ;main.c: 296:     float Tc = T - 273.15f;
  3655     04A2  30C3               	movlw	195
  3656     04A3  0020               	movlb	0	; select bank0
  3657     04A4  00C7               	movwf	___fladd@b+3
  3658     04A5  3088               	movlw	136
  3659     04A6  00C6               	movwf	___fladd@b+2
  3660     04A7  3093               	movlw	147
  3661     04A8  00C5               	movwf	___fladd@b+1
  3662     04A9  3033               	movlw	51
  3663     04AA  00C4               	movwf	___fladd@b
  3664     04AB  0022               	movlb	2	; select bank2
  3665     04AC  0837               	movf	(__ReadSensor@T+3)^(0+256),w
  3666     04AD  0020               	movlb	0	; select bank0
  3667     04AE  00CB               	movwf	___fladd@a+3
  3668     04AF  0022               	movlb	2	; select bank2
  3669     04B0  0836               	movf	(__ReadSensor@T+2)^(0+256),w
  3670     04B1  0020               	movlb	0	; select bank0
  3671     04B2  00CA               	movwf	___fladd@a+2
  3672     04B3  0022               	movlb	2	; select bank2
  3673     04B4  0835               	movf	(__ReadSensor@T+1)^(0+256),w
  3674     04B5  0020               	movlb	0	; select bank0
  3675     04B6  00C9               	movwf	___fladd@a+1
  3676     04B7  0022               	movlb	2	; select bank2
  3677     04B8  0834               	movf	__ReadSensor@T^(0+256),w
  3678     04B9  0020               	movlb	0	; select bank0
  3679     04BA  00C8               	movwf	___fladd@a
  3680     04BB  318E  264F  3182   	fcall	___fladd
  3681     04BE  0847               	movf	?___fladd+3,w
  3682     04BF  0022               	movlb	2	; select bank2
  3683     04C0  00BB               	movwf	(__ReadSensor@Tc+3)^(0+256)
  3684     04C1  0020               	movlb	0	; select bank0
  3685     04C2  0846               	movf	?___fladd+2,w
  3686     04C3  0022               	movlb	2	; select bank2
  3687     04C4  00BA               	movwf	(__ReadSensor@Tc+2)^(0+256)
  3688     04C5  0020               	movlb	0	; select bank0
  3689     04C6  0845               	movf	?___fladd+1,w
  3690     04C7  0022               	movlb	2	; select bank2
  3691     04C8  00B9               	movwf	(__ReadSensor@Tc+1)^(0+256)
  3692     04C9  0020               	movlb	0	; select bank0
  3693     04CA  0844               	movf	?___fladd,w
  3694     04CB  0022               	movlb	2	; select bank2
  3695     04CC  00B8               	movwf	__ReadSensor@Tc^(0+256)
  3696                           
  3697                           ;main.c: 297:     float Tf = (1.8f * Tc) + 32.0f;
  3698     04CD  3042               	movlw	66
  3699     04CE  0020               	movlb	0	; select bank0
  3700     04CF  00C7               	movwf	___fladd@b+3
  3701     04D0  3000               	movlw	0
  3702     04D1  00C6               	movwf	___fladd@b+2
  3703     04D2  3000               	movlw	0
  3704     04D3  00C5               	movwf	___fladd@b+1
  3705     04D4  3000               	movlw	0
  3706     04D5  00C4               	movwf	___fladd@b
  3707     04D6  303F               	movlw	63
  3708     04D7  00DB               	movwf	___flmul@b+3
  3709     04D8  30E6               	movlw	230
  3710     04D9  00DA               	movwf	___flmul@b+2
  3711     04DA  3066               	movlw	102
  3712     04DB  00D9               	movwf	___flmul@b+1
  3713     04DC  3066               	movlw	102
  3714     04DD  00D8               	movwf	___flmul@b
  3715     04DE  0022               	movlb	2	; select bank2
  3716     04DF  083B               	movf	(__ReadSensor@Tc+3)^(0+256),w
  3717     04E0  0020               	movlb	0	; select bank0
  3718     04E1  00DF               	movwf	___flmul@a+3
  3719     04E2  0022               	movlb	2	; select bank2
  3720     04E3  083A               	movf	(__ReadSensor@Tc+2)^(0+256),w
  3721     04E4  0020               	movlb	0	; select bank0
  3722     04E5  00DE               	movwf	___flmul@a+2
  3723     04E6  0022               	movlb	2	; select bank2
  3724     04E7  0839               	movf	(__ReadSensor@Tc+1)^(0+256),w
  3725     04E8  0020               	movlb	0	; select bank0
  3726     04E9  00DD               	movwf	___flmul@a+1
  3727     04EA  0022               	movlb	2	; select bank2
  3728     04EB  0838               	movf	__ReadSensor@Tc^(0+256),w
  3729     04EC  0020               	movlb	0	; select bank0
  3730     04ED  00DC               	movwf	___flmul@a
  3731     04EE  3180  203E  3182   	fcall	___flmul
  3732     04F1  085B               	movf	?___flmul+3,w
  3733     04F2  00CB               	movwf	___fladd@a+3
  3734     04F3  085A               	movf	?___flmul+2,w
  3735     04F4  00CA               	movwf	___fladd@a+2
  3736     04F5  0859               	movf	?___flmul+1,w
  3737     04F6  00C9               	movwf	___fladd@a+1
  3738     04F7  0858               	movf	?___flmul,w
  3739     04F8  00C8               	movwf	___fladd@a
  3740     04F9  318E  264F  3182   	fcall	___fladd
  3741     04FC  0847               	movf	?___fladd+3,w
  3742     04FD  0022               	movlb	2	; select bank2
  3743     04FE  00BF               	movwf	(__ReadSensor@Tf+3)^(0+256)
  3744     04FF  0020               	movlb	0	; select bank0
  3745     0500  0846               	movf	?___fladd+2,w
  3746     0501  0022               	movlb	2	; select bank2
  3747     0502  00BE               	movwf	(__ReadSensor@Tf+2)^(0+256)
  3748     0503  0020               	movlb	0	; select bank0
  3749     0504  0845               	movf	?___fladd+1,w
  3750     0505  0022               	movlb	2	; select bank2
  3751     0506  00BD               	movwf	(__ReadSensor@Tf+1)^(0+256)
  3752     0507  0020               	movlb	0	; select bank0
  3753     0508  0844               	movf	?___fladd,w
  3754     0509  0022               	movlb	2	; select bank2
  3755     050A  00BC               	movwf	__ReadSensor@Tf^(0+256)
  3756                           
  3757                           ;main.c: 299:     TEMP = (int)Tf;
  3758     050B  083F               	movf	(__ReadSensor@Tf+3)^(0+256),w
  3759     050C  00F6               	movwf	___fltol@f1+3
  3760     050D  083E               	movf	(__ReadSensor@Tf+2)^(0+256),w
  3761     050E  00F5               	movwf	___fltol@f1+2
  3762     050F  083D               	movf	(__ReadSensor@Tf+1)^(0+256),w
  3763     0510  00F4               	movwf	___fltol@f1+1
  3764     0511  083C               	movf	__ReadSensor@Tf^(0+256),w
  3765     0512  00F3               	movwf	___fltol@f1
  3766     0513  318A  22CC         	fcall	___fltol
  3767     0515  0874               	movf	?___fltol+1,w
  3768     0516  0021               	movlb	1	; select bank1
  3769     0517  00C6               	movwf	(_TEMP+1)^(0+128)
  3770     0518  0873               	movf	?___fltol,w
  3771     0519  00C5               	movwf	_TEMP^(0+128)
  3772     051A  0008               	return
  3773     051B                     __end_of__ReadSensor:
  3774                           
  3775                           	psect	text6
  3776     051B                     __ptext6:	
  3777 ;; *************** function _my_log *****************
  3778 ;; Defined at:
  3779 ;;		line 4 in file "custom_math.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;  x               4   13[BANK1 ] float 
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;  term            4   31[BANK1 ] float 
  3784 ;;  sum             4   25[BANK1 ] float 
  3785 ;;  result          4   21[BANK1 ] float 
  3786 ;;  n               2   29[BANK1 ] int 
  3787 ;; Return value:  Size  Location     Type
  3788 ;;                  4   13[BANK1 ] float 
  3789 ;; Registers used:
  3790 ;;		wreg, status,2, status,0, pclath, cstack
  3791 ;; Tracked objects:
  3792 ;;		On entry : 1F/1
  3793 ;;		On exit  : 1F/1
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3796 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3797 ;;      Locals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0
  3798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3799 ;;      Totals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0
  3800 ;;Total ram usage:       22 bytes
  3801 ;; Hardware stack levels used: 1
  3802 ;; Hardware stack levels required when called: 6
  3803 ;; This function calls:
  3804 ;;		___fladd
  3805 ;;		___fldiv
  3806 ;;		___flge
  3807 ;;		___flmul
  3808 ;;		___flneg
  3809 ;;		___flsub
  3810 ;;		___xxtofl
  3811 ;; This function is called by:
  3812 ;;		__ReadSensor
  3813 ;; This function uses a non-reentrant model
  3814 ;;
  3815                           
  3816     051B                     _my_log:	
  3817                           ;psect for function _my_log
  3818                           
  3819                           
  3820                           ;custom_math.c: 5:     if (x <= 0) {
  3821                           
  3822                           ;incstack = 0
  3823                           ; Regs used in _my_log: [wreg+status,2+status,0+pclath+cstack]
  3824     051B  3000               	movlw	0
  3825     051C  0020               	movlb	0	; select bank0
  3826     051D  00A3               	movwf	___flge@ff1+3
  3827     051E  3000               	movlw	0
  3828     051F  00A2               	movwf	___flge@ff1+2
  3829     0520  3000               	movlw	0
  3830     0521  00A1               	movwf	___flge@ff1+1
  3831     0522  3000               	movlw	0
  3832     0523  00A0               	movwf	___flge@ff1
  3833     0524  0021               	movlb	1	; select bank1
  3834     0525  0830               	movf	(my_log@x+3)^(0+128),w
  3835     0526  0020               	movlb	0	; select bank0
  3836     0527  00A7               	movwf	___flge@ff2+3
  3837     0528  0021               	movlb	1	; select bank1
  3838     0529  082F               	movf	(my_log@x+2)^(0+128),w
  3839     052A  0020               	movlb	0	; select bank0
  3840     052B  00A6               	movwf	___flge@ff2+2
  3841     052C  0021               	movlb	1	; select bank1
  3842     052D  082E               	movf	(my_log@x+1)^(0+128),w
  3843     052E  0020               	movlb	0	; select bank0
  3844     052F  00A5               	movwf	___flge@ff2+1
  3845     0530  0021               	movlb	1	; select bank1
  3846     0531  082D               	movf	my_log@x^(0+128),w
  3847     0532  0020               	movlb	0	; select bank0
  3848     0533  00A4               	movwf	___flge@ff2
  3849     0534  318B  232E  3185   	fcall	___flge
  3850     0537  1C03               	btfss	3,0
  3851     0538  2D43               	goto	l3731
  3852                           
  3853                           ;custom_math.c: 6:         return 0.0f;
  3854     0539  3000               	movlw	0
  3855     053A  0021               	movlb	1	; select bank1
  3856     053B  00B0               	movwf	(?_my_log+3)^(0+128)
  3857     053C  3000               	movlw	0
  3858     053D  00AF               	movwf	(?_my_log+2)^(0+128)
  3859     053E  3000               	movlw	0
  3860     053F  00AE               	movwf	(?_my_log+1)^(0+128)
  3861     0540  3000               	movlw	0
  3862     0541  00AD               	movwf	?_my_log^(0+128)
  3863     0542  0008               	return
  3864     0543                     l3731:
  3865                           
  3866                           ;custom_math.c: 10:     float result = 0.0f;
  3867     0543  3000               	movlw	0
  3868     0544  0021               	movlb	1	; select bank1
  3869     0545  00B8               	movwf	(my_log@result+3)^(0+128)
  3870     0546  3000               	movlw	0
  3871     0547  00B7               	movwf	(my_log@result+2)^(0+128)
  3872     0548  3000               	movlw	0
  3873     0549  00B6               	movwf	(my_log@result+1)^(0+128)
  3874     054A  3000               	movlw	0
  3875     054B                     L1:
  3876     054B  00B5               	movwf	my_log@result^(0+128)
  3877                           
  3878                           ;custom_math.c: 11:     while (x > 1.5f) {
  3879                           
  3880                           ;custom_math.c: 14:     }
  3881     054C  303F               	movlw	63
  3882     054D  0020               	movlb	0	; select bank0
  3883     054E  00A3               	movwf	___flge@ff1+3
  3884     054F  30C0               	movlw	192
  3885     0550  00A2               	movwf	___flge@ff1+2
  3886     0551  3000               	movlw	0
  3887     0552  00A1               	movwf	___flge@ff1+1
  3888     0553  3000               	movlw	0
  3889     0554  00A0               	movwf	___flge@ff1
  3890     0555  0021               	movlb	1	; select bank1
  3891     0556  0830               	movf	(my_log@x+3)^(0+128),w
  3892     0557  0020               	movlb	0	; select bank0
  3893     0558  00A7               	movwf	___flge@ff2+3
  3894     0559  0021               	movlb	1	; select bank1
  3895     055A  082F               	movf	(my_log@x+2)^(0+128),w
  3896     055B  0020               	movlb	0	; select bank0
  3897     055C  00A6               	movwf	___flge@ff2+2
  3898     055D  0021               	movlb	1	; select bank1
  3899     055E  082E               	movf	(my_log@x+1)^(0+128),w
  3900     055F  0020               	movlb	0	; select bank0
  3901     0560  00A5               	movwf	___flge@ff2+1
  3902     0561  0021               	movlb	1	; select bank1
  3903     0562  082D               	movf	my_log@x^(0+128),w
  3904     0563  0020               	movlb	0	; select bank0
  3905     0564  00A4               	movwf	___flge@ff2
  3906     0565  318B  232E  3185   	fcall	___flge
  3907     0568  1803               	btfsc	3,0
  3908     0569  2DBF               	goto	l3735
  3909                           
  3910                           ;custom_math.c: 12:         x /= 2.718281828459045f;
  3911                           
  3912                           ;custom_math.c: 11:     while (x > 1.5f) {
  3913     056A  3040               	movlw	64
  3914     056B  00AD               	movwf	___fldiv@a+3
  3915     056C  302D               	movlw	45
  3916     056D  00AC               	movwf	___fldiv@a+2
  3917     056E  30F8               	movlw	248
  3918     056F  00AB               	movwf	___fldiv@a+1
  3919     0570  3054               	movlw	84
  3920     0571  00AA               	movwf	___fldiv@a
  3921     0572  0021               	movlb	1	; select bank1
  3922     0573  0830               	movf	(my_log@x+3)^(0+128),w
  3923     0574  0020               	movlb	0	; select bank0
  3924     0575  00B1               	movwf	___fldiv@b+3
  3925     0576  0021               	movlb	1	; select bank1
  3926     0577  082F               	movf	(my_log@x+2)^(0+128),w
  3927     0578  0020               	movlb	0	; select bank0
  3928     0579  00B0               	movwf	___fldiv@b+2
  3929     057A  0021               	movlb	1	; select bank1
  3930     057B  082E               	movf	(my_log@x+1)^(0+128),w
  3931     057C  0020               	movlb	0	; select bank0
  3932     057D  00AF               	movwf	___fldiv@b+1
  3933     057E  0021               	movlb	1	; select bank1
  3934     057F  082D               	movf	my_log@x^(0+128),w
  3935     0580  0020               	movlb	0	; select bank0
  3936     0581  00AE               	movwf	___fldiv@b
  3937     0582  318C  24E0  3185   	fcall	___fldiv
  3938     0585  082D               	movf	?___fldiv+3,w
  3939     0586  0021               	movlb	1	; select bank1
  3940     0587  00B0               	movwf	(my_log@x+3)^(0+128)
  3941     0588  0020               	movlb	0	; select bank0
  3942     0589  082C               	movf	?___fldiv+2,w
  3943     058A  0021               	movlb	1	; select bank1
  3944     058B  00AF               	movwf	(my_log@x+2)^(0+128)
  3945     058C  0020               	movlb	0	; select bank0
  3946     058D  082B               	movf	?___fldiv+1,w
  3947     058E  0021               	movlb	1	; select bank1
  3948     058F  00AE               	movwf	(my_log@x+1)^(0+128)
  3949     0590  0020               	movlb	0	; select bank0
  3950     0591  082A               	movf	?___fldiv,w
  3951     0592  0021               	movlb	1	; select bank1
  3952     0593  00AD               	movwf	my_log@x^(0+128)
  3953                           
  3954                           ;custom_math.c: 13:         result += 1.0f;
  3955     0594  303F               	movlw	63
  3956     0595  0020               	movlb	0	; select bank0
  3957     0596  00C7               	movwf	___fladd@b+3
  3958     0597  3080               	movlw	128
  3959     0598  00C6               	movwf	___fladd@b+2
  3960     0599  3000               	movlw	0
  3961     059A  00C5               	movwf	___fladd@b+1
  3962     059B  3000               	movlw	0
  3963     059C  00C4               	movwf	___fladd@b
  3964     059D  0021               	movlb	1	; select bank1
  3965     059E  0838               	movf	(my_log@result+3)^(0+128),w
  3966     059F  0020               	movlb	0	; select bank0
  3967     05A0  00CB               	movwf	___fladd@a+3
  3968     05A1  0021               	movlb	1	; select bank1
  3969     05A2  0837               	movf	(my_log@result+2)^(0+128),w
  3970     05A3  0020               	movlb	0	; select bank0
  3971     05A4  00CA               	movwf	___fladd@a+2
  3972     05A5  0021               	movlb	1	; select bank1
  3973     05A6  0836               	movf	(my_log@result+1)^(0+128),w
  3974     05A7  0020               	movlb	0	; select bank0
  3975     05A8  00C9               	movwf	___fladd@a+1
  3976     05A9  0021               	movlb	1	; select bank1
  3977     05AA  0835               	movf	my_log@result^(0+128),w
  3978     05AB  0020               	movlb	0	; select bank0
  3979     05AC  00C8               	movwf	___fladd@a
  3980     05AD  318E  264F  3185   	fcall	___fladd
  3981     05B0  0847               	movf	?___fladd+3,w
  3982     05B1  0021               	movlb	1	; select bank1
  3983     05B2  00B8               	movwf	(my_log@result+3)^(0+128)
  3984     05B3  0020               	movlb	0	; select bank0
  3985     05B4  0846               	movf	?___fladd+2,w
  3986     05B5  0021               	movlb	1	; select bank1
  3987     05B6  00B7               	movwf	(my_log@result+2)^(0+128)
  3988     05B7  0020               	movlb	0	; select bank0
  3989     05B8  0845               	movf	?___fladd+1,w
  3990     05B9  0021               	movlb	1	; select bank1
  3991     05BA  00B6               	movwf	(my_log@result+1)^(0+128)
  3992     05BB  0020               	movlb	0	; select bank0
  3993     05BC  0844               	movf	?___fladd,w
  3994     05BD  0021               	movlb	1	; select bank1
  3995     05BE  2D4B               	goto	L1
  3996     05BF                     l3735:
  3997                           
  3998                           ;custom_math.c: 16:     x -= 1.0f;
  3999     05BF  303F               	movlw	63
  4000     05C0  00DB               	movwf	___flsub@a+3
  4001     05C1  3080               	movlw	128
  4002     05C2  00DA               	movwf	___flsub@a+2
  4003     05C3  3000               	movlw	0
  4004     05C4  00D9               	movwf	___flsub@a+1
  4005     05C5  3000               	movlw	0
  4006     05C6  00D8               	movwf	___flsub@a
  4007     05C7  0021               	movlb	1	; select bank1
  4008     05C8  0830               	movf	(my_log@x+3)^(0+128),w
  4009     05C9  0020               	movlb	0	; select bank0
  4010     05CA  00DF               	movwf	___flsub@b+3
  4011     05CB  0021               	movlb	1	; select bank1
  4012     05CC  082F               	movf	(my_log@x+2)^(0+128),w
  4013     05CD  0020               	movlb	0	; select bank0
  4014     05CE  00DE               	movwf	___flsub@b+2
  4015     05CF  0021               	movlb	1	; select bank1
  4016     05D0  082E               	movf	(my_log@x+1)^(0+128),w
  4017     05D1  0020               	movlb	0	; select bank0
  4018     05D2  00DD               	movwf	___flsub@b+1
  4019     05D3  0021               	movlb	1	; select bank1
  4020     05D4  082D               	movf	my_log@x^(0+128),w
  4021     05D5  0020               	movlb	0	; select bank0
  4022     05D6  00DC               	movwf	___flsub@b
  4023     05D7  3189  216B  3185   	fcall	___flsub
  4024     05DA  085B               	movf	?___flsub+3,w
  4025     05DB  0021               	movlb	1	; select bank1
  4026     05DC  00B0               	movwf	(my_log@x+3)^(0+128)
  4027     05DD  0020               	movlb	0	; select bank0
  4028     05DE  085A               	movf	?___flsub+2,w
  4029     05DF  0021               	movlb	1	; select bank1
  4030     05E0  00AF               	movwf	(my_log@x+2)^(0+128)
  4031     05E1  0020               	movlb	0	; select bank0
  4032     05E2  0859               	movf	?___flsub+1,w
  4033     05E3  0021               	movlb	1	; select bank1
  4034     05E4  00AE               	movwf	(my_log@x+1)^(0+128)
  4035     05E5  0020               	movlb	0	; select bank0
  4036     05E6  0858               	movf	?___flsub,w
  4037     05E7  0021               	movlb	1	; select bank1
  4038     05E8  00AD               	movwf	my_log@x^(0+128)
  4039                           
  4040                           ;custom_math.c: 19:     float term = x;
  4041     05E9  0830               	movf	(my_log@x+3)^(0+128),w
  4042     05EA  00C2               	movwf	(my_log@term+3)^(0+128)
  4043     05EB  082F               	movf	(my_log@x+2)^(0+128),w
  4044     05EC  00C1               	movwf	(my_log@term+2)^(0+128)
  4045     05ED  082E               	movf	(my_log@x+1)^(0+128),w
  4046     05EE  00C0               	movwf	(my_log@term+1)^(0+128)
  4047     05EF  082D               	movf	my_log@x^(0+128),w
  4048     05F0  00BF               	movwf	my_log@term^(0+128)
  4049                           
  4050                           ;custom_math.c: 20:     float sum = 0.0f;
  4051     05F1  3000               	movlw	0
  4052     05F2  00BC               	movwf	(my_log@sum+3)^(0+128)
  4053     05F3  3000               	movlw	0
  4054     05F4  00BB               	movwf	(my_log@sum+2)^(0+128)
  4055     05F5  3000               	movlw	0
  4056     05F6  00BA               	movwf	(my_log@sum+1)^(0+128)
  4057     05F7  3000               	movlw	0
  4058     05F8  00B9               	movwf	my_log@sum^(0+128)
  4059                           
  4060                           ;custom_math.c: 21:     int n = 1;
  4061     05F9  3001               	movlw	1
  4062     05FA  00BD               	movwf	my_log@n^(0+128)
  4063     05FB  3000               	movlw	0
  4064     05FC  00BE               	movwf	(my_log@n^(0+128)+1)
  4065     05FD                     l3751:	
  4066                           ;custom_math.c: 23:     while (term > 1e-7f || term < -1e-7f) {
  4067                           
  4068                           
  4069                           ;custom_math.c: 23:     while (term > 1e-7f || term < -1e-7f) {
  4070     05FD  3033               	movlw	51
  4071     05FE  0020               	movlb	0	; select bank0
  4072     05FF  00A3               	movwf	___flge@ff1+3
  4073     0600  30D6               	movlw	214
  4074     0601  00A2               	movwf	___flge@ff1+2
  4075     0602  30BF               	movlw	191
  4076     0603  00A1               	movwf	___flge@ff1+1
  4077     0604  3095               	movlw	149
  4078     0605  00A0               	movwf	___flge@ff1
  4079     0606  0021               	movlb	1	; select bank1
  4080     0607  0842               	movf	(my_log@term+3)^(0+128),w
  4081     0608  0020               	movlb	0	; select bank0
  4082     0609  00A7               	movwf	___flge@ff2+3
  4083     060A  0021               	movlb	1	; select bank1
  4084     060B  0841               	movf	(my_log@term+2)^(0+128),w
  4085     060C  0020               	movlb	0	; select bank0
  4086     060D  00A6               	movwf	___flge@ff2+2
  4087     060E  0021               	movlb	1	; select bank1
  4088     060F  0840               	movf	(my_log@term+1)^(0+128),w
  4089     0610  0020               	movlb	0	; select bank0
  4090     0611  00A5               	movwf	___flge@ff2+1
  4091     0612  0021               	movlb	1	; select bank1
  4092     0613  083F               	movf	my_log@term^(0+128),w
  4093     0614  0020               	movlb	0	; select bank0
  4094     0615  00A4               	movwf	___flge@ff2
  4095     0616  318B  232E  3185   	fcall	___flge
  4096     0619  1803               	btfsc	3,0
  4097     061A  2EE2               	goto	l3753
  4098     061B                     l3743:
  4099                           
  4100                           ;custom_math.c: 24:         sum += term;
  4101     061B  0021               	movlb	1	; select bank1
  4102     061C  0842               	movf	(my_log@term+3)^(0+128),w
  4103     061D  0020               	movlb	0	; select bank0
  4104     061E  00C7               	movwf	___fladd@b+3
  4105     061F  0021               	movlb	1	; select bank1
  4106     0620  0841               	movf	(my_log@term+2)^(0+128),w
  4107     0621  0020               	movlb	0	; select bank0
  4108     0622  00C6               	movwf	___fladd@b+2
  4109     0623  0021               	movlb	1	; select bank1
  4110     0624  0840               	movf	(my_log@term+1)^(0+128),w
  4111     0625  0020               	movlb	0	; select bank0
  4112     0626  00C5               	movwf	___fladd@b+1
  4113     0627  0021               	movlb	1	; select bank1
  4114     0628  083F               	movf	my_log@term^(0+128),w
  4115     0629  0020               	movlb	0	; select bank0
  4116     062A  00C4               	movwf	___fladd@b
  4117     062B  0021               	movlb	1	; select bank1
  4118     062C  083C               	movf	(my_log@sum+3)^(0+128),w
  4119     062D  0020               	movlb	0	; select bank0
  4120     062E  00CB               	movwf	___fladd@a+3
  4121     062F  0021               	movlb	1	; select bank1
  4122     0630  083B               	movf	(my_log@sum+2)^(0+128),w
  4123     0631  0020               	movlb	0	; select bank0
  4124     0632  00CA               	movwf	___fladd@a+2
  4125     0633  0021               	movlb	1	; select bank1
  4126     0634  083A               	movf	(my_log@sum+1)^(0+128),w
  4127     0635  0020               	movlb	0	; select bank0
  4128     0636  00C9               	movwf	___fladd@a+1
  4129     0637  0021               	movlb	1	; select bank1
  4130     0638  0839               	movf	my_log@sum^(0+128),w
  4131     0639  0020               	movlb	0	; select bank0
  4132     063A  00C8               	movwf	___fladd@a
  4133     063B  318E  264F  3185   	fcall	___fladd
  4134     063E  0847               	movf	?___fladd+3,w
  4135     063F  0021               	movlb	1	; select bank1
  4136     0640  00BC               	movwf	(my_log@sum+3)^(0+128)
  4137     0641  0020               	movlb	0	; select bank0
  4138     0642  0846               	movf	?___fladd+2,w
  4139     0643  0021               	movlb	1	; select bank1
  4140     0644  00BB               	movwf	(my_log@sum+2)^(0+128)
  4141     0645  0020               	movlb	0	; select bank0
  4142     0646  0845               	movf	?___fladd+1,w
  4143     0647  0021               	movlb	1	; select bank1
  4144     0648  00BA               	movwf	(my_log@sum+1)^(0+128)
  4145     0649  0020               	movlb	0	; select bank0
  4146     064A  0844               	movf	?___fladd,w
  4147     064B  0021               	movlb	1	; select bank1
  4148     064C  00B9               	movwf	my_log@sum^(0+128)
  4149                           
  4150                           ;custom_math.c: 25:         n++;
  4151     064D  3001               	movlw	1
  4152     064E  07BD               	addwf	my_log@n^(0+128),f
  4153     064F  3000               	movlw	0
  4154     0650  3DBE               	addwfc	(my_log@n+1)^(0+128),f
  4155                           
  4156                           ;custom_math.c: 26:         term *= -x * (n - 1) / n;
  4157     0651  083D               	movf	my_log@n^(0+128),w
  4158     0652  3EFF               	addlw	255
  4159     0653  00F3               	movwf	___xxtofl@val
  4160     0654  30FF               	movlw	255
  4161     0655  3D3E               	addwfc	(my_log@n+1)^(0+128),w
  4162     0656  00F4               	movwf	___xxtofl@val+1
  4163     0657  01F5               	clrf	___xxtofl@val+2
  4164     0658  1BF4               	btfsc	___xxtofl@val+1,7
  4165     0659  03F5               	decf	___xxtofl@val+2,f
  4166     065A  0875               	movf	___xxtofl@val+2,w
  4167     065B  00F6               	movwf	___xxtofl@val+3
  4168     065C  3001               	movlw	1
  4169     065D  318B  23A9  3185   	fcall	___xxtofl
  4170     0660  0876               	movf	?___xxtofl+3,w
  4171     0661  00DF               	movwf	___flmul@a+3
  4172     0662  0875               	movf	?___xxtofl+2,w
  4173     0663  00DE               	movwf	___flmul@a+2
  4174     0664  0874               	movf	?___xxtofl+1,w
  4175     0665  00DD               	movwf	___flmul@a+1
  4176     0666  0873               	movf	?___xxtofl,w
  4177     0667  00DC               	movwf	___flmul@a
  4178     0668  0021               	movlb	1	; select bank1
  4179     0669  0830               	movf	(my_log@x+3)^(0+128),w
  4180     066A  00F6               	movwf	___flneg@f1+3
  4181     066B  082F               	movf	(my_log@x+2)^(0+128),w
  4182     066C  00F5               	movwf	___flneg@f1+2
  4183     066D  082E               	movf	(my_log@x+1)^(0+128),w
  4184     066E  00F4               	movwf	___flneg@f1+1
  4185     066F  082D               	movf	my_log@x^(0+128),w
  4186     0670  00F3               	movwf	___flneg@f1
  4187     0671  3188  2088  3185   	fcall	___flneg
  4188     0674  0876               	movf	?___flneg+3,w
  4189     0675  0020               	movlb	0	; select bank0
  4190     0676  00DB               	movwf	___flmul@b+3
  4191     0677  0875               	movf	?___flneg+2,w
  4192     0678  00DA               	movwf	___flmul@b+2
  4193     0679  0874               	movf	?___flneg+1,w
  4194     067A  00D9               	movwf	___flmul@b+1
  4195     067B  0873               	movf	?___flneg,w
  4196     067C  00D8               	movwf	___flmul@b
  4197     067D  3180  203E  3185   	fcall	___flmul
  4198     0680  085B               	movf	?___flmul+3,w
  4199     0681  00B1               	movwf	___fldiv@b+3
  4200     0682  085A               	movf	?___flmul+2,w
  4201     0683  00B0               	movwf	___fldiv@b+2
  4202     0684  0859               	movf	?___flmul+1,w
  4203     0685  00AF               	movwf	___fldiv@b+1
  4204     0686  0858               	movf	?___flmul,w
  4205     0687  00AE               	movwf	___fldiv@b
  4206     0688  0021               	movlb	1	; select bank1
  4207     0689  083D               	movf	my_log@n^(0+128),w
  4208     068A  00F3               	movwf	___xxtofl@val
  4209     068B  083E               	movf	(my_log@n+1)^(0+128),w
  4210     068C  00F4               	movwf	___xxtofl@val+1
  4211     068D  0D89               	rlf	9,f
  4212     068E  3B89               	subwfb	9,f
  4213     068F  0989               	comf	9,f
  4214     0690  00F5               	movwf	___xxtofl@val+2
  4215     0691  00F6               	movwf	___xxtofl@val+3
  4216     0692  3001               	movlw	1
  4217     0693  318B  23A9  3185   	fcall	___xxtofl
  4218     0696  0876               	movf	?___xxtofl+3,w
  4219     0697  00AD               	movwf	___fldiv@a+3
  4220     0698  0875               	movf	?___xxtofl+2,w
  4221     0699  00AC               	movwf	___fldiv@a+2
  4222     069A  0874               	movf	?___xxtofl+1,w
  4223     069B  00AB               	movwf	___fldiv@a+1
  4224     069C  0873               	movf	?___xxtofl,w
  4225     069D  00AA               	movwf	___fldiv@a
  4226     069E  318C  24E0  3185   	fcall	___fldiv
  4227     06A1  082D               	movf	?___fldiv+3,w
  4228     06A2  0021               	movlb	1	; select bank1
  4229     06A3  00B4               	movwf	(_my_log$1712+3)^(0+128)
  4230     06A4  0020               	movlb	0	; select bank0
  4231     06A5  082C               	movf	?___fldiv+2,w
  4232     06A6  0021               	movlb	1	; select bank1
  4233     06A7  00B3               	movwf	(_my_log$1712+2)^(0+128)
  4234     06A8  0020               	movlb	0	; select bank0
  4235     06A9  082B               	movf	?___fldiv+1,w
  4236     06AA  0021               	movlb	1	; select bank1
  4237     06AB  00B2               	movwf	(_my_log$1712+1)^(0+128)
  4238     06AC  0020               	movlb	0	; select bank0
  4239     06AD  082A               	movf	?___fldiv,w
  4240     06AE  0021               	movlb	1	; select bank1
  4241     06AF  00B1               	movwf	_my_log$1712^(0+128)
  4242                           
  4243                           ;custom_math.c: 26:         term *= -x * (n - 1) / n;
  4244     06B0  0834               	movf	(_my_log$1712+3)^(0+128),w
  4245     06B1  0020               	movlb	0	; select bank0
  4246     06B2  00DB               	movwf	___flmul@b+3
  4247     06B3  0021               	movlb	1	; select bank1
  4248     06B4  0833               	movf	(_my_log$1712+2)^(0+128),w
  4249     06B5  0020               	movlb	0	; select bank0
  4250     06B6  00DA               	movwf	___flmul@b+2
  4251     06B7  0021               	movlb	1	; select bank1
  4252     06B8  0832               	movf	(_my_log$1712+1)^(0+128),w
  4253     06B9  0020               	movlb	0	; select bank0
  4254     06BA  00D9               	movwf	___flmul@b+1
  4255     06BB  0021               	movlb	1	; select bank1
  4256     06BC  0831               	movf	_my_log$1712^(0+128),w
  4257     06BD  0020               	movlb	0	; select bank0
  4258     06BE  00D8               	movwf	___flmul@b
  4259     06BF  0021               	movlb	1	; select bank1
  4260     06C0  0842               	movf	(my_log@term+3)^(0+128),w
  4261     06C1  0020               	movlb	0	; select bank0
  4262     06C2  00DF               	movwf	___flmul@a+3
  4263     06C3  0021               	movlb	1	; select bank1
  4264     06C4  0841               	movf	(my_log@term+2)^(0+128),w
  4265     06C5  0020               	movlb	0	; select bank0
  4266     06C6  00DE               	movwf	___flmul@a+2
  4267     06C7  0021               	movlb	1	; select bank1
  4268     06C8  0840               	movf	(my_log@term+1)^(0+128),w
  4269     06C9  0020               	movlb	0	; select bank0
  4270     06CA  00DD               	movwf	___flmul@a+1
  4271     06CB  0021               	movlb	1	; select bank1
  4272     06CC  083F               	movf	my_log@term^(0+128),w
  4273     06CD  0020               	movlb	0	; select bank0
  4274     06CE  00DC               	movwf	___flmul@a
  4275     06CF  3180  203E  3185   	fcall	___flmul
  4276     06D2  085B               	movf	?___flmul+3,w
  4277     06D3  0021               	movlb	1	; select bank1
  4278     06D4  00C2               	movwf	(my_log@term+3)^(0+128)
  4279     06D5  0020               	movlb	0	; select bank0
  4280     06D6  085A               	movf	?___flmul+2,w
  4281     06D7  0021               	movlb	1	; select bank1
  4282     06D8  00C1               	movwf	(my_log@term+2)^(0+128)
  4283     06D9  0020               	movlb	0	; select bank0
  4284     06DA  0859               	movf	?___flmul+1,w
  4285     06DB  0021               	movlb	1	; select bank1
  4286     06DC  00C0               	movwf	(my_log@term+1)^(0+128)
  4287     06DD  0020               	movlb	0	; select bank0
  4288     06DE  0858               	movf	?___flmul,w
  4289     06DF  0021               	movlb	1	; select bank1
  4290     06E0  00BF               	movwf	my_log@term^(0+128)
  4291     06E1  2DFD               	goto	l3751
  4292     06E2                     l3753:
  4293     06E2  0021               	movlb	1	; select bank1
  4294     06E3  0842               	movf	(my_log@term+3)^(0+128),w
  4295     06E4  0020               	movlb	0	; select bank0
  4296     06E5  00A3               	movwf	___flge@ff1+3
  4297     06E6  0021               	movlb	1	; select bank1
  4298     06E7  0841               	movf	(my_log@term+2)^(0+128),w
  4299     06E8  0020               	movlb	0	; select bank0
  4300     06E9  00A2               	movwf	___flge@ff1+2
  4301     06EA  0021               	movlb	1	; select bank1
  4302     06EB  0840               	movf	(my_log@term+1)^(0+128),w
  4303     06EC  0020               	movlb	0	; select bank0
  4304     06ED  00A1               	movwf	___flge@ff1+1
  4305     06EE  0021               	movlb	1	; select bank1
  4306     06EF  083F               	movf	my_log@term^(0+128),w
  4307     06F0  0020               	movlb	0	; select bank0
  4308     06F1  00A0               	movwf	___flge@ff1
  4309     06F2  30B3               	movlw	179
  4310     06F3  00A7               	movwf	___flge@ff2+3
  4311     06F4  30D6               	movlw	214
  4312     06F5  00A6               	movwf	___flge@ff2+2
  4313     06F6  30BF               	movlw	191
  4314     06F7  00A5               	movwf	___flge@ff2+1
  4315     06F8  3095               	movlw	149
  4316     06F9  00A4               	movwf	___flge@ff2
  4317     06FA  318B  232E  3185   	fcall	___flge
  4318     06FD  1C03               	btfss	3,0
  4319     06FE  2E1B               	goto	l3743
  4320                           
  4321                           ;custom_math.c: 29:     return result + sum;
  4322     06FF  0021               	movlb	1	; select bank1
  4323     0700  083C               	movf	(my_log@sum+3)^(0+128),w
  4324     0701  0020               	movlb	0	; select bank0
  4325     0702  00C7               	movwf	___fladd@b+3
  4326     0703  0021               	movlb	1	; select bank1
  4327     0704  083B               	movf	(my_log@sum+2)^(0+128),w
  4328     0705  0020               	movlb	0	; select bank0
  4329     0706  00C6               	movwf	___fladd@b+2
  4330     0707  0021               	movlb	1	; select bank1
  4331     0708  083A               	movf	(my_log@sum+1)^(0+128),w
  4332     0709  0020               	movlb	0	; select bank0
  4333     070A  00C5               	movwf	___fladd@b+1
  4334     070B  0021               	movlb	1	; select bank1
  4335     070C  0839               	movf	my_log@sum^(0+128),w
  4336     070D  0020               	movlb	0	; select bank0
  4337     070E  00C4               	movwf	___fladd@b
  4338     070F  0021               	movlb	1	; select bank1
  4339     0710  0838               	movf	(my_log@result+3)^(0+128),w
  4340     0711  0020               	movlb	0	; select bank0
  4341     0712  00CB               	movwf	___fladd@a+3
  4342     0713  0021               	movlb	1	; select bank1
  4343     0714  0837               	movf	(my_log@result+2)^(0+128),w
  4344     0715  0020               	movlb	0	; select bank0
  4345     0716  00CA               	movwf	___fladd@a+2
  4346     0717  0021               	movlb	1	; select bank1
  4347     0718  0836               	movf	(my_log@result+1)^(0+128),w
  4348     0719  0020               	movlb	0	; select bank0
  4349     071A  00C9               	movwf	___fladd@a+1
  4350     071B  0021               	movlb	1	; select bank1
  4351     071C  0835               	movf	my_log@result^(0+128),w
  4352     071D  0020               	movlb	0	; select bank0
  4353     071E  00C8               	movwf	___fladd@a
  4354     071F  318E  264F         	fcall	___fladd
  4355     0721  0847               	movf	?___fladd+3,w
  4356     0722  0021               	movlb	1	; select bank1
  4357     0723  00B0               	movwf	(?_my_log+3)^(0+128)
  4358     0724  0020               	movlb	0	; select bank0
  4359     0725  0846               	movf	?___fladd+2,w
  4360     0726  0021               	movlb	1	; select bank1
  4361     0727  00AF               	movwf	(?_my_log+2)^(0+128)
  4362     0728  0020               	movlb	0	; select bank0
  4363     0729  0845               	movf	?___fladd+1,w
  4364     072A  0021               	movlb	1	; select bank1
  4365     072B  00AE               	movwf	(?_my_log+1)^(0+128)
  4366     072C  0020               	movlb	0	; select bank0
  4367     072D  0844               	movf	?___fladd,w
  4368     072E  0021               	movlb	1	; select bank1
  4369     072F  00AD               	movwf	?_my_log^(0+128)
  4370     0730  0008               	return
  4371     0731                     __end_of_my_log:
  4372                           
  4373                           	psect	text7
  4374     0BA9                     __ptext7:	
  4375 ;; *************** function ___xxtofl *****************
  4376 ;; Defined at:
  4377 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\xxtofl.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;  sign            1    wreg     unsigned char 
  4380 ;;  val             4    3[COMMON] long 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  sign            1    4[BANK0 ] unsigned char 
  4383 ;;  arg             4    6[BANK0 ] unsigned long 
  4384 ;;  exp             1    5[BANK0 ] unsigned char 
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  4    3[COMMON] unsigned char 
  4387 ;; Registers used:
  4388 ;;		wreg, status,2, status,0
  4389 ;; Tracked objects:
  4390 ;;		On entry : 1C/2
  4391 ;;		On exit  : 1F/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4394 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4395 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4396 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4397 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4398 ;;Total ram usage:       14 bytes
  4399 ;; Hardware stack levels used: 1
  4400 ;; Hardware stack levels required when called: 4
  4401 ;; This function calls:
  4402 ;;		Nothing
  4403 ;; This function is called by:
  4404 ;;		__ReadSensor
  4405 ;;		_my_log
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409     0BA9                     ___xxtofl:	
  4410                           ;psect for function ___xxtofl
  4411                           
  4412                           
  4413                           ;incstack = 0
  4414                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  4415                           ;___xxtofl@sign stored from wreg
  4416     0BA9  0020               	movlb	0	; select bank0
  4417     0BAA  00A4               	movwf	___xxtofl@sign
  4418     0BAB  0824               	movf	___xxtofl@sign,w
  4419     0BAC  1D03               	btfss	3,2
  4420     0BAD  1FF6               	btfss	___xxtofl@val+3,7
  4421     0BAE  2BBF               	goto	l3675
  4422     0BAF  0973               	comf	___xxtofl@val,w
  4423     0BB0  00A6               	movwf	___xxtofl@arg
  4424     0BB1  0974               	comf	___xxtofl@val+1,w
  4425     0BB2  00A7               	movwf	___xxtofl@arg+1
  4426     0BB3  0975               	comf	___xxtofl@val+2,w
  4427     0BB4  00A8               	movwf	___xxtofl@arg+2
  4428     0BB5  0976               	comf	___xxtofl@val+3,w
  4429     0BB6  00A9               	movwf	___xxtofl@arg+3
  4430     0BB7  0AA6               	incf	___xxtofl@arg,f
  4431     0BB8  1903               	skipnz
  4432     0BB9  0AA7               	incf	___xxtofl@arg+1,f
  4433     0BBA  1903               	skipnz
  4434     0BBB  0AA8               	incf	___xxtofl@arg+2,f
  4435     0BBC  1903               	skipnz
  4436     0BBD  0AA9               	incf	___xxtofl@arg+3,f
  4437     0BBE  2BC7               	goto	l1154
  4438     0BBF                     l3675:
  4439     0BBF  0876               	movf	___xxtofl@val+3,w
  4440     0BC0  00A9               	movwf	___xxtofl@arg+3
  4441     0BC1  0875               	movf	___xxtofl@val+2,w
  4442     0BC2  00A8               	movwf	___xxtofl@arg+2
  4443     0BC3  0874               	movf	___xxtofl@val+1,w
  4444     0BC4  00A7               	movwf	___xxtofl@arg+1
  4445     0BC5  0873               	movf	___xxtofl@val,w
  4446     0BC6  00A6               	movwf	___xxtofl@arg
  4447     0BC7                     l1154:
  4448     0BC7  0876               	movf	___xxtofl@val+3,w
  4449     0BC8  0475               	iorwf	___xxtofl@val+2,w
  4450     0BC9  0474               	iorwf	___xxtofl@val+1,w
  4451     0BCA  0473               	iorwf	___xxtofl@val,w
  4452     0BCB  1D03               	skipz
  4453     0BCC  2BD6               	goto	l3681
  4454     0BCD  3000               	movlw	0
  4455     0BCE  00F6               	movwf	?___xxtofl+3
  4456     0BCF  3000               	movlw	0
  4457     0BD0  00F5               	movwf	?___xxtofl+2
  4458     0BD1  3000               	movlw	0
  4459     0BD2  00F4               	movwf	?___xxtofl+1
  4460     0BD3  3000               	movlw	0
  4461     0BD4  00F3               	movwf	?___xxtofl
  4462     0BD5  0008               	return
  4463     0BD6                     l3681:
  4464     0BD6  3096               	movlw	150
  4465     0BD7  00A5               	movwf	___xxtofl@exp
  4466     0BD8                     l3685:
  4467     0BD8  30FE               	movlw	254
  4468     0BD9  0529               	andwf	___xxtofl@arg+3,w
  4469     0BDA  1903               	btfsc	3,2
  4470     0BDB  2BFB               	goto	l1160
  4471     0BDC  3001               	movlw	1
  4472     0BDD  00A0               	movwf	??___xxtofl
  4473     0BDE  0820               	movf	??___xxtofl,w
  4474     0BDF  07A5               	addwf	___xxtofl@exp,f
  4475     0BE0  3001               	movlw	1
  4476     0BE1                     u4825:
  4477     0BE1  36A9               	lsrf	___xxtofl@arg+3,f
  4478     0BE2  0CA8               	rrf	___xxtofl@arg+2,f
  4479     0BE3  0CA7               	rrf	___xxtofl@arg+1,f
  4480     0BE4  0CA6               	rrf	___xxtofl@arg,f
  4481     0BE5  0B89               	decfsz	9,f
  4482     0BE6  2BE1               	goto	u4825
  4483     0BE7  2BD8               	goto	l3685
  4484     0BE8                     l3687:
  4485     0BE8  3001               	movlw	1
  4486     0BE9  00A0               	movwf	??___xxtofl
  4487     0BEA  0820               	movf	??___xxtofl,w
  4488     0BEB  07A5               	addwf	___xxtofl@exp,f
  4489     0BEC  3001               	movlw	1
  4490     0BED  07A6               	addwf	___xxtofl@arg,f
  4491     0BEE  3000               	movlw	0
  4492     0BEF  3DA7               	addwfc	___xxtofl@arg+1,f
  4493     0BF0  3000               	movlw	0
  4494     0BF1  3DA8               	addwfc	___xxtofl@arg+2,f
  4495     0BF2  3000               	movlw	0
  4496     0BF3  3DA9               	addwfc	___xxtofl@arg+3,f
  4497     0BF4  3001               	movlw	1
  4498     0BF5                     u4845:
  4499     0BF5  36A9               	lsrf	___xxtofl@arg+3,f
  4500     0BF6  0CA8               	rrf	___xxtofl@arg+2,f
  4501     0BF7  0CA7               	rrf	___xxtofl@arg+1,f
  4502     0BF8  0CA6               	rrf	___xxtofl@arg,f
  4503     0BF9  0B89               	decfsz	9,f
  4504     0BFA  2BF5               	goto	u4845
  4505     0BFB                     l1160:
  4506     0BFB  30FF               	movlw	255
  4507     0BFC  0529               	andwf	___xxtofl@arg+3,w
  4508     0BFD  1903               	btfsc	3,2
  4509     0BFE  2C0D               	goto	l3695
  4510     0BFF  2BE8               	goto	l3687
  4511     0C00                     l3697:
  4512     0C00  3002               	movlw	2
  4513     0C01  0225               	subwf	___xxtofl@exp,w
  4514     0C02  1C03               	btfss	3,0
  4515     0C03  2C0F               	goto	l1167
  4516     0C04  3001               	movlw	1
  4517     0C05  02A5               	subwf	___xxtofl@exp,f
  4518     0C06  3001               	movlw	1
  4519     0C07                     u4865:
  4520     0C07  35A6               	lslf	___xxtofl@arg,f
  4521     0C08  0DA7               	rlf	___xxtofl@arg+1,f
  4522     0C09  0DA8               	rlf	___xxtofl@arg+2,f
  4523     0C0A  0DA9               	rlf	___xxtofl@arg+3,f
  4524     0C0B  0B89               	decfsz	9,f
  4525     0C0C  2C07               	goto	u4865
  4526     0C0D                     l3695:
  4527     0C0D  1FA8               	btfss	___xxtofl@arg+2,7
  4528     0C0E  2C00               	goto	l3697
  4529     0C0F                     l1167:
  4530     0C0F  1825               	btfsc	___xxtofl@exp,0
  4531     0C10  2C19               	goto	l1168
  4532     0C11  30FF               	movlw	255
  4533     0C12  05A6               	andwf	___xxtofl@arg,f
  4534     0C13  30FF               	movlw	255
  4535     0C14  05A7               	andwf	___xxtofl@arg+1,f
  4536     0C15  307F               	movlw	127
  4537     0C16  05A8               	andwf	___xxtofl@arg+2,f
  4538     0C17  30FF               	movlw	255
  4539     0C18  05A9               	andwf	___xxtofl@arg+3,f
  4540     0C19                     l1168:
  4541     0C19  1003               	clrc
  4542     0C1A  0CA5               	rrf	___xxtofl@exp,f
  4543     0C1B  0825               	movf	___xxtofl@exp,w
  4544     0C1C  00A0               	movwf	??___xxtofl
  4545     0C1D  01A1               	clrf	??___xxtofl+1
  4546     0C1E  01A2               	clrf	??___xxtofl+2
  4547     0C1F  01A3               	clrf	??___xxtofl+3
  4548     0C20  3018               	movlw	24
  4549     0C21                     u4905:
  4550     0C21  35A0               	lslf	??___xxtofl,f
  4551     0C22  0DA1               	rlf	??___xxtofl+1,f
  4552     0C23  0DA2               	rlf	??___xxtofl+2,f
  4553     0C24  0DA3               	rlf	??___xxtofl+3,f
  4554     0C25  0B89               	decfsz	9,f
  4555     0C26  2C21               	goto	u4905
  4556     0C27  0820               	movf	??___xxtofl,w
  4557     0C28  04A6               	iorwf	___xxtofl@arg,f
  4558     0C29  0821               	movf	??___xxtofl+1,w
  4559     0C2A  04A7               	iorwf	___xxtofl@arg+1,f
  4560     0C2B  0822               	movf	??___xxtofl+2,w
  4561     0C2C  04A8               	iorwf	___xxtofl@arg+2,f
  4562     0C2D  0823               	movf	??___xxtofl+3,w
  4563     0C2E  04A9               	iorwf	___xxtofl@arg+3,f
  4564     0C2F  0824               	movf	___xxtofl@sign,w
  4565     0C30  1D03               	btfss	3,2
  4566     0C31  1FF6               	btfss	___xxtofl@val+3,7
  4567     0C32  2C34               	goto	l3709
  4568     0C33  17A9               	bsf	___xxtofl@arg+3,7
  4569     0C34                     l3709:
  4570     0C34  0829               	movf	___xxtofl@arg+3,w
  4571     0C35  00F6               	movwf	?___xxtofl+3
  4572     0C36  0828               	movf	___xxtofl@arg+2,w
  4573     0C37  00F5               	movwf	?___xxtofl+2
  4574     0C38  0827               	movf	___xxtofl@arg+1,w
  4575     0C39  00F4               	movwf	?___xxtofl+1
  4576     0C3A  0826               	movf	___xxtofl@arg,w
  4577     0C3B  00F3               	movwf	?___xxtofl
  4578     0C3C  0008               	return
  4579     0C3D                     __end_of___xxtofl:
  4580                           
  4581                           	psect	text8
  4582     096B                     __ptext8:	
  4583 ;; *************** function ___flsub *****************
  4584 ;; Defined at:
  4585 ;;		line 242 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\sprcadd.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;  a               4   56[BANK0 ] unsigned char 
  4588 ;;  b               4   60[BANK0 ] unsigned char 
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;		None
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  4   56[BANK0 ] unsigned char 
  4593 ;; Registers used:
  4594 ;;		wreg, status,2, status,0, pclath, cstack
  4595 ;; Tracked objects:
  4596 ;;		On entry : 1F/0
  4597 ;;		On exit  : 1F/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4600 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4603 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4604 ;;Total ram usage:        8 bytes
  4605 ;; Hardware stack levels used: 1
  4606 ;; Hardware stack levels required when called: 5
  4607 ;; This function calls:
  4608 ;;		___fladd
  4609 ;; This function is called by:
  4610 ;;		_my_log
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614     096B                     ___flsub:	
  4615                           ;psect for function ___flsub
  4616                           
  4617                           
  4618                           ;incstack = 0
  4619                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
  4620     096B  3080               	movlw	128
  4621     096C  06DB               	xorwf	___flsub@a+3,f
  4622     096D  085F               	movf	___flsub@b+3,w
  4623     096E  00C7               	movwf	___fladd@b+3
  4624     096F  085E               	movf	___flsub@b+2,w
  4625     0970  00C6               	movwf	___fladd@b+2
  4626     0971  085D               	movf	___flsub@b+1,w
  4627     0972  00C5               	movwf	___fladd@b+1
  4628     0973  085C               	movf	___flsub@b,w
  4629     0974  00C4               	movwf	___fladd@b
  4630     0975  085B               	movf	___flsub@a+3,w
  4631     0976  00CB               	movwf	___fladd@a+3
  4632     0977  085A               	movf	___flsub@a+2,w
  4633     0978  00CA               	movwf	___fladd@a+2
  4634     0979  0859               	movf	___flsub@a+1,w
  4635     097A  00C9               	movwf	___fladd@a+1
  4636     097B  0858               	movf	___flsub@a,w
  4637     097C  00C8               	movwf	___fladd@a
  4638     097D  318E  264F         	fcall	___fladd
  4639     097F  0847               	movf	?___fladd+3,w
  4640     0980  00DB               	movwf	?___flsub+3
  4641     0981  0846               	movf	?___fladd+2,w
  4642     0982  00DA               	movwf	?___flsub+2
  4643     0983  0845               	movf	?___fladd+1,w
  4644     0984  00D9               	movwf	?___flsub+1
  4645     0985  0844               	movf	?___fladd,w
  4646     0986  00D8               	movwf	?___flsub
  4647     0987  0008               	return
  4648     0988                     __end_of___flsub:
  4649                           
  4650                           	psect	text9
  4651     0E4F                     __ptext9:	
  4652 ;; *************** function ___fladd *****************
  4653 ;; Defined at:
  4654 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\sprcadd.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;  b               4   36[BANK0 ] unsigned char 
  4657 ;;  a               4   40[BANK0 ] unsigned char 
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;  grs             1   55[BANK0 ] unsigned char 
  4660 ;;  bexp            1   54[BANK0 ] unsigned char 
  4661 ;;  aexp            1   53[BANK0 ] unsigned char 
  4662 ;;  signs           1   52[BANK0 ] unsigned char 
  4663 ;; Return value:  Size  Location     Type
  4664 ;;                  4   36[BANK0 ] unsigned char 
  4665 ;; Registers used:
  4666 ;;		wreg, status,2, status,0
  4667 ;; Tracked objects:
  4668 ;;		On entry : 1F/0
  4669 ;;		On exit  : 1F/0
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4672 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4673 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;Total ram usage:       20 bytes
  4677 ;; Hardware stack levels used: 1
  4678 ;; Hardware stack levels required when called: 4
  4679 ;; This function calls:
  4680 ;;		Nothing
  4681 ;; This function is called by:
  4682 ;;		__ReadSensor
  4683 ;;		_my_log
  4684 ;;		___flsub
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688     0E4F                     ___fladd:	
  4689                           ;psect for function ___fladd
  4690                           
  4691                           
  4692                           ;incstack = 0
  4693                           ; Regs used in ___fladd: [wreg+status,2+status,0]
  4694     0E4F  0847               	movf	___fladd@b+3,w
  4695     0E50  3980               	andlw	128
  4696     0E51  00D4               	movwf	___fladd@signs
  4697     0E52  3547               	lslf	___fladd@b+3,w
  4698     0E53  00D6               	movwf	___fladd@bexp
  4699     0E54  1BC6               	btfsc	___fladd@b+2,7
  4700     0E55  1456               	bsf	___fladd@bexp,0
  4701     0E56  0856               	movf	___fladd@bexp,w
  4702     0E57  1903               	btfsc	3,2
  4703     0E58  2E67               	goto	l3165
  4704     0E59  0A56               	incf	___fladd@bexp,w
  4705     0E5A  1D03               	btfss	3,2
  4706     0E5B  2E64               	goto	l3161
  4707     0E5C  3000               	movlw	0
  4708     0E5D  00C7               	movwf	___fladd@b+3
  4709     0E5E  3000               	movlw	0
  4710     0E5F  00C6               	movwf	___fladd@b+2
  4711     0E60  3000               	movlw	0
  4712     0E61  00C5               	movwf	___fladd@b+1
  4713     0E62  3000               	movlw	0
  4714     0E63  00C4               	movwf	___fladd@b
  4715     0E64                     l3161:
  4716     0E64  17C6               	bsf	___fladd@b+2,7
  4717     0E65  01C7               	clrf	___fladd@b+3
  4718     0E66  2E6F               	goto	l3167
  4719     0E67                     l3165:
  4720     0E67  3000               	movlw	0
  4721     0E68  00C7               	movwf	___fladd@b+3
  4722     0E69  3000               	movlw	0
  4723     0E6A  00C6               	movwf	___fladd@b+2
  4724     0E6B  3000               	movlw	0
  4725     0E6C  00C5               	movwf	___fladd@b+1
  4726     0E6D  3000               	movlw	0
  4727     0E6E  00C4               	movwf	___fladd@b
  4728     0E6F                     l3167:
  4729     0E6F  084B               	movf	___fladd@a+3,w
  4730     0E70  3980               	andlw	128
  4731     0E71  00D5               	movwf	___fladd@aexp
  4732     0E72  0855               	movf	___fladd@aexp,w
  4733     0E73  0654               	xorwf	___fladd@signs,w
  4734     0E74  1D03               	btfss	3,2
  4735     0E75  1754               	bsf	___fladd@signs,6
  4736     0E76  354B               	lslf	___fladd@a+3,w
  4737     0E77  00D5               	movwf	___fladd@aexp
  4738     0E78  1BCA               	btfsc	___fladd@a+2,7
  4739     0E79  1455               	bsf	___fladd@aexp,0
  4740     0E7A  0855               	movf	___fladd@aexp,w
  4741     0E7B  1903               	btfsc	3,2
  4742     0E7C  2E8B               	goto	l3189
  4743     0E7D  0A55               	incf	___fladd@aexp,w
  4744     0E7E  1D03               	btfss	3,2
  4745     0E7F  2E88               	goto	l3185
  4746     0E80  3000               	movlw	0
  4747     0E81  00CB               	movwf	___fladd@a+3
  4748     0E82  3000               	movlw	0
  4749     0E83  00CA               	movwf	___fladd@a+2
  4750     0E84  3000               	movlw	0
  4751     0E85  00C9               	movwf	___fladd@a+1
  4752     0E86  3000               	movlw	0
  4753     0E87  00C8               	movwf	___fladd@a
  4754     0E88                     l3185:
  4755     0E88  17CA               	bsf	___fladd@a+2,7
  4756     0E89  01CB               	clrf	___fladd@a+3
  4757     0E8A  2E93               	goto	l1014
  4758     0E8B                     l3189:
  4759     0E8B  3000               	movlw	0
  4760     0E8C  00CB               	movwf	___fladd@a+3
  4761     0E8D  3000               	movlw	0
  4762     0E8E  00CA               	movwf	___fladd@a+2
  4763     0E8F  3000               	movlw	0
  4764     0E90  00C9               	movwf	___fladd@a+1
  4765     0E91  3000               	movlw	0
  4766     0E92  00C8               	movwf	___fladd@a
  4767     0E93                     l1014:
  4768     0E93  0856               	movf	___fladd@bexp,w
  4769     0E94  0255               	subwf	___fladd@aexp,w
  4770     0E95  1803               	skipnc
  4771     0E96  2EBB               	goto	l3225
  4772     0E97  1F54               	btfss	___fladd@signs,6
  4773     0E98  2E9D               	goto	l3195
  4774     0E99  3080               	movlw	128
  4775     0E9A  00CC               	movwf	??___fladd
  4776     0E9B  084C               	movf	??___fladd,w
  4777     0E9C  06D4               	xorwf	___fladd@signs,f
  4778     0E9D                     l3195:
  4779     0E9D  0856               	movf	___fladd@bexp,w
  4780     0E9E  00D7               	movwf	___fladd@grs
  4781     0E9F  0855               	movf	___fladd@aexp,w
  4782     0EA0  00D6               	movwf	___fladd@bexp
  4783     0EA1  0857               	movf	___fladd@grs,w
  4784     0EA2  00D5               	movwf	___fladd@aexp
  4785     0EA3  0844               	movf	___fladd@b,w
  4786     0EA4  00D7               	movwf	___fladd@grs
  4787     0EA5  0848               	movf	___fladd@a,w
  4788     0EA6  00C4               	movwf	___fladd@b
  4789     0EA7  0857               	movf	___fladd@grs,w
  4790     0EA8  00C8               	movwf	___fladd@a
  4791     0EA9  0845               	movf	___fladd@b+1,w
  4792     0EAA  00D7               	movwf	___fladd@grs
  4793     0EAB  0849               	movf	___fladd@a+1,w
  4794     0EAC  00C5               	movwf	___fladd@b+1
  4795     0EAD  0857               	movf	___fladd@grs,w
  4796     0EAE  00C9               	movwf	___fladd@a+1
  4797     0EAF  0846               	movf	___fladd@b+2,w
  4798     0EB0  00D7               	movwf	___fladd@grs
  4799     0EB1  084A               	movf	___fladd@a+2,w
  4800     0EB2  00C6               	movwf	___fladd@b+2
  4801     0EB3  0857               	movf	___fladd@grs,w
  4802     0EB4  00CA               	movwf	___fladd@a+2
  4803     0EB5  0847               	movf	___fladd@b+3,w
  4804     0EB6  00D7               	movwf	___fladd@grs
  4805     0EB7  084B               	movf	___fladd@a+3,w
  4806     0EB8  00C7               	movwf	___fladd@b+3
  4807     0EB9  0857               	movf	___fladd@grs,w
  4808     0EBA  00CB               	movwf	___fladd@a+3
  4809     0EBB                     l3225:
  4810     0EBB  01D7               	clrf	___fladd@grs
  4811     0EBC  0855               	movf	___fladd@aexp,w
  4812     0EBD  00CC               	movwf	??___fladd
  4813     0EBE  01CD               	clrf	??___fladd+1
  4814     0EBF  084D               	movf	??___fladd+1,w
  4815     0EC0  00CF               	movwf	??___fladd+3
  4816     0EC1  0856               	movf	___fladd@bexp,w
  4817     0EC2  024C               	subwf	??___fladd,w
  4818     0EC3  00CE               	movwf	??___fladd+2
  4819     0EC4  1C03               	skipc
  4820     0EC5  03CF               	decf	??___fladd+3,f
  4821     0EC6  084F               	movf	??___fladd+3,w
  4822     0EC7  3A80               	xorlw	128
  4823     0EC8  00D0               	movwf	??___fladd+4
  4824     0EC9  3080               	movlw	128
  4825     0ECA  0250               	subwf	??___fladd+4,w
  4826     0ECB  1D03               	skipz
  4827     0ECC  2ECF               	goto	u3825
  4828     0ECD  301A               	movlw	26
  4829     0ECE  024E               	subwf	??___fladd+2,w
  4830     0ECF                     u3825:
  4831     0ECF  1C03               	skipc
  4832     0ED0  2EFD               	goto	l3243
  4833     0ED1  0020               	movlb	0	; select bank0
  4834     0ED2  0847               	movf	___fladd@b+3,w
  4835     0ED3  0446               	iorwf	___fladd@b+2,w
  4836     0ED4  0445               	iorwf	___fladd@b+1,w
  4837     0ED5  0444               	iorwf	___fladd@b,w
  4838     0ED6  1903               	btfsc	3,2
  4839     0ED7  2EDA               	goto	u3830
  4840     0ED8  3001               	movlw	1
  4841     0ED9  2EDB               	goto	u3840
  4842     0EDA                     u3830:
  4843     0EDA  3000               	movlw	0
  4844     0EDB                     u3840:
  4845     0EDB  00D7               	movwf	___fladd@grs
  4846     0EDC  3000               	movlw	0
  4847     0EDD  00C7               	movwf	___fladd@b+3
  4848     0EDE  3000               	movlw	0
  4849     0EDF  00C6               	movwf	___fladd@b+2
  4850     0EE0  3000               	movlw	0
  4851     0EE1  00C5               	movwf	___fladd@b+1
  4852     0EE2  3000               	movlw	0
  4853     0EE3  00C4               	movwf	___fladd@b
  4854     0EE4  0855               	movf	___fladd@aexp,w
  4855     0EE5  00D6               	movwf	___fladd@bexp
  4856     0EE6  2F02               	goto	l1018
  4857     0EE7                     l1020:
  4858     0EE7  1C57               	btfss	___fladd@grs,0
  4859     0EE8  2EED               	goto	l3233
  4860     0EE9  3657               	lsrf	___fladd@grs,w
  4861     0EEA  3801               	iorlw	1
  4862     0EEB  00D7               	movwf	___fladd@grs
  4863     0EEC  2EEF               	goto	l3235
  4864     0EED                     l3233:
  4865     0EED  1003               	clrc
  4866     0EEE  0CD7               	rrf	___fladd@grs,f
  4867     0EEF                     l3235:
  4868     0EEF  1844               	btfsc	___fladd@b,0
  4869     0EF0  17D7               	bsf	___fladd@grs,7
  4870     0EF1  3001               	movlw	1
  4871     0EF2  00CC               	movwf	??___fladd
  4872     0EF3                     u3875:
  4873     0EF3  37C7               	asrf	___fladd@b+3,f
  4874     0EF4  0CC6               	rrf	___fladd@b+2,f
  4875     0EF5  0CC5               	rrf	___fladd@b+1,f
  4876     0EF6  0CC4               	rrf	___fladd@b,f
  4877     0EF7  0BCC               	decfsz	??___fladd& (0+127),f
  4878     0EF8  2EF3               	goto	u3875
  4879     0EF9  3001               	movlw	1
  4880     0EFA  00CC               	movwf	??___fladd
  4881     0EFB  084C               	movf	??___fladd,w
  4882     0EFC  07D6               	addwf	___fladd@bexp,f
  4883     0EFD                     l3243:
  4884     0EFD  0020               	movlb	0	; select bank0
  4885     0EFE  0855               	movf	___fladd@aexp,w
  4886     0EFF  0256               	subwf	___fladd@bexp,w
  4887     0F00  1C03               	skipc
  4888     0F01  2EE7               	goto	l1020
  4889     0F02                     l1018:
  4890     0F02  1B54               	btfsc	___fladd@signs,6
  4891     0F03  2F31               	goto	l3269
  4892     0F04  0856               	movf	___fladd@bexp,w
  4893     0F05  1D03               	btfss	3,2
  4894     0F06  2F10               	goto	l3251
  4895     0F07  3000               	movlw	0
  4896     0F08  00C7               	movwf	?___fladd+3
  4897     0F09  3000               	movlw	0
  4898     0F0A  00C6               	movwf	?___fladd+2
  4899     0F0B  3000               	movlw	0
  4900     0F0C  00C5               	movwf	?___fladd+1
  4901     0F0D  3000               	movlw	0
  4902     0F0E  00C4               	movwf	?___fladd
  4903     0F0F  0008               	return
  4904     0F10                     l3251:
  4905     0F10  0848               	movf	___fladd@a,w
  4906     0F11  07C4               	addwf	___fladd@b,f
  4907     0F12  0849               	movf	___fladd@a+1,w
  4908     0F13  3DC5               	addwfc	___fladd@b+1,f
  4909     0F14  084A               	movf	___fladd@a+2,w
  4910     0F15  3DC6               	addwfc	___fladd@b+2,f
  4911     0F16  084B               	movf	___fladd@a+3,w
  4912     0F17  3DC7               	addwfc	___fladd@b+3,f
  4913     0F18  1C47               	btfss	___fladd@b+3,0
  4914     0F19  2FAB               	goto	l3303
  4915     0F1A  1C57               	btfss	___fladd@grs,0
  4916     0F1B  2F20               	goto	l3259
  4917     0F1C  3657               	lsrf	___fladd@grs,w
  4918     0F1D  3801               	iorlw	1
  4919     0F1E  00D7               	movwf	___fladd@grs
  4920     0F1F  2F22               	goto	l3261
  4921     0F20                     l3259:
  4922     0F20  1003               	clrc
  4923     0F21  0CD7               	rrf	___fladd@grs,f
  4924     0F22                     l3261:
  4925     0F22  1844               	btfsc	___fladd@b,0
  4926     0F23  17D7               	bsf	___fladd@grs,7
  4927     0F24  3001               	movlw	1
  4928     0F25  00CC               	movwf	??___fladd
  4929     0F26                     u3945:
  4930     0F26  37C7               	asrf	___fladd@b+3,f
  4931     0F27  0CC6               	rrf	___fladd@b+2,f
  4932     0F28  0CC5               	rrf	___fladd@b+1,f
  4933     0F29  0CC4               	rrf	___fladd@b,f
  4934     0F2A  0BCC               	decfsz	??___fladd& (0+127),f
  4935     0F2B  2F26               	goto	u3945
  4936     0F2C  3001               	movlw	1
  4937     0F2D  00CC               	movwf	??___fladd
  4938     0F2E  084C               	movf	??___fladd,w
  4939     0F2F  07D6               	addwf	___fladd@bexp,f
  4940     0F30  2FAB               	goto	l3303
  4941     0F31                     l3269:
  4942     0F31  0847               	movf	___fladd@b+3,w
  4943     0F32  3A80               	xorlw	128
  4944     0F33  00CC               	movwf	??___fladd
  4945     0F34  084B               	movf	___fladd@a+3,w
  4946     0F35  3A80               	xorlw	128
  4947     0F36  024C               	subwf	??___fladd,w
  4948     0F37  1D03               	skipz
  4949     0F38  2F43               	goto	u3953
  4950     0F39  084A               	movf	___fladd@a+2,w
  4951     0F3A  0246               	subwf	___fladd@b+2,w
  4952     0F3B  1D03               	skipz
  4953     0F3C  2F43               	goto	u3953
  4954     0F3D  0849               	movf	___fladd@a+1,w
  4955     0F3E  0245               	subwf	___fladd@b+1,w
  4956     0F3F  1D03               	skipz
  4957     0F40  2F43               	goto	u3953
  4958     0F41  0848               	movf	___fladd@a,w
  4959     0F42  0244               	subwf	___fladd@b,w
  4960     0F43                     u3953:
  4961     0F43  1803               	skipnc
  4962     0F44  2F7B               	goto	l3279
  4963     0F45  30FF               	movlw	255
  4964     0F46  00CC               	movwf	??___fladd
  4965     0F47  30FF               	movlw	255
  4966     0F48  00CD               	movwf	??___fladd+1
  4967     0F49  30FF               	movlw	255
  4968     0F4A  00CE               	movwf	??___fladd+2
  4969     0F4B  30FF               	movlw	255
  4970     0F4C  00CF               	movwf	??___fladd+3
  4971     0F4D  0844               	movf	___fladd@b,w
  4972     0F4E  0248               	subwf	___fladd@a,w
  4973     0F4F  00D0               	movwf	??___fladd+4
  4974     0F50  0845               	movf	___fladd@b+1,w
  4975     0F51  3B49               	subwfb	___fladd@a+1,w
  4976     0F52  00D1               	movwf	??___fladd+5
  4977     0F53  0846               	movf	___fladd@b+2,w
  4978     0F54  3B4A               	subwfb	___fladd@a+2,w
  4979     0F55  00D2               	movwf	??___fladd+6
  4980     0F56  0847               	movf	___fladd@b+3,w
  4981     0F57  3B4B               	subwfb	___fladd@a+3,w
  4982     0F58  00D3               	movwf	??___fladd+7
  4983     0F59  0850               	movf	??___fladd+4,w
  4984     0F5A  07CC               	addwf	??___fladd,f
  4985     0F5B  0851               	movf	??___fladd+5,w
  4986     0F5C  3DCD               	addwfc	??___fladd+1,f
  4987     0F5D  0852               	movf	??___fladd+6,w
  4988     0F5E  3DCE               	addwfc	??___fladd+2,f
  4989     0F5F  0853               	movf	??___fladd+7,w
  4990     0F60  3DCF               	addwfc	??___fladd+3,f
  4991     0F61  084F               	movf	??___fladd+3,w
  4992     0F62  00C7               	movwf	___fladd@b+3
  4993     0F63  084E               	movf	??___fladd+2,w
  4994     0F64  00C6               	movwf	___fladd@b+2
  4995     0F65  084D               	movf	??___fladd+1,w
  4996     0F66  00C5               	movwf	___fladd@b+1
  4997     0F67  084C               	movf	??___fladd,w
  4998     0F68  00C4               	movwf	___fladd@b
  4999     0F69  3080               	movlw	128
  5000     0F6A  00CC               	movwf	??___fladd
  5001     0F6B  084C               	movf	??___fladd,w
  5002     0F6C  06D4               	xorwf	___fladd@signs,f
  5003     0F6D  09D7               	comf	___fladd@grs,f
  5004     0F6E  0AD7               	incf	___fladd@grs,f
  5005     0F6F  0857               	movf	___fladd@grs,w
  5006     0F70  1D03               	btfss	3,2
  5007     0F71  2F83               	goto	l1035
  5008     0F72  3001               	movlw	1
  5009     0F73  07C4               	addwf	___fladd@b,f
  5010     0F74  3000               	movlw	0
  5011     0F75  3DC5               	addwfc	___fladd@b+1,f
  5012     0F76  3000               	movlw	0
  5013     0F77  3DC6               	addwfc	___fladd@b+2,f
  5014     0F78  3000               	movlw	0
  5015     0F79  3DC7               	addwfc	___fladd@b+3,f
  5016     0F7A  2F83               	goto	l1035
  5017     0F7B                     l3279:
  5018     0F7B  0848               	movf	___fladd@a,w
  5019     0F7C  02C4               	subwf	___fladd@b,f
  5020     0F7D  0849               	movf	___fladd@a+1,w
  5021     0F7E  3BC5               	subwfb	___fladd@b+1,f
  5022     0F7F  084A               	movf	___fladd@a+2,w
  5023     0F80  3BC6               	subwfb	___fladd@b+2,f
  5024     0F81  084B               	movf	___fladd@a+3,w
  5025     0F82  3BC7               	subwfb	___fladd@b+3,f
  5026     0F83                     l1035:
  5027     0F83  0847               	movf	___fladd@b+3,w
  5028     0F84  0446               	iorwf	___fladd@b+2,w
  5029     0F85  0445               	iorwf	___fladd@b+1,w
  5030     0F86  0444               	iorwf	___fladd@b,w
  5031     0F87  1D03               	skipz
  5032     0F88  2FA9               	goto	l3301
  5033     0F89  0857               	movf	___fladd@grs,w
  5034     0F8A  1D03               	btfss	3,2
  5035     0F8B  2FA9               	goto	l3301
  5036     0F8C  3000               	movlw	0
  5037     0F8D  00C7               	movwf	?___fladd+3
  5038     0F8E  3000               	movlw	0
  5039     0F8F  00C6               	movwf	?___fladd+2
  5040     0F90  3000               	movlw	0
  5041     0F91  00C5               	movwf	?___fladd+1
  5042     0F92  3000               	movlw	0
  5043     0F93  00C4               	movwf	?___fladd
  5044     0F94  0008               	return
  5045     0F95                     l3287:
  5046     0F95  3001               	movlw	1
  5047     0F96                     u3995:
  5048     0F96  35C4               	lslf	___fladd@b,f
  5049     0F97  0DC5               	rlf	___fladd@b+1,f
  5050     0F98  0DC6               	rlf	___fladd@b+2,f
  5051     0F99  0DC7               	rlf	___fladd@b+3,f
  5052     0F9A  0B89               	decfsz	9,f
  5053     0F9B  2F96               	goto	u3995
  5054     0F9C  1BD7               	btfsc	___fladd@grs,7
  5055     0F9D  1444               	bsf	___fladd@b,0
  5056     0F9E  1C57               	btfss	___fladd@grs,0
  5057     0F9F  2FA2               	goto	l3295
  5058     0FA0  1403               	setc
  5059     0FA1  2FA3               	goto	L2
  5060     0FA2                     l3295:
  5061     0FA2  1003               	clrc
  5062     0FA3                     L2:
  5063     0FA3  0DD7               	rlf	___fladd@grs,f
  5064     0FA4  0856               	movf	___fladd@bexp,w
  5065     0FA5  1903               	btfsc	3,2
  5066     0FA6  2FA9               	goto	l3301
  5067     0FA7  3001               	movlw	1
  5068     0FA8  02D6               	subwf	___fladd@bexp,f
  5069     0FA9                     l3301:
  5070     0FA9  1FC6               	btfss	___fladd@b+2,7
  5071     0FAA  2F95               	goto	l3287
  5072     0FAB                     l3303:
  5073     0FAB  01D5               	clrf	___fladd@aexp
  5074     0FAC  1FD7               	btfss	___fladd@grs,7
  5075     0FAD  2FB6               	goto	l3313
  5076     0FAE  0857               	movf	___fladd@grs,w
  5077     0FAF  397F               	andlw	127
  5078     0FB0  1903               	btfsc	3,2
  5079     0FB1  1844               	btfsc	___fladd@b,0
  5080     0FB2  2FB4               	goto	l3309
  5081     0FB3  2FB6               	goto	l3313
  5082     0FB4                     l3309:
  5083     0FB4  01D5               	clrf	___fladd@aexp
  5084     0FB5  0AD5               	incf	___fladd@aexp,f
  5085     0FB6                     l3313:
  5086     0FB6  0855               	movf	___fladd@aexp,w
  5087     0FB7  1903               	btfsc	3,2
  5088     0FB8  2FE2               	goto	l1048
  5089     0FB9  3001               	movlw	1
  5090     0FBA  07C4               	addwf	___fladd@b,f
  5091     0FBB  3000               	movlw	0
  5092     0FBC  3DC5               	addwfc	___fladd@b+1,f
  5093     0FBD  3000               	movlw	0
  5094     0FBE  3DC6               	addwfc	___fladd@b+2,f
  5095     0FBF  3000               	movlw	0
  5096     0FC0  3DC7               	addwfc	___fladd@b+3,f
  5097     0FC1  1C47               	btfss	___fladd@b+3,0
  5098     0FC2  2FE2               	goto	l1048
  5099     0FC3  0844               	movf	___fladd@b,w
  5100     0FC4  00CC               	movwf	??___fladd
  5101     0FC5  0845               	movf	___fladd@b+1,w
  5102     0FC6  00CD               	movwf	??___fladd+1
  5103     0FC7  0846               	movf	___fladd@b+2,w
  5104     0FC8  00CE               	movwf	??___fladd+2
  5105     0FC9  0847               	movf	___fladd@b+3,w
  5106     0FCA  00CF               	movwf	??___fladd+3
  5107     0FCB  3001               	movlw	1
  5108     0FCC  00D0               	movwf	??___fladd+4
  5109     0FCD                     u4095:
  5110     0FCD  37CF               	asrf	??___fladd+3,f
  5111     0FCE  0CCE               	rrf	??___fladd+2,f
  5112     0FCF  0CCD               	rrf	??___fladd+1,f
  5113     0FD0  0CCC               	rrf	??___fladd,f
  5114     0FD1  0BD0               	decfsz	??___fladd+4,f
  5115     0FD2  2FCD               	goto	u4095
  5116     0FD3  084F               	movf	??___fladd+3,w
  5117     0FD4  00C7               	movwf	___fladd@b+3
  5118     0FD5  084E               	movf	??___fladd+2,w
  5119     0FD6  00C6               	movwf	___fladd@b+2
  5120     0FD7  084D               	movf	??___fladd+1,w
  5121     0FD8  00C5               	movwf	___fladd@b+1
  5122     0FD9  084C               	movf	??___fladd,w
  5123     0FDA  00C4               	movwf	___fladd@b
  5124     0FDB  0A56               	incf	___fladd@bexp,w
  5125     0FDC  1903               	btfsc	3,2
  5126     0FDD  2FE2               	goto	l1048
  5127     0FDE  3001               	movlw	1
  5128     0FDF  00CC               	movwf	??___fladd
  5129     0FE0  084C               	movf	??___fladd,w
  5130     0FE1  07D6               	addwf	___fladd@bexp,f
  5131     0FE2                     l1048:
  5132     0FE2  0A56               	incf	___fladd@bexp,w
  5133     0FE3  1D03               	btfss	3,2
  5134     0FE4  0856               	movf	___fladd@bexp,w
  5135     0FE5  1D03               	btfss	3,2
  5136     0FE6  2FF2               	goto	l3331
  5137     0FE7  3000               	movlw	0
  5138     0FE8  00C7               	movwf	___fladd@b+3
  5139     0FE9  3000               	movlw	0
  5140     0FEA  00C6               	movwf	___fladd@b+2
  5141     0FEB  3000               	movlw	0
  5142     0FEC  00C5               	movwf	___fladd@b+1
  5143     0FED  3000               	movlw	0
  5144     0FEE  00C4               	movwf	___fladd@b
  5145     0FEF  0856               	movf	___fladd@bexp,w
  5146     0FF0  1903               	btfsc	3,2
  5147     0FF1  01D4               	clrf	___fladd@signs
  5148     0FF2                     l3331:
  5149     0FF2  1C56               	btfss	___fladd@bexp,0
  5150     0FF3  2FF6               	goto	l3335
  5151     0FF4  17C6               	bsf	___fladd@b+2,7
  5152     0FF5  2FFA               	goto	l1056
  5153     0FF6                     l3335:
  5154     0FF6  307F               	movlw	127
  5155     0FF7  00CC               	movwf	??___fladd
  5156     0FF8  084C               	movf	??___fladd,w
  5157     0FF9  05C6               	andwf	___fladd@b+2,f
  5158     0FFA                     l1056:
  5159     0FFA  3656               	lsrf	___fladd@bexp,w
  5160     0FFB  00C7               	movwf	___fladd@b+3
  5161     0FFC  1FD4               	btfss	___fladd@signs,7
  5162     0FFD  0008               	return
  5163     0FFE  17C7               	bsf	___fladd@b+3,7
  5164     0FFF  0008               	return
  5165     1000                     __end_of___fladd:
  5166                           
  5167                           	psect	text10
  5168     0888                     __ptext10:	
  5169 ;; *************** function ___flneg *****************
  5170 ;; Defined at:
  5171 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\flneg.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;  f1              4    3[COMMON] unsigned char 
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;		None
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  4    3[COMMON] unsigned char 
  5178 ;; Registers used:
  5179 ;;		wreg
  5180 ;; Tracked objects:
  5181 ;;		On entry : 1F/1
  5182 ;;		On exit  : 1F/1
  5183 ;;		Unchanged: 1F/0
  5184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5185 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5188 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5189 ;;Total ram usage:        4 bytes
  5190 ;; Hardware stack levels used: 1
  5191 ;; Hardware stack levels required when called: 4
  5192 ;; This function calls:
  5193 ;;		Nothing
  5194 ;; This function is called by:
  5195 ;;		_my_log
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199     0888                     ___flneg:	
  5200                           ;psect for function ___flneg
  5201                           
  5202                           
  5203                           ;incstack = 0
  5204                           ; Regs used in ___flneg: [wreg]
  5205     0888  0876               	movf	___flneg@f1+3,w
  5206     0889  0475               	iorwf	___flneg@f1+2,w
  5207     088A  0474               	iorwf	___flneg@f1+1,w
  5208     088B  0473               	iorwf	___flneg@f1,w
  5209     088C  1903               	skipnz
  5210     088D  0008               	return
  5211     088E  3080               	movlw	128
  5212     088F  06F6               	xorwf	___flneg@f1+3,f
  5213     0890  0008               	return
  5214     0891                     __end_of___flneg:
  5215                           
  5216                           	psect	text11
  5217     003E                     __ptext11:	
  5218 ;; *************** function ___flmul *****************
  5219 ;; Defined at:
  5220 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\sprcmul.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  b               4   56[BANK0 ] unsigned char 
  5223 ;;  a               4   60[BANK0 ] unsigned char 
  5224 ;; Auto vars:     Size  Location     Type
  5225 ;;  prod            4    7[BANK1 ] struct .
  5226 ;;  grs             4    3[BANK1 ] unsigned long 
  5227 ;;  temp            2   11[BANK1 ] struct .
  5228 ;;  bexp            1    2[BANK1 ] unsigned char 
  5229 ;;  aexp            1    1[BANK1 ] unsigned char 
  5230 ;;  sign            1    0[BANK1 ] unsigned char 
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  4   56[BANK0 ] unsigned char 
  5233 ;; Registers used:
  5234 ;;		wreg, status,2, status,0, pclath, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : 1F/0
  5237 ;;		On exit  : 1F/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5240 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5241 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;      Totals:         0      13      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;Total ram usage:       26 bytes
  5245 ;; Hardware stack levels used: 1
  5246 ;; Hardware stack levels required when called: 5
  5247 ;; This function calls:
  5248 ;;		__Umul8_16
  5249 ;; This function is called by:
  5250 ;;		__ReadSensor
  5251 ;;		_my_log
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255     003E                     ___flmul:	
  5256                           ;psect for function ___flmul
  5257                           
  5258                           
  5259                           ;incstack = 0
  5260                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  5261     003E  085B               	movf	___flmul@b+3,w
  5262     003F  3980               	andlw	128
  5263     0040  0021               	movlb	1	; select bank1
  5264     0041  00A0               	movwf	___flmul@sign^(0+128)
  5265     0042  0020               	movlb	0	; select bank0
  5266     0043  355B               	lslf	___flmul@b+3,w
  5267     0044  0021               	movlb	1	; select bank1
  5268     0045  00A2               	movwf	___flmul@bexp^(0+128)
  5269     0046  0020               	movlb	0	; select bank0
  5270     0047  1FDA               	btfss	___flmul@b+2,7
  5271     0048  284B               	goto	l3537
  5272     0049  0021               	movlb	1	; select bank1
  5273     004A  1422               	bsf	___flmul@bexp^(0+128),0
  5274     004B                     l3537:
  5275     004B  0021               	movlb	1	; select bank1
  5276     004C  0822               	movf	___flmul@bexp^(0+128),w
  5277     004D  1903               	btfsc	3,2
  5278     004E  285E               	goto	l3545
  5279     004F  0A22               	incf	___flmul@bexp^(0+128),w
  5280     0050  1D03               	btfss	3,2
  5281     0051  285B               	goto	l3543
  5282     0052  3000               	movlw	0
  5283     0053  0020               	movlb	0	; select bank0
  5284     0054  00DB               	movwf	___flmul@b+3
  5285     0055  3000               	movlw	0
  5286     0056  00DA               	movwf	___flmul@b+2
  5287     0057  3000               	movlw	0
  5288     0058  00D9               	movwf	___flmul@b+1
  5289     0059  3000               	movlw	0
  5290     005A  00D8               	movwf	___flmul@b
  5291     005B                     l3543:
  5292     005B  0020               	movlb	0	; select bank0
  5293     005C  17DA               	bsf	___flmul@b+2,7
  5294     005D  2867               	goto	l3547
  5295     005E                     l3545:
  5296     005E  3000               	movlw	0
  5297     005F  0020               	movlb	0	; select bank0
  5298     0060  00DB               	movwf	___flmul@b+3
  5299     0061  3000               	movlw	0
  5300     0062  00DA               	movwf	___flmul@b+2
  5301     0063  3000               	movlw	0
  5302     0064  00D9               	movwf	___flmul@b+1
  5303     0065  3000               	movlw	0
  5304     0066  00D8               	movwf	___flmul@b
  5305     0067                     l3547:
  5306     0067  085F               	movf	___flmul@a+3,w
  5307     0068  3980               	andlw	128
  5308     0069  00E0               	movwf	??___flmul
  5309     006A  0860               	movf	??___flmul,w
  5310     006B  0021               	movlb	1	; select bank1
  5311     006C  06A0               	xorwf	___flmul@sign^(0+128),f
  5312     006D  0020               	movlb	0	; select bank0
  5313     006E  355F               	lslf	___flmul@a+3,w
  5314     006F  0021               	movlb	1	; select bank1
  5315     0070  00A1               	movwf	___flmul@aexp^(0+128)
  5316     0071  0020               	movlb	0	; select bank0
  5317     0072  1FDE               	btfss	___flmul@a+2,7
  5318     0073  2876               	goto	l3555
  5319     0074  0021               	movlb	1	; select bank1
  5320     0075  1421               	bsf	___flmul@aexp^(0+128),0
  5321     0076                     l3555:
  5322     0076  0021               	movlb	1	; select bank1
  5323     0077  0821               	movf	___flmul@aexp^(0+128),w
  5324     0078  1903               	btfsc	3,2
  5325     0079  2889               	goto	l3563
  5326     007A  0A21               	incf	___flmul@aexp^(0+128),w
  5327     007B  1D03               	btfss	3,2
  5328     007C  2886               	goto	l3561
  5329     007D  3000               	movlw	0
  5330     007E  0020               	movlb	0	; select bank0
  5331     007F  00DF               	movwf	___flmul@a+3
  5332     0080  3000               	movlw	0
  5333     0081  00DE               	movwf	___flmul@a+2
  5334     0082  3000               	movlw	0
  5335     0083  00DD               	movwf	___flmul@a+1
  5336     0084  3000               	movlw	0
  5337     0085  00DC               	movwf	___flmul@a
  5338     0086                     l3561:
  5339     0086  0020               	movlb	0	; select bank0
  5340     0087  17DE               	bsf	___flmul@a+2,7
  5341     0088  2892               	goto	l3565
  5342     0089                     l3563:
  5343     0089  3000               	movlw	0
  5344     008A  0020               	movlb	0	; select bank0
  5345     008B  00DF               	movwf	___flmul@a+3
  5346     008C  3000               	movlw	0
  5347     008D  00DE               	movwf	___flmul@a+2
  5348     008E  3000               	movlw	0
  5349     008F  00DD               	movwf	___flmul@a+1
  5350     0090  3000               	movlw	0
  5351     0091  00DC               	movwf	___flmul@a
  5352     0092                     l3565:
  5353     0092  0021               	movlb	1	; select bank1
  5354     0093  0821               	movf	___flmul@aexp^(0+128),w
  5355     0094  1D03               	btfss	3,2
  5356     0095  0822               	movf	___flmul@bexp^(0+128),w
  5357     0096  1D03               	btfss	3,2
  5358     0097  28A2               	goto	l3573
  5359     0098  3000               	movlw	0
  5360     0099  0020               	movlb	0	; select bank0
  5361     009A  00DB               	movwf	?___flmul+3
  5362     009B  3000               	movlw	0
  5363     009C  00DA               	movwf	?___flmul+2
  5364     009D  3000               	movlw	0
  5365     009E  00D9               	movwf	?___flmul+1
  5366     009F  3000               	movlw	0
  5367     00A0  00D8               	movwf	?___flmul
  5368     00A1  0008               	return
  5369     00A2                     l3573:
  5370     00A2  0020               	movlb	0	; select bank0
  5371     00A3  0858               	movf	___flmul@b,w
  5372     00A4  00F3               	movwf	__Umul8_16@multiplicand
  5373     00A5  085E               	movf	___flmul@a+2,w
  5374     00A6  3189  2188  3180   	fcall	__Umul8_16
  5375     00A9  0874               	movf	?__Umul8_16+1,w
  5376     00AA  0021               	movlb	1	; select bank1
  5377     00AB  00AC               	movwf	(___flmul@temp+1)^(0+128)
  5378     00AC  0873               	movf	?__Umul8_16,w
  5379     00AD  00AB               	movwf	___flmul@temp^(0+128)
  5380     00AE  082B               	movf	___flmul@temp^(0+128),w
  5381     00AF  0020               	movlb	0	; select bank0
  5382     00B0  00E0               	movwf	??___flmul
  5383     00B1  01E1               	clrf	??___flmul+1
  5384     00B2  01E2               	clrf	??___flmul+2
  5385     00B3  01E3               	clrf	??___flmul+3
  5386     00B4  0863               	movf	??___flmul+3,w
  5387     00B5  0021               	movlb	1	; select bank1
  5388     00B6  00A6               	movwf	(___flmul@grs+3)^(0+128)
  5389     00B7  0020               	movlb	0	; select bank0
  5390     00B8  0862               	movf	??___flmul+2,w
  5391     00B9  0021               	movlb	1	; select bank1
  5392     00BA  00A5               	movwf	(___flmul@grs+2)^(0+128)
  5393     00BB  0020               	movlb	0	; select bank0
  5394     00BC  0861               	movf	??___flmul+1,w
  5395     00BD  0021               	movlb	1	; select bank1
  5396     00BE  00A4               	movwf	(___flmul@grs+1)^(0+128)
  5397     00BF  0020               	movlb	0	; select bank0
  5398     00C0  0860               	movf	??___flmul,w
  5399     00C1  0021               	movlb	1	; select bank1
  5400     00C2  00A3               	movwf	___flmul@grs^(0+128)
  5401     00C3  082C               	movf	(___flmul@temp^(0+128)+1),w
  5402     00C4  0020               	movlb	0	; select bank0
  5403     00C5  00E0               	movwf	??___flmul
  5404     00C6  01E1               	clrf	??___flmul+1
  5405     00C7  01E2               	clrf	??___flmul+2
  5406     00C8  01E3               	clrf	??___flmul+3
  5407     00C9  0863               	movf	??___flmul+3,w
  5408     00CA  0021               	movlb	1	; select bank1
  5409     00CB  00AA               	movwf	(___flmul@prod+3)^(0+128)
  5410     00CC  0020               	movlb	0	; select bank0
  5411     00CD  0862               	movf	??___flmul+2,w
  5412     00CE  0021               	movlb	1	; select bank1
  5413     00CF  00A9               	movwf	(___flmul@prod+2)^(0+128)
  5414     00D0  0020               	movlb	0	; select bank0
  5415     00D1  0861               	movf	??___flmul+1,w
  5416     00D2  0021               	movlb	1	; select bank1
  5417     00D3  00A8               	movwf	(___flmul@prod+1)^(0+128)
  5418     00D4  0020               	movlb	0	; select bank0
  5419     00D5  0860               	movf	??___flmul,w
  5420     00D6  0021               	movlb	1	; select bank1
  5421     00D7  00A7               	movwf	___flmul@prod^(0+128)
  5422     00D8  0020               	movlb	0	; select bank0
  5423     00D9  0859               	movf	___flmul@b+1,w
  5424     00DA  00F3               	movwf	__Umul8_16@multiplicand
  5425     00DB  085D               	movf	___flmul@a+1,w
  5426     00DC  3189  2188  3180   	fcall	__Umul8_16
  5427     00DF  0874               	movf	?__Umul8_16+1,w
  5428     00E0  0021               	movlb	1	; select bank1
  5429     00E1  00AC               	movwf	(___flmul@temp+1)^(0+128)
  5430     00E2  0873               	movf	?__Umul8_16,w
  5431     00E3  00AB               	movwf	___flmul@temp^(0+128)
  5432     00E4  082B               	movf	___flmul@temp^(0+128),w
  5433     00E5  0020               	movlb	0	; select bank0
  5434     00E6  00E0               	movwf	??___flmul
  5435     00E7  01E1               	clrf	??___flmul+1
  5436     00E8  01E2               	clrf	??___flmul+2
  5437     00E9  01E3               	clrf	??___flmul+3
  5438     00EA  0860               	movf	??___flmul,w
  5439     00EB  0021               	movlb	1	; select bank1
  5440     00EC  07A3               	addwf	___flmul@grs^(0+128),f
  5441     00ED  0020               	movlb	0	; select bank0
  5442     00EE  0861               	movf	??___flmul+1,w
  5443     00EF  0021               	movlb	1	; select bank1
  5444     00F0  3DA4               	addwfc	(___flmul@grs+1)^(0+128),f
  5445     00F1  0020               	movlb	0	; select bank0
  5446     00F2  0862               	movf	??___flmul+2,w
  5447     00F3  0021               	movlb	1	; select bank1
  5448     00F4  3DA5               	addwfc	(___flmul@grs+2)^(0+128),f
  5449     00F5  0020               	movlb	0	; select bank0
  5450     00F6  0863               	movf	??___flmul+3,w
  5451     00F7  0021               	movlb	1	; select bank1
  5452     00F8  3DA6               	addwfc	(___flmul@grs+3)^(0+128),f
  5453     00F9  082C               	movf	(___flmul@temp^(0+128)+1),w
  5454     00FA  0020               	movlb	0	; select bank0
  5455     00FB  00E0               	movwf	??___flmul
  5456     00FC  01E1               	clrf	??___flmul+1
  5457     00FD  01E2               	clrf	??___flmul+2
  5458     00FE  01E3               	clrf	??___flmul+3
  5459     00FF  0860               	movf	??___flmul,w
  5460     0100  0021               	movlb	1	; select bank1
  5461     0101  07A7               	addwf	___flmul@prod^(0+128),f
  5462     0102  0020               	movlb	0	; select bank0
  5463     0103  0861               	movf	??___flmul+1,w
  5464     0104  0021               	movlb	1	; select bank1
  5465     0105  3DA8               	addwfc	(___flmul@prod+1)^(0+128),f
  5466     0106  0020               	movlb	0	; select bank0
  5467     0107  0862               	movf	??___flmul+2,w
  5468     0108  0021               	movlb	1	; select bank1
  5469     0109  3DA9               	addwfc	(___flmul@prod+2)^(0+128),f
  5470     010A  0020               	movlb	0	; select bank0
  5471     010B  0863               	movf	??___flmul+3,w
  5472     010C  0021               	movlb	1	; select bank1
  5473     010D  3DAA               	addwfc	(___flmul@prod+3)^(0+128),f
  5474     010E  0020               	movlb	0	; select bank0
  5475     010F  085A               	movf	___flmul@b+2,w
  5476     0110  00F3               	movwf	__Umul8_16@multiplicand
  5477     0111  085C               	movf	___flmul@a,w
  5478     0112  3189  2188  3180   	fcall	__Umul8_16
  5479     0115  0874               	movf	?__Umul8_16+1,w
  5480     0116  0021               	movlb	1	; select bank1
  5481     0117  00AC               	movwf	(___flmul@temp+1)^(0+128)
  5482     0118  0873               	movf	?__Umul8_16,w
  5483     0119  00AB               	movwf	___flmul@temp^(0+128)
  5484     011A  082B               	movf	___flmul@temp^(0+128),w
  5485     011B  0020               	movlb	0	; select bank0
  5486     011C  00E0               	movwf	??___flmul
  5487     011D  01E1               	clrf	??___flmul+1
  5488     011E  01E2               	clrf	??___flmul+2
  5489     011F  01E3               	clrf	??___flmul+3
  5490     0120  0860               	movf	??___flmul,w
  5491     0121  0021               	movlb	1	; select bank1
  5492     0122  07A3               	addwf	___flmul@grs^(0+128),f
  5493     0123  0020               	movlb	0	; select bank0
  5494     0124  0861               	movf	??___flmul+1,w
  5495     0125  0021               	movlb	1	; select bank1
  5496     0126  3DA4               	addwfc	(___flmul@grs+1)^(0+128),f
  5497     0127  0020               	movlb	0	; select bank0
  5498     0128  0862               	movf	??___flmul+2,w
  5499     0129  0021               	movlb	1	; select bank1
  5500     012A  3DA5               	addwfc	(___flmul@grs+2)^(0+128),f
  5501     012B  0020               	movlb	0	; select bank0
  5502     012C  0863               	movf	??___flmul+3,w
  5503     012D  0021               	movlb	1	; select bank1
  5504     012E  3DA6               	addwfc	(___flmul@grs+3)^(0+128),f
  5505     012F  082C               	movf	(___flmul@temp^(0+128)+1),w
  5506     0130  0020               	movlb	0	; select bank0
  5507     0131  00E0               	movwf	??___flmul
  5508     0132  01E1               	clrf	??___flmul+1
  5509     0133  01E2               	clrf	??___flmul+2
  5510     0134  01E3               	clrf	??___flmul+3
  5511     0135  0860               	movf	??___flmul,w
  5512     0136  0021               	movlb	1	; select bank1
  5513     0137  07A7               	addwf	___flmul@prod^(0+128),f
  5514     0138  0020               	movlb	0	; select bank0
  5515     0139  0861               	movf	??___flmul+1,w
  5516     013A  0021               	movlb	1	; select bank1
  5517     013B  3DA8               	addwfc	(___flmul@prod+1)^(0+128),f
  5518     013C  0020               	movlb	0	; select bank0
  5519     013D  0862               	movf	??___flmul+2,w
  5520     013E  0021               	movlb	1	; select bank1
  5521     013F  3DA9               	addwfc	(___flmul@prod+2)^(0+128),f
  5522     0140  0020               	movlb	0	; select bank0
  5523     0141  0863               	movf	??___flmul+3,w
  5524     0142  0021               	movlb	1	; select bank1
  5525     0143  3DAA               	addwfc	(___flmul@prod+3)^(0+128),f
  5526     0144  3008               	movlw	8
  5527     0145                     u4625:
  5528     0145  35A3               	lslf	___flmul@grs^(0+128),f
  5529     0146  0DA4               	rlf	(___flmul@grs+1)^(0+128),f
  5530     0147  0DA5               	rlf	(___flmul@grs+2)^(0+128),f
  5531     0148  0DA6               	rlf	(___flmul@grs+3)^(0+128),f
  5532     0149  0B89               	decfsz	9,f
  5533     014A  2945               	goto	u4625
  5534     014B  0020               	movlb	0	; select bank0
  5535     014C  0859               	movf	___flmul@b+1,w
  5536     014D  00F3               	movwf	__Umul8_16@multiplicand
  5537     014E  085C               	movf	___flmul@a,w
  5538     014F  3189  2188  3180   	fcall	__Umul8_16
  5539     0152  0874               	movf	?__Umul8_16+1,w
  5540     0153  0021               	movlb	1	; select bank1
  5541     0154  00AC               	movwf	(___flmul@temp+1)^(0+128)
  5542     0155  0873               	movf	?__Umul8_16,w
  5543     0156  00AB               	movwf	___flmul@temp^(0+128)
  5544     0157  082B               	movf	___flmul@temp^(0+128),w
  5545     0158  07A3               	addwf	___flmul@grs^(0+128),f
  5546     0159  082C               	movf	(___flmul@temp+1)^(0+128),w
  5547     015A  3DA4               	addwfc	(___flmul@grs+1)^(0+128),f
  5548     015B  3000               	movlw	0
  5549     015C  3DA5               	addwfc	(___flmul@grs+2)^(0+128),f
  5550     015D  3DA6               	addwfc	(___flmul@grs+3)^(0+128),f
  5551     015E  0020               	movlb	0	; select bank0
  5552     015F  0858               	movf	___flmul@b,w
  5553     0160  00F3               	movwf	__Umul8_16@multiplicand
  5554     0161  085D               	movf	___flmul@a+1,w
  5555     0162  3189  2188  3180   	fcall	__Umul8_16
  5556     0165  0874               	movf	?__Umul8_16+1,w
  5557     0166  0021               	movlb	1	; select bank1
  5558     0167  00AC               	movwf	(___flmul@temp+1)^(0+128)
  5559     0168  0873               	movf	?__Umul8_16,w
  5560     0169  00AB               	movwf	___flmul@temp^(0+128)
  5561     016A  082B               	movf	___flmul@temp^(0+128),w
  5562     016B  07A3               	addwf	___flmul@grs^(0+128),f
  5563     016C  082C               	movf	(___flmul@temp+1)^(0+128),w
  5564     016D  3DA4               	addwfc	(___flmul@grs+1)^(0+128),f
  5565     016E  3000               	movlw	0
  5566     016F  3DA5               	addwfc	(___flmul@grs+2)^(0+128),f
  5567     0170  3DA6               	addwfc	(___flmul@grs+3)^(0+128),f
  5568     0171  3008               	movlw	8
  5569     0172                     u4635:
  5570     0172  35A3               	lslf	___flmul@grs^(0+128),f
  5571     0173  0DA4               	rlf	(___flmul@grs+1)^(0+128),f
  5572     0174  0DA5               	rlf	(___flmul@grs+2)^(0+128),f
  5573     0175  0DA6               	rlf	(___flmul@grs+3)^(0+128),f
  5574     0176  0B89               	decfsz	9,f
  5575     0177  2972               	goto	u4635
  5576     0178  0020               	movlb	0	; select bank0
  5577     0179  0858               	movf	___flmul@b,w
  5578     017A  00F3               	movwf	__Umul8_16@multiplicand
  5579     017B  085C               	movf	___flmul@a,w
  5580     017C  3189  2188  3180   	fcall	__Umul8_16
  5581     017F  0874               	movf	?__Umul8_16+1,w
  5582     0180  0021               	movlb	1	; select bank1
  5583     0181  00AC               	movwf	(___flmul@temp+1)^(0+128)
  5584     0182  0873               	movf	?__Umul8_16,w
  5585     0183  00AB               	movwf	___flmul@temp^(0+128)
  5586     0184  082B               	movf	___flmul@temp^(0+128),w
  5587     0185  07A3               	addwf	___flmul@grs^(0+128),f
  5588     0186  082C               	movf	(___flmul@temp+1)^(0+128),w
  5589     0187  3DA4               	addwfc	(___flmul@grs+1)^(0+128),f
  5590     0188  3000               	movlw	0
  5591     0189  3DA5               	addwfc	(___flmul@grs+2)^(0+128),f
  5592     018A  3DA6               	addwfc	(___flmul@grs+3)^(0+128),f
  5593     018B  0020               	movlb	0	; select bank0
  5594     018C  0859               	movf	___flmul@b+1,w
  5595     018D  00F3               	movwf	__Umul8_16@multiplicand
  5596     018E  085E               	movf	___flmul@a+2,w
  5597     018F  3189  2188  3180   	fcall	__Umul8_16
  5598     0192  0874               	movf	?__Umul8_16+1,w
  5599     0193  0021               	movlb	1	; select bank1
  5600     0194  00AC               	movwf	(___flmul@temp+1)^(0+128)
  5601     0195  0873               	movf	?__Umul8_16,w
  5602     0196  00AB               	movwf	___flmul@temp^(0+128)
  5603     0197  082B               	movf	___flmul@temp^(0+128),w
  5604     0198  07A7               	addwf	___flmul@prod^(0+128),f
  5605     0199  082C               	movf	(___flmul@temp+1)^(0+128),w
  5606     019A  3DA8               	addwfc	(___flmul@prod+1)^(0+128),f
  5607     019B  3000               	movlw	0
  5608     019C  3DA9               	addwfc	(___flmul@prod+2)^(0+128),f
  5609     019D  3DAA               	addwfc	(___flmul@prod+3)^(0+128),f
  5610     019E  0020               	movlb	0	; select bank0
  5611     019F  085A               	movf	___flmul@b+2,w
  5612     01A0  00F3               	movwf	__Umul8_16@multiplicand
  5613     01A1  085D               	movf	___flmul@a+1,w
  5614     01A2  3189  2188  3180   	fcall	__Umul8_16
  5615     01A5  0874               	movf	?__Umul8_16+1,w
  5616     01A6  0021               	movlb	1	; select bank1
  5617     01A7  00AC               	movwf	(___flmul@temp+1)^(0+128)
  5618     01A8  0873               	movf	?__Umul8_16,w
  5619     01A9  00AB               	movwf	___flmul@temp^(0+128)
  5620     01AA  082B               	movf	___flmul@temp^(0+128),w
  5621     01AB  07A7               	addwf	___flmul@prod^(0+128),f
  5622     01AC  082C               	movf	(___flmul@temp+1)^(0+128),w
  5623     01AD  3DA8               	addwfc	(___flmul@prod+1)^(0+128),f
  5624     01AE  3000               	movlw	0
  5625     01AF  3DA9               	addwfc	(___flmul@prod+2)^(0+128),f
  5626     01B0  3DAA               	addwfc	(___flmul@prod+3)^(0+128),f
  5627     01B1  0020               	movlb	0	; select bank0
  5628     01B2  085A               	movf	___flmul@b+2,w
  5629     01B3  00F3               	movwf	__Umul8_16@multiplicand
  5630     01B4  085E               	movf	___flmul@a+2,w
  5631     01B5  3189  2188  3180   	fcall	__Umul8_16
  5632     01B8  0874               	movf	?__Umul8_16+1,w
  5633     01B9  0021               	movlb	1	; select bank1
  5634     01BA  00AC               	movwf	(___flmul@temp+1)^(0+128)
  5635     01BB  0873               	movf	?__Umul8_16,w
  5636     01BC  00AB               	movwf	___flmul@temp^(0+128)
  5637     01BD  082B               	movf	___flmul@temp^(0+128),w
  5638     01BE  0020               	movlb	0	; select bank0
  5639     01BF  00E0               	movwf	??___flmul
  5640     01C0  0021               	movlb	1	; select bank1
  5641     01C1  082C               	movf	(___flmul@temp+1)^(0+128),w
  5642     01C2  0020               	movlb	0	; select bank0
  5643     01C3  00E1               	movwf	??___flmul+1
  5644     01C4  01E2               	clrf	??___flmul+2
  5645     01C5  01E3               	clrf	??___flmul+3
  5646     01C6  3008               	movlw	8
  5647     01C7                     u4645:
  5648     01C7  35E0               	lslf	??___flmul,f
  5649     01C8  0DE1               	rlf	??___flmul+1,f
  5650     01C9  0DE2               	rlf	??___flmul+2,f
  5651     01CA  0DE3               	rlf	??___flmul+3,f
  5652     01CB  0B89               	decfsz	9,f
  5653     01CC  29C7               	goto	u4645
  5654     01CD  0860               	movf	??___flmul,w
  5655     01CE  0021               	movlb	1	; select bank1
  5656     01CF  07A7               	addwf	___flmul@prod^(0+128),f
  5657     01D0  0020               	movlb	0	; select bank0
  5658     01D1  0861               	movf	??___flmul+1,w
  5659     01D2  0021               	movlb	1	; select bank1
  5660     01D3  3DA8               	addwfc	(___flmul@prod+1)^(0+128),f
  5661     01D4  0020               	movlb	0	; select bank0
  5662     01D5  0862               	movf	??___flmul+2,w
  5663     01D6  0021               	movlb	1	; select bank1
  5664     01D7  3DA9               	addwfc	(___flmul@prod+2)^(0+128),f
  5665     01D8  0020               	movlb	0	; select bank0
  5666     01D9  0863               	movf	??___flmul+3,w
  5667     01DA  0021               	movlb	1	; select bank1
  5668     01DB  3DAA               	addwfc	(___flmul@prod+3)^(0+128),f
  5669     01DC  0826               	movf	(___flmul@grs^(0+128)+3),w
  5670     01DD  0020               	movlb	0	; select bank0
  5671     01DE  00E0               	movwf	??___flmul
  5672     01DF  01E1               	clrf	??___flmul+1
  5673     01E0  01E2               	clrf	??___flmul+2
  5674     01E1  01E3               	clrf	??___flmul+3
  5675     01E2  0860               	movf	??___flmul,w
  5676     01E3  0021               	movlb	1	; select bank1
  5677     01E4  07A7               	addwf	___flmul@prod^(0+128),f
  5678     01E5  0020               	movlb	0	; select bank0
  5679     01E6  0861               	movf	??___flmul+1,w
  5680     01E7  0021               	movlb	1	; select bank1
  5681     01E8  3DA8               	addwfc	(___flmul@prod+1)^(0+128),f
  5682     01E9  0020               	movlb	0	; select bank0
  5683     01EA  0862               	movf	??___flmul+2,w
  5684     01EB  0021               	movlb	1	; select bank1
  5685     01EC  3DA9               	addwfc	(___flmul@prod+2)^(0+128),f
  5686     01ED  0020               	movlb	0	; select bank0
  5687     01EE  0863               	movf	??___flmul+3,w
  5688     01EF  0021               	movlb	1	; select bank1
  5689     01F0  3DAA               	addwfc	(___flmul@prod+3)^(0+128),f
  5690     01F1  3008               	movlw	8
  5691     01F2                     u4655:
  5692     01F2  35A3               	lslf	___flmul@grs^(0+128),f
  5693     01F3  0DA4               	rlf	(___flmul@grs+1)^(0+128),f
  5694     01F4  0DA5               	rlf	(___flmul@grs+2)^(0+128),f
  5695     01F5  0DA6               	rlf	(___flmul@grs+3)^(0+128),f
  5696     01F6  0B89               	decfsz	9,f
  5697     01F7  29F2               	goto	u4655
  5698     01F8  0822               	movf	___flmul@bexp^(0+128),w
  5699     01F9  0721               	addwf	___flmul@aexp^(0+128),w
  5700     01FA  0020               	movlb	0	; select bank0
  5701     01FB  00E0               	movwf	??___flmul
  5702     01FC  01E1               	clrf	??___flmul+1
  5703     01FD  0DE1               	rlf	??___flmul+1,f
  5704     01FE  0860               	movf	??___flmul,w
  5705     01FF  3E82               	addlw	130
  5706     0200  0021               	movlb	1	; select bank1
  5707     0201  00AB               	movwf	___flmul@temp^(0+128)
  5708     0202  30FF               	movlw	255
  5709     0203  0020               	movlb	0	; select bank0
  5710     0204  3D61               	addwfc	??___flmul+1,w
  5711     0205  0021               	movlb	1	; select bank1
  5712     0206  00AC               	movwf	(___flmul@temp+1)^(0+128)
  5713     0207                     l3625:
  5714     0207  1BA9               	btfsc	(___flmul@prod+2)^(0+128),7
  5715     0208  2A1E               	goto	l3627
  5716     0209  3001               	movlw	1
  5717     020A                     u4665:
  5718     020A  35A7               	lslf	___flmul@prod^(0+128),f
  5719     020B  0DA8               	rlf	(___flmul@prod+1)^(0+128),f
  5720     020C  0DA9               	rlf	(___flmul@prod+2)^(0+128),f
  5721     020D  0DAA               	rlf	(___flmul@prod+3)^(0+128),f
  5722     020E  0B89               	decfsz	9,f
  5723     020F  2A0A               	goto	u4665
  5724     0210  1BA6               	btfsc	(___flmul@grs+3)^(0+128),7
  5725     0211  1427               	bsf	___flmul@prod^(0+128),0
  5726     0212  3001               	movlw	1
  5727     0213                     u4685:
  5728     0213  35A3               	lslf	___flmul@grs^(0+128),f
  5729     0214  0DA4               	rlf	(___flmul@grs+1)^(0+128),f
  5730     0215  0DA5               	rlf	(___flmul@grs+2)^(0+128),f
  5731     0216  0DA6               	rlf	(___flmul@grs+3)^(0+128),f
  5732     0217  0B89               	decfsz	9,f
  5733     0218  2A13               	goto	u4685
  5734     0219  30FF               	movlw	255
  5735     021A  07AB               	addwf	___flmul@temp^(0+128),f
  5736     021B  30FF               	movlw	255
  5737     021C  3DAC               	addwfc	(___flmul@temp+1)^(0+128),f
  5738     021D  2A07               	goto	l3625
  5739     021E                     l3627:
  5740     021E  01A1               	clrf	___flmul@aexp^(0+128)
  5741     021F  1FA6               	btfss	(___flmul@grs+3)^(0+128),7
  5742     0220  2A40               	goto	l3637
  5743     0221  30FF               	movlw	255
  5744     0222  0523               	andwf	___flmul@grs^(0+128),w
  5745     0223  0020               	movlb	0	; select bank0
  5746     0224  00E0               	movwf	??___flmul
  5747     0225  30FF               	movlw	255
  5748     0226  0021               	movlb	1	; select bank1
  5749     0227  0524               	andwf	(___flmul@grs+1)^(0+128),w
  5750     0228  0020               	movlb	0	; select bank0
  5751     0229  00E1               	movwf	??___flmul+1
  5752     022A  30FF               	movlw	255
  5753     022B  0021               	movlb	1	; select bank1
  5754     022C  0525               	andwf	(___flmul@grs+2)^(0+128),w
  5755     022D  0020               	movlb	0	; select bank0
  5756     022E  00E2               	movwf	??___flmul+2
  5757     022F  307F               	movlw	127
  5758     0230  0021               	movlb	1	; select bank1
  5759     0231  0526               	andwf	(___flmul@grs+3)^(0+128),w
  5760     0232  0020               	movlb	0	; select bank0
  5761     0233  00E3               	movwf	??___flmul+3
  5762     0234  0863               	movf	??___flmul+3,w
  5763     0235  0462               	iorwf	??___flmul+2,w
  5764     0236  0461               	iorwf	??___flmul+1,w
  5765     0237  0460               	iorwf	??___flmul,w
  5766     0238  1D03               	btfss	3,2
  5767     0239  2A3D               	goto	l3633
  5768     023A  0021               	movlb	1	; select bank1
  5769     023B  1C27               	btfss	___flmul@prod^(0+128),0
  5770     023C  2A40               	goto	l3637
  5771     023D                     l3633:
  5772     023D  0021               	movlb	1	; select bank1
  5773     023E  01A1               	clrf	___flmul@aexp^(0+128)
  5774     023F  0AA1               	incf	___flmul@aexp^(0+128),f
  5775     0240                     l3637:
  5776     0240  0821               	movf	___flmul@aexp^(0+128),w
  5777     0241  1903               	btfsc	3,2
  5778     0242  2A77               	goto	l3647
  5779     0243  3001               	movlw	1
  5780     0244  07A7               	addwf	___flmul@prod^(0+128),f
  5781     0245  3000               	movlw	0
  5782     0246  3DA8               	addwfc	(___flmul@prod+1)^(0+128),f
  5783     0247  3000               	movlw	0
  5784     0248  3DA9               	addwfc	(___flmul@prod+2)^(0+128),f
  5785     0249  3000               	movlw	0
  5786     024A  3DAA               	addwfc	(___flmul@prod+3)^(0+128),f
  5787     024B  1C2A               	btfss	(___flmul@prod+3)^(0+128),0
  5788     024C  2A77               	goto	l3647
  5789     024D  0827               	movf	___flmul@prod^(0+128),w
  5790     024E  0020               	movlb	0	; select bank0
  5791     024F  00E0               	movwf	??___flmul
  5792     0250  0021               	movlb	1	; select bank1
  5793     0251  0828               	movf	(___flmul@prod+1)^(0+128),w
  5794     0252  0020               	movlb	0	; select bank0
  5795     0253  00E1               	movwf	??___flmul+1
  5796     0254  0021               	movlb	1	; select bank1
  5797     0255  0829               	movf	(___flmul@prod+2)^(0+128),w
  5798     0256  0020               	movlb	0	; select bank0
  5799     0257  00E2               	movwf	??___flmul+2
  5800     0258  0021               	movlb	1	; select bank1
  5801     0259  082A               	movf	(___flmul@prod+3)^(0+128),w
  5802     025A  0020               	movlb	0	; select bank0
  5803     025B  00E3               	movwf	??___flmul+3
  5804     025C  3001               	movlw	1
  5805     025D  00E4               	movwf	??___flmul+4
  5806     025E                     u4755:
  5807     025E  37E3               	asrf	??___flmul+3,f
  5808     025F  0CE2               	rrf	??___flmul+2,f
  5809     0260  0CE1               	rrf	??___flmul+1,f
  5810     0261  0CE0               	rrf	??___flmul,f
  5811     0262  0BE4               	decfsz	??___flmul+4,f
  5812     0263  2A5E               	goto	u4755
  5813     0264  0863               	movf	??___flmul+3,w
  5814     0265  0021               	movlb	1	; select bank1
  5815     0266  00AA               	movwf	(___flmul@prod+3)^(0+128)
  5816     0267  0020               	movlb	0	; select bank0
  5817     0268  0862               	movf	??___flmul+2,w
  5818     0269  0021               	movlb	1	; select bank1
  5819     026A  00A9               	movwf	(___flmul@prod+2)^(0+128)
  5820     026B  0020               	movlb	0	; select bank0
  5821     026C  0861               	movf	??___flmul+1,w
  5822     026D  0021               	movlb	1	; select bank1
  5823     026E  00A8               	movwf	(___flmul@prod+1)^(0+128)
  5824     026F  0020               	movlb	0	; select bank0
  5825     0270  0860               	movf	??___flmul,w
  5826     0271  0021               	movlb	1	; select bank1
  5827     0272  00A7               	movwf	___flmul@prod^(0+128)
  5828     0273  3001               	movlw	1
  5829     0274  07AB               	addwf	___flmul@temp^(0+128),f
  5830     0275  3000               	movlw	0
  5831     0276  3DAC               	addwfc	(___flmul@temp+1)^(0+128),f
  5832     0277                     l3647:
  5833     0277  082C               	movf	(___flmul@temp+1)^(0+128),w
  5834     0278  3A80               	xorlw	128
  5835     0279  0020               	movlb	0	; select bank0
  5836     027A  00E0               	movwf	??___flmul
  5837     027B  3080               	movlw	128
  5838     027C  0260               	subwf	??___flmul,w
  5839     027D  1D03               	skipz
  5840     027E  2A82               	goto	u4765
  5841     027F  30FF               	movlw	255
  5842     0280  0021               	movlb	1	; select bank1
  5843     0281  022B               	subwf	___flmul@temp^(0+128),w
  5844     0282                     u4765:
  5845     0282  1C03               	skipc
  5846     0283  2A8E               	goto	l3651
  5847     0284  307F               	movlw	127
  5848     0285  0021               	movlb	1	; select bank1
  5849     0286  00AA               	movwf	(___flmul@prod+3)^(0+128)
  5850     0287  3080               	movlw	128
  5851     0288  00A9               	movwf	(___flmul@prod+2)^(0+128)
  5852     0289  3000               	movlw	0
  5853     028A  00A8               	movwf	(___flmul@prod+1)^(0+128)
  5854     028B  3000               	movlw	0
  5855     028C  00A7               	movwf	___flmul@prod^(0+128)
  5856     028D  2AB6               	goto	l1122
  5857     028E                     l3651:
  5858     028E  0021               	movlb	1	; select bank1
  5859     028F  082C               	movf	(___flmul@temp+1)^(0+128),w
  5860     0290  3A80               	xorlw	128
  5861     0291  0020               	movlb	0	; select bank0
  5862     0292  00E0               	movwf	??___flmul
  5863     0293  3080               	movlw	128
  5864     0294  0260               	subwf	??___flmul,w
  5865     0295  1D03               	skipz
  5866     0296  2A9A               	goto	u4775
  5867     0297  3001               	movlw	1
  5868     0298  0021               	movlb	1	; select bank1
  5869     0299  022B               	subwf	___flmul@temp^(0+128),w
  5870     029A                     u4775:
  5871     029A  1803               	skipnc
  5872     029B  2AA7               	goto	l3657
  5873     029C  3000               	movlw	0
  5874     029D  0021               	movlb	1	; select bank1
  5875     029E  00AA               	movwf	(___flmul@prod+3)^(0+128)
  5876     029F  3000               	movlw	0
  5877     02A0  00A9               	movwf	(___flmul@prod+2)^(0+128)
  5878     02A1  3000               	movlw	0
  5879     02A2  00A8               	movwf	(___flmul@prod+1)^(0+128)
  5880     02A3  3000               	movlw	0
  5881     02A4  00A7               	movwf	___flmul@prod^(0+128)
  5882     02A5  01A0               	clrf	___flmul@sign^(0+128)
  5883     02A6  2AB6               	goto	l1122
  5884     02A7                     l3657:
  5885     02A7  0021               	movlb	1	; select bank1
  5886     02A8  082B               	movf	___flmul@temp^(0+128),w
  5887     02A9  00A2               	movwf	___flmul@bexp^(0+128)
  5888     02AA  30FF               	movlw	255
  5889     02AB  05A7               	andwf	___flmul@prod^(0+128),f
  5890     02AC  30FF               	movlw	255
  5891     02AD  05A8               	andwf	(___flmul@prod+1)^(0+128),f
  5892     02AE  307F               	movlw	127
  5893     02AF  05A9               	andwf	(___flmul@prod+2)^(0+128),f
  5894     02B0  3000               	movlw	0
  5895     02B1  05AA               	andwf	(___flmul@prod+3)^(0+128),f
  5896     02B2  1822               	btfsc	___flmul@bexp^(0+128),0
  5897     02B3  17A9               	bsf	(___flmul@prod^(0+128)+2),7
  5898     02B4  3622               	lsrf	___flmul@bexp^(0+128),w
  5899     02B5  00AA               	movwf	(___flmul@prod^(0+128)+3)
  5900     02B6                     l1122:
  5901     02B6  0820               	movf	___flmul@sign^(0+128),w
  5902     02B7  0020               	movlb	0	; select bank0
  5903     02B8  00E0               	movwf	??___flmul
  5904     02B9  0860               	movf	??___flmul,w
  5905     02BA  0021               	movlb	1	; select bank1
  5906     02BB  04AA               	iorwf	(___flmul@prod^(0+128)+3),f
  5907     02BC  082A               	movf	(___flmul@prod+3)^(0+128),w
  5908     02BD  0020               	movlb	0	; select bank0
  5909     02BE  00DB               	movwf	?___flmul+3
  5910     02BF  0021               	movlb	1	; select bank1
  5911     02C0  0829               	movf	(___flmul@prod+2)^(0+128),w
  5912     02C1  0020               	movlb	0	; select bank0
  5913     02C2  00DA               	movwf	?___flmul+2
  5914     02C3  0021               	movlb	1	; select bank1
  5915     02C4  0828               	movf	(___flmul@prod+1)^(0+128),w
  5916     02C5  0020               	movlb	0	; select bank0
  5917     02C6  00D9               	movwf	?___flmul+1
  5918     02C7  0021               	movlb	1	; select bank1
  5919     02C8  0827               	movf	___flmul@prod^(0+128),w
  5920     02C9  0020               	movlb	0	; select bank0
  5921     02CA  00D8               	movwf	?___flmul
  5922     02CB  0008               	return
  5923     02CC                     __end_of___flmul:
  5924                           
  5925                           	psect	text12
  5926     0988                     __ptext12:	
  5927 ;; *************** function __Umul8_16 *****************
  5928 ;; Defined at:
  5929 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\Umul8_16.c"
  5930 ;; Parameters:    Size  Location     Type
  5931 ;;  multiplier      1    wreg     unsigned char 
  5932 ;;  multiplicand    1    3[COMMON] unsigned char 
  5933 ;; Auto vars:     Size  Location     Type
  5934 ;;  multiplier      1    4[BANK0 ] unsigned char 
  5935 ;;  word_mpld       2    2[BANK0 ] unsigned int 
  5936 ;;  product         2    0[BANK0 ] unsigned int 
  5937 ;; Return value:  Size  Location     Type
  5938 ;;                  2    3[COMMON] unsigned int 
  5939 ;; Registers used:
  5940 ;;		wreg, status,2, status,0
  5941 ;; Tracked objects:
  5942 ;;		On entry : 1F/0
  5943 ;;		On exit  : 1F/0
  5944 ;;		Unchanged: 0/0
  5945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5946 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5947 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5948 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5949 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5950 ;;Total ram usage:        9 bytes
  5951 ;; Hardware stack levels used: 1
  5952 ;; Hardware stack levels required when called: 4
  5953 ;; This function calls:
  5954 ;;		Nothing
  5955 ;; This function is called by:
  5956 ;;		___flmul
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960     0988                     __Umul8_16:	
  5961                           ;psect for function __Umul8_16
  5962                           
  5963                           
  5964                           ;incstack = 0
  5965                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  5966                           ;__Umul8_16@multiplier stored from wreg
  5967     0988  00A4               	movwf	__Umul8_16@multiplier
  5968     0989  01A0               	clrf	__Umul8_16@product
  5969     098A  01A1               	clrf	__Umul8_16@product+1
  5970     098B  0873               	movf	__Umul8_16@multiplicand,w
  5971     098C  00F5               	movwf	??__Umul8_16
  5972     098D  01F6               	clrf	??__Umul8_16+1
  5973     098E  0875               	movf	??__Umul8_16,w
  5974     098F  00A2               	movwf	__Umul8_16@word_mpld
  5975     0990  0876               	movf	??__Umul8_16+1,w
  5976     0991  00A3               	movwf	__Umul8_16@word_mpld+1
  5977     0992                     l3345:
  5978     0992  1C24               	btfss	__Umul8_16@multiplier,0
  5979     0993  2998               	goto	l1129
  5980     0994  0822               	movf	__Umul8_16@word_mpld,w
  5981     0995  07A0               	addwf	__Umul8_16@product,f
  5982     0996  0823               	movf	__Umul8_16@word_mpld+1,w
  5983     0997  3DA1               	addwfc	__Umul8_16@product+1,f
  5984     0998                     l1129:
  5985     0998  3001               	movlw	1
  5986     0999                     u4175:
  5987     0999  35A2               	lslf	__Umul8_16@word_mpld,f
  5988     099A  0DA3               	rlf	__Umul8_16@word_mpld+1,f
  5989     099B  0B89               	decfsz	9,f
  5990     099C  2999               	goto	u4175
  5991     099D  1003               	clrc
  5992     099E  0CA4               	rrf	__Umul8_16@multiplier,f
  5993     099F  0824               	movf	__Umul8_16@multiplier,w
  5994     09A0  1D03               	btfss	3,2
  5995     09A1  2992               	goto	l3345
  5996     09A2  0821               	movf	__Umul8_16@product+1,w
  5997     09A3  00F4               	movwf	?__Umul8_16+1
  5998     09A4  0820               	movf	__Umul8_16@product,w
  5999     09A5  00F3               	movwf	?__Umul8_16
  6000     09A6  0008               	return
  6001     09A7                     __end_of__Umul8_16:
  6002                           
  6003                           	psect	text13
  6004     0B2E                     __ptext13:	
  6005 ;; *************** function ___flge *****************
  6006 ;; Defined at:
  6007 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\flge.c"
  6008 ;; Parameters:    Size  Location     Type
  6009 ;;  ff1             4    0[BANK0 ] unsigned int 
  6010 ;;  ff2             4    4[BANK0 ] unsigned int 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;		None
  6013 ;; Return value:  Size  Location     Type
  6014 ;;		None               void
  6015 ;; Registers used:
  6016 ;;		wreg, status,2, status,0
  6017 ;; Tracked objects:
  6018 ;;		On entry : 1F/0
  6019 ;;		On exit  : 1F/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6022 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;Total ram usage:       12 bytes
  6027 ;; Hardware stack levels used: 1
  6028 ;; Hardware stack levels required when called: 4
  6029 ;; This function calls:
  6030 ;;		Nothing
  6031 ;; This function is called by:
  6032 ;;		_my_log
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036     0B2E                     ___flge:	
  6037                           ;psect for function ___flge
  6038                           
  6039                           
  6040                           ;incstack = 0
  6041                           ; Regs used in ___flge: [wreg+status,2+status,0]
  6042     0B2E  3000               	movlw	0
  6043     0B2F  0520               	andwf	___flge@ff1,w
  6044     0B30  00F3               	movwf	??___flge
  6045     0B31  3000               	movlw	0
  6046     0B32  0521               	andwf	___flge@ff1+1,w
  6047     0B33  00F4               	movwf	??___flge+1
  6048     0B34  3080               	movlw	128
  6049     0B35  0522               	andwf	___flge@ff1+2,w
  6050     0B36  00F5               	movwf	??___flge+2
  6051     0B37  307F               	movlw	127
  6052     0B38  0523               	andwf	___flge@ff1+3,w
  6053     0B39  00F6               	movwf	??___flge+3
  6054     0B3A  0876               	movf	??___flge+3,w
  6055     0B3B  0475               	iorwf	??___flge+2,w
  6056     0B3C  0474               	iorwf	??___flge+1,w
  6057     0B3D  0473               	iorwf	??___flge,w
  6058     0B3E  1D03               	skipz
  6059     0B3F  2B48               	goto	l891
  6060     0B40  3000               	movlw	0
  6061     0B41  00A3               	movwf	___flge@ff1+3
  6062     0B42  3000               	movlw	0
  6063     0B43  00A2               	movwf	___flge@ff1+2
  6064     0B44  3000               	movlw	0
  6065     0B45  00A1               	movwf	___flge@ff1+1
  6066     0B46  3000               	movlw	0
  6067     0B47  00A0               	movwf	___flge@ff1
  6068     0B48                     l891:
  6069     0B48  3000               	movlw	0
  6070     0B49  0524               	andwf	___flge@ff2,w
  6071     0B4A  00F3               	movwf	??___flge
  6072     0B4B  3000               	movlw	0
  6073     0B4C  0525               	andwf	___flge@ff2+1,w
  6074     0B4D  00F4               	movwf	??___flge+1
  6075     0B4E  3080               	movlw	128
  6076     0B4F  0526               	andwf	___flge@ff2+2,w
  6077     0B50  00F5               	movwf	??___flge+2
  6078     0B51  307F               	movlw	127
  6079     0B52  0527               	andwf	___flge@ff2+3,w
  6080     0B53  00F6               	movwf	??___flge+3
  6081     0B54  0876               	movf	??___flge+3,w
  6082     0B55  0475               	iorwf	??___flge+2,w
  6083     0B56  0474               	iorwf	??___flge+1,w
  6084     0B57  0473               	iorwf	??___flge,w
  6085     0B58  1D03               	skipz
  6086     0B59  2B62               	goto	l3361
  6087     0B5A  3000               	movlw	0
  6088     0B5B  00A7               	movwf	___flge@ff2+3
  6089     0B5C  3000               	movlw	0
  6090     0B5D  00A6               	movwf	___flge@ff2+2
  6091     0B5E  3000               	movlw	0
  6092     0B5F  00A5               	movwf	___flge@ff2+1
  6093     0B60  3000               	movlw	0
  6094     0B61  00A4               	movwf	___flge@ff2
  6095     0B62                     l3361:
  6096     0B62  1FA3               	btfss	___flge@ff1+3,7
  6097     0B63  2B7C               	goto	l3365
  6098     0B64  3000               	movlw	0
  6099     0B65  00F3               	movwf	??___flge
  6100     0B66  3000               	movlw	0
  6101     0B67  00F4               	movwf	??___flge+1
  6102     0B68  3000               	movlw	0
  6103     0B69  00F5               	movwf	??___flge+2
  6104     0B6A  3080               	movlw	128
  6105     0B6B  00F6               	movwf	??___flge+3
  6106     0B6C  0820               	movf	___flge@ff1,w
  6107     0B6D  02F3               	subwf	??___flge,f
  6108     0B6E  0821               	movf	___flge@ff1+1,w
  6109     0B6F  3BF4               	subwfb	??___flge+1,f
  6110     0B70  0822               	movf	___flge@ff1+2,w
  6111     0B71  3BF5               	subwfb	??___flge+2,f
  6112     0B72  0823               	movf	___flge@ff1+3,w
  6113     0B73  3BF6               	subwfb	??___flge+3,f
  6114     0B74  0876               	movf	??___flge+3,w
  6115     0B75  00A3               	movwf	___flge@ff1+3
  6116     0B76  0875               	movf	??___flge+2,w
  6117     0B77  00A2               	movwf	___flge@ff1+2
  6118     0B78  0874               	movf	??___flge+1,w
  6119     0B79  00A1               	movwf	___flge@ff1+1
  6120     0B7A  0873               	movf	??___flge,w
  6121     0B7B  00A0               	movwf	___flge@ff1
  6122     0B7C                     l3365:
  6123     0B7C  1FA7               	btfss	___flge@ff2+3,7
  6124     0B7D  2B96               	goto	l894
  6125     0B7E  3000               	movlw	0
  6126     0B7F  00F3               	movwf	??___flge
  6127     0B80  3000               	movlw	0
  6128     0B81  00F4               	movwf	??___flge+1
  6129     0B82  3000               	movlw	0
  6130     0B83  00F5               	movwf	??___flge+2
  6131     0B84  3080               	movlw	128
  6132     0B85  00F6               	movwf	??___flge+3
  6133     0B86  0824               	movf	___flge@ff2,w
  6134     0B87  02F3               	subwf	??___flge,f
  6135     0B88  0825               	movf	___flge@ff2+1,w
  6136     0B89  3BF4               	subwfb	??___flge+1,f
  6137     0B8A  0826               	movf	___flge@ff2+2,w
  6138     0B8B  3BF5               	subwfb	??___flge+2,f
  6139     0B8C  0827               	movf	___flge@ff2+3,w
  6140     0B8D  3BF6               	subwfb	??___flge+3,f
  6141     0B8E  0876               	movf	??___flge+3,w
  6142     0B8F  00A7               	movwf	___flge@ff2+3
  6143     0B90  0875               	movf	??___flge+2,w
  6144     0B91  00A6               	movwf	___flge@ff2+2
  6145     0B92  0874               	movf	??___flge+1,w
  6146     0B93  00A5               	movwf	___flge@ff2+1
  6147     0B94  0873               	movf	??___flge,w
  6148     0B95  00A4               	movwf	___flge@ff2
  6149     0B96                     l894:
  6150     0B96  3080               	movlw	128
  6151     0B97  06A3               	xorwf	___flge@ff1+3,f
  6152     0B98  3080               	movlw	128
  6153     0B99  06A7               	xorwf	___flge@ff2+3,f
  6154     0B9A  0827               	movf	___flge@ff2+3,w
  6155     0B9B  0223               	subwf	___flge@ff1+3,w
  6156     0B9C  1D03               	skipz
  6157     0B9D  0008               	return
  6158     0B9E  0826               	movf	___flge@ff2+2,w
  6159     0B9F  0222               	subwf	___flge@ff1+2,w
  6160     0BA0  1D03               	skipz
  6161     0BA1  0008               	return
  6162     0BA2  0825               	movf	___flge@ff2+1,w
  6163     0BA3  0221               	subwf	___flge@ff1+1,w
  6164     0BA4  1D03               	skipz
  6165     0BA5  0008               	return
  6166     0BA6  0824               	movf	___flge@ff2,w
  6167     0BA7  0220               	subwf	___flge@ff1,w
  6168     0BA8  0008               	return
  6169     0BA9                     __end_of___flge:
  6170                           
  6171                           	psect	text14
  6172     0CE0                     __ptext14:	
  6173 ;; *************** function ___fldiv *****************
  6174 ;; Defined at:
  6175 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\sprcdiv.c"
  6176 ;; Parameters:    Size  Location     Type
  6177 ;;  a               4   10[BANK0 ] unsigned int 
  6178 ;;  b               4   14[BANK0 ] unsigned int 
  6179 ;; Auto vars:     Size  Location     Type
  6180 ;;  grs             4   30[BANK0 ] unsigned long 
  6181 ;;  rem             4   23[BANK0 ] unsigned long 
  6182 ;;  new_exp         2   28[BANK0 ] int 
  6183 ;;  aexp            1   35[BANK0 ] unsigned char 
  6184 ;;  bexp            1   34[BANK0 ] unsigned char 
  6185 ;;  sign            1   27[BANK0 ] unsigned char 
  6186 ;; Return value:  Size  Location     Type
  6187 ;;                  4   10[BANK0 ] unsigned char 
  6188 ;; Registers used:
  6189 ;;		wreg, status,2, status,0
  6190 ;; Tracked objects:
  6191 ;;		On entry : 1F/0
  6192 ;;		On exit  : 1F/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6195 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6199 ;;Total ram usage:       26 bytes
  6200 ;; Hardware stack levels used: 1
  6201 ;; Hardware stack levels required when called: 4
  6202 ;; This function calls:
  6203 ;;		Nothing
  6204 ;; This function is called by:
  6205 ;;		__ReadSensor
  6206 ;;		_my_log
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210     0CE0                     ___fldiv:	
  6211                           ;psect for function ___fldiv
  6212                           
  6213                           
  6214                           ;incstack = 0
  6215                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
  6216     0CE0  0831               	movf	___fldiv@b+3,w
  6217     0CE1  3980               	andlw	128
  6218     0CE2  00BB               	movwf	___fldiv@sign
  6219     0CE3  3531               	lslf	___fldiv@b+3,w
  6220     0CE4  00C2               	movwf	___fldiv@bexp
  6221     0CE5  1BB0               	btfsc	___fldiv@b+2,7
  6222     0CE6  1442               	bsf	___fldiv@bexp,0
  6223     0CE7  0842               	movf	___fldiv@bexp,w
  6224     0CE8  1903               	btfsc	3,2
  6225     0CE9  2CF8               	goto	l3407
  6226     0CEA  0A42               	incf	___fldiv@bexp,w
  6227     0CEB  1D03               	btfss	3,2
  6228     0CEC  2CF5               	goto	l3403
  6229     0CED  3000               	movlw	0
  6230     0CEE  00B1               	movwf	___fldiv@b+3
  6231     0CEF  3000               	movlw	0
  6232     0CF0  00B0               	movwf	___fldiv@b+2
  6233     0CF1  3000               	movlw	0
  6234     0CF2  00AF               	movwf	___fldiv@b+1
  6235     0CF3  3000               	movlw	0
  6236     0CF4  00AE               	movwf	___fldiv@b
  6237     0CF5                     l3403:
  6238     0CF5  17B0               	bsf	___fldiv@b+2,7
  6239     0CF6  01B1               	clrf	___fldiv@b+3
  6240     0CF7  2D00               	goto	l3409
  6241     0CF8                     l3407:
  6242     0CF8  3000               	movlw	0
  6243     0CF9  00B1               	movwf	___fldiv@b+3
  6244     0CFA  3000               	movlw	0
  6245     0CFB  00B0               	movwf	___fldiv@b+2
  6246     0CFC  3000               	movlw	0
  6247     0CFD  00AF               	movwf	___fldiv@b+1
  6248     0CFE  3000               	movlw	0
  6249     0CFF  00AE               	movwf	___fldiv@b
  6250     0D00                     l3409:
  6251     0D00  082D               	movf	___fldiv@a+3,w
  6252     0D01  3980               	andlw	128
  6253     0D02  00B2               	movwf	??___fldiv
  6254     0D03  0832               	movf	??___fldiv,w
  6255     0D04  06BB               	xorwf	___fldiv@sign,f
  6256     0D05  352D               	lslf	___fldiv@a+3,w
  6257     0D06  00C3               	movwf	___fldiv@aexp
  6258     0D07  1BAC               	btfsc	___fldiv@a+2,7
  6259     0D08  1443               	bsf	___fldiv@aexp,0
  6260     0D09  0843               	movf	___fldiv@aexp,w
  6261     0D0A  1903               	btfsc	3,2
  6262     0D0B  2D1A               	goto	l3427
  6263     0D0C  0A43               	incf	___fldiv@aexp,w
  6264     0D0D  1D03               	btfss	3,2
  6265     0D0E  2D17               	goto	l3423
  6266     0D0F  3000               	movlw	0
  6267     0D10  00AD               	movwf	___fldiv@a+3
  6268     0D11  3000               	movlw	0
  6269     0D12  00AC               	movwf	___fldiv@a+2
  6270     0D13  3000               	movlw	0
  6271     0D14  00AB               	movwf	___fldiv@a+1
  6272     0D15  3000               	movlw	0
  6273     0D16  00AA               	movwf	___fldiv@a
  6274     0D17                     l3423:
  6275     0D17  17AC               	bsf	___fldiv@a+2,7
  6276     0D18  01AD               	clrf	___fldiv@a+3
  6277     0D19  2D22               	goto	l1070
  6278     0D1A                     l3427:
  6279     0D1A  3000               	movlw	0
  6280     0D1B  00AD               	movwf	___fldiv@a+3
  6281     0D1C  3000               	movlw	0
  6282     0D1D  00AC               	movwf	___fldiv@a+2
  6283     0D1E  3000               	movlw	0
  6284     0D1F  00AB               	movwf	___fldiv@a+1
  6285     0D20  3000               	movlw	0
  6286     0D21  00AA               	movwf	___fldiv@a
  6287     0D22                     l1070:
  6288     0D22  082D               	movf	___fldiv@a+3,w
  6289     0D23  042C               	iorwf	___fldiv@a+2,w
  6290     0D24  042B               	iorwf	___fldiv@a+1,w
  6291     0D25  042A               	iorwf	___fldiv@a,w
  6292     0D26  1D03               	skipz
  6293     0D27  2D41               	goto	l3437
  6294     0D28  3000               	movlw	0
  6295     0D29  00B1               	movwf	___fldiv@b+3
  6296     0D2A  3000               	movlw	0
  6297     0D2B  00B0               	movwf	___fldiv@b+2
  6298     0D2C  3000               	movlw	0
  6299     0D2D  00AF               	movwf	___fldiv@b+1
  6300     0D2E  3000               	movlw	0
  6301     0D2F  00AE               	movwf	___fldiv@b
  6302     0D30  3080               	movlw	128
  6303     0D31  04B0               	iorwf	___fldiv@b+2,f
  6304     0D32  307F               	movlw	127
  6305     0D33  04B1               	iorwf	___fldiv@b+3,f
  6306     0D34                     L4:
  6307     0D34  083B               	movf	___fldiv@sign,w
  6308     0D35  00B2               	movwf	??___fldiv
  6309     0D36  0832               	movf	??___fldiv,w
  6310     0D37  04B1               	iorwf	___fldiv@b+3,f
  6311     0D38  0831               	movf	___fldiv@b+3,w
  6312     0D39  00AD               	movwf	?___fldiv+3
  6313     0D3A  0830               	movf	___fldiv@b+2,w
  6314     0D3B  00AC               	movwf	?___fldiv+2
  6315     0D3C  082F               	movf	___fldiv@b+1,w
  6316     0D3D  00AB               	movwf	?___fldiv+1
  6317     0D3E  082E               	movf	___fldiv@b,w
  6318     0D3F  00AA               	movwf	?___fldiv
  6319     0D40  0008               	return
  6320     0D41                     l3437:
  6321     0D41  0842               	movf	___fldiv@bexp,w
  6322     0D42  1D03               	btfss	3,2
  6323     0D43  2D4D               	goto	l3443
  6324     0D44  3000               	movlw	0
  6325     0D45  00AD               	movwf	?___fldiv+3
  6326     0D46  3000               	movlw	0
  6327     0D47  00AC               	movwf	?___fldiv+2
  6328     0D48  3000               	movlw	0
  6329     0D49  00AB               	movwf	?___fldiv+1
  6330     0D4A  3000               	movlw	0
  6331     0D4B  00AA               	movwf	?___fldiv
  6332     0D4C  0008               	return
  6333     0D4D                     l3443:
  6334     0D4D  0842               	movf	___fldiv@bexp,w
  6335     0D4E  00B2               	movwf	??___fldiv
  6336     0D4F  01B3               	clrf	??___fldiv+1
  6337     0D50  0833               	movf	??___fldiv+1,w
  6338     0D51  00B5               	movwf	??___fldiv+3
  6339     0D52  0843               	movf	___fldiv@aexp,w
  6340     0D53  0232               	subwf	??___fldiv,w
  6341     0D54  00B4               	movwf	??___fldiv+2
  6342     0D55  1C03               	skipc
  6343     0D56  03B5               	decf	??___fldiv+3,f
  6344     0D57  0834               	movf	??___fldiv+2,w
  6345     0D58  3E7F               	addlw	127
  6346     0D59  00BC               	movwf	___fldiv@new_exp
  6347     0D5A  3000               	movlw	0
  6348     0D5B  3D35               	addwfc	??___fldiv+3,w
  6349     0D5C  00BD               	movwf	___fldiv@new_exp+1
  6350     0D5D  0831               	movf	___fldiv@b+3,w
  6351     0D5E  00BA               	movwf	___fldiv@rem+3
  6352     0D5F  0830               	movf	___fldiv@b+2,w
  6353     0D60  00B9               	movwf	___fldiv@rem+2
  6354     0D61  082F               	movf	___fldiv@b+1,w
  6355     0D62  00B8               	movwf	___fldiv@rem+1
  6356     0D63  082E               	movf	___fldiv@b,w
  6357     0D64  00B7               	movwf	___fldiv@rem
  6358     0D65  3000               	movlw	0
  6359     0D66  00B1               	movwf	___fldiv@b+3
  6360     0D67  3000               	movlw	0
  6361     0D68  00B0               	movwf	___fldiv@b+2
  6362     0D69  3000               	movlw	0
  6363     0D6A  00AF               	movwf	___fldiv@b+1
  6364     0D6B  3000               	movlw	0
  6365     0D6C  00AE               	movwf	___fldiv@b
  6366     0D6D  3000               	movlw	0
  6367     0D6E  00C1               	movwf	___fldiv@grs+3
  6368     0D6F  3000               	movlw	0
  6369     0D70  00C0               	movwf	___fldiv@grs+2
  6370     0D71  3000               	movlw	0
  6371     0D72  00BF               	movwf	___fldiv@grs+1
  6372     0D73  3000               	movlw	0
  6373     0D74  00BE               	movwf	___fldiv@grs
  6374     0D75  01C3               	clrf	___fldiv@aexp
  6375     0D76                     l3471:
  6376     0D76  301A               	movlw	26
  6377     0D77  0243               	subwf	___fldiv@aexp,w
  6378     0D78  1803               	btfsc	3,0
  6379     0D79  2DB2               	goto	l3473
  6380     0D7A  0843               	movf	___fldiv@aexp,w
  6381     0D7B  1903               	btfsc	3,2
  6382     0D7C  2D94               	goto	l3463
  6383     0D7D  3001               	movlw	1
  6384     0D7E                     u4345:
  6385     0D7E  35B7               	lslf	___fldiv@rem,f
  6386     0D7F  0DB8               	rlf	___fldiv@rem+1,f
  6387     0D80  0DB9               	rlf	___fldiv@rem+2,f
  6388     0D81  0DBA               	rlf	___fldiv@rem+3,f
  6389     0D82  0B89               	decfsz	9,f
  6390     0D83  2D7E               	goto	u4345
  6391     0D84  3001               	movlw	1
  6392     0D85                     u4355:
  6393     0D85  35AE               	lslf	___fldiv@b,f
  6394     0D86  0DAF               	rlf	___fldiv@b+1,f
  6395     0D87  0DB0               	rlf	___fldiv@b+2,f
  6396     0D88  0DB1               	rlf	___fldiv@b+3,f
  6397     0D89  0B89               	decfsz	9,f
  6398     0D8A  2D85               	goto	u4355
  6399     0D8B  1BC1               	btfsc	___fldiv@grs+3,7
  6400     0D8C  142E               	bsf	___fldiv@b,0
  6401     0D8D  3001               	movlw	1
  6402     0D8E                     u4375:
  6403     0D8E  35BE               	lslf	___fldiv@grs,f
  6404     0D8F  0DBF               	rlf	___fldiv@grs+1,f
  6405     0D90  0DC0               	rlf	___fldiv@grs+2,f
  6406     0D91  0DC1               	rlf	___fldiv@grs+3,f
  6407     0D92  0B89               	decfsz	9,f
  6408     0D93  2D8E               	goto	u4375
  6409     0D94                     l3463:
  6410     0D94  082D               	movf	___fldiv@a+3,w
  6411     0D95  023A               	subwf	___fldiv@rem+3,w
  6412     0D96  1D03               	skipz
  6413     0D97  2DA2               	goto	u4385
  6414     0D98  082C               	movf	___fldiv@a+2,w
  6415     0D99  0239               	subwf	___fldiv@rem+2,w
  6416     0D9A  1D03               	skipz
  6417     0D9B  2DA2               	goto	u4385
  6418     0D9C  082B               	movf	___fldiv@a+1,w
  6419     0D9D  0238               	subwf	___fldiv@rem+1,w
  6420     0D9E  1D03               	skipz
  6421     0D9F  2DA2               	goto	u4385
  6422     0DA0  082A               	movf	___fldiv@a,w
  6423     0DA1  0237               	subwf	___fldiv@rem,w
  6424     0DA2                     u4385:
  6425     0DA2  1C03               	skipc
  6426     0DA3  2DAD               	goto	l3469
  6427     0DA4  1741               	bsf	___fldiv@grs+3,6
  6428     0DA5  082A               	movf	___fldiv@a,w
  6429     0DA6  02B7               	subwf	___fldiv@rem,f
  6430     0DA7  082B               	movf	___fldiv@a+1,w
  6431     0DA8  3BB8               	subwfb	___fldiv@rem+1,f
  6432     0DA9  082C               	movf	___fldiv@a+2,w
  6433     0DAA  3BB9               	subwfb	___fldiv@rem+2,f
  6434     0DAB  082D               	movf	___fldiv@a+3,w
  6435     0DAC  3BBA               	subwfb	___fldiv@rem+3,f
  6436     0DAD                     l3469:
  6437     0DAD  3001               	movlw	1
  6438     0DAE  00B2               	movwf	??___fldiv
  6439     0DAF  0832               	movf	??___fldiv,w
  6440     0DB0  07C3               	addwf	___fldiv@aexp,f
  6441     0DB1  2D76               	goto	l3471
  6442     0DB2                     l3473:
  6443     0DB2  083A               	movf	___fldiv@rem+3,w
  6444     0DB3  0439               	iorwf	___fldiv@rem+2,w
  6445     0DB4  0438               	iorwf	___fldiv@rem+1,w
  6446     0DB5  0437               	iorwf	___fldiv@rem,w
  6447     0DB6  1D03               	btfss	3,2
  6448     0DB7  143E               	bsf	___fldiv@grs,0
  6449     0DB8                     l3487:
  6450     0DB8  1BB0               	btfsc	___fldiv@b+2,7
  6451     0DB9  2DCF               	goto	l3489
  6452     0DBA  3001               	movlw	1
  6453     0DBB                     u4415:
  6454     0DBB  35AE               	lslf	___fldiv@b,f
  6455     0DBC  0DAF               	rlf	___fldiv@b+1,f
  6456     0DBD  0DB0               	rlf	___fldiv@b+2,f
  6457     0DBE  0DB1               	rlf	___fldiv@b+3,f
  6458     0DBF  0B89               	decfsz	9,f
  6459     0DC0  2DBB               	goto	u4415
  6460     0DC1  1BC1               	btfsc	___fldiv@grs+3,7
  6461     0DC2  142E               	bsf	___fldiv@b,0
  6462     0DC3  3001               	movlw	1
  6463     0DC4                     u4435:
  6464     0DC4  35BE               	lslf	___fldiv@grs,f
  6465     0DC5  0DBF               	rlf	___fldiv@grs+1,f
  6466     0DC6  0DC0               	rlf	___fldiv@grs+2,f
  6467     0DC7  0DC1               	rlf	___fldiv@grs+3,f
  6468     0DC8  0B89               	decfsz	9,f
  6469     0DC9  2DC4               	goto	u4435
  6470     0DCA  30FF               	movlw	255
  6471     0DCB  07BC               	addwf	___fldiv@new_exp,f
  6472     0DCC  30FF               	movlw	255
  6473     0DCD  3DBD               	addwfc	___fldiv@new_exp+1,f
  6474     0DCE  2DB8               	goto	l3487
  6475     0DCF                     l3489:
  6476     0DCF  01C3               	clrf	___fldiv@aexp
  6477     0DD0  1FC1               	btfss	___fldiv@grs+3,7
  6478     0DD1  2DE8               	goto	l3499
  6479     0DD2  30FF               	movlw	255
  6480     0DD3  053E               	andwf	___fldiv@grs,w
  6481     0DD4  00B2               	movwf	??___fldiv
  6482     0DD5  30FF               	movlw	255
  6483     0DD6  053F               	andwf	___fldiv@grs+1,w
  6484     0DD7  00B3               	movwf	??___fldiv+1
  6485     0DD8  30FF               	movlw	255
  6486     0DD9  0540               	andwf	___fldiv@grs+2,w
  6487     0DDA  00B4               	movwf	??___fldiv+2
  6488     0DDB  307F               	movlw	127
  6489     0DDC  0541               	andwf	___fldiv@grs+3,w
  6490     0DDD  00B5               	movwf	??___fldiv+3
  6491     0DDE  0835               	movf	??___fldiv+3,w
  6492     0DDF  0434               	iorwf	??___fldiv+2,w
  6493     0DE0  0433               	iorwf	??___fldiv+1,w
  6494     0DE1  0432               	iorwf	??___fldiv,w
  6495     0DE2  1903               	skipnz
  6496     0DE3  182E               	btfsc	___fldiv@b,0
  6497     0DE4  2DE6               	goto	l3495
  6498     0DE5  2DE8               	goto	l3499
  6499     0DE6                     l3495:
  6500     0DE6  01C3               	clrf	___fldiv@aexp
  6501     0DE7  0AC3               	incf	___fldiv@aexp,f
  6502     0DE8                     l3499:
  6503     0DE8  0843               	movf	___fldiv@aexp,w
  6504     0DE9  1903               	btfsc	3,2
  6505     0DEA  2E11               	goto	l3509
  6506     0DEB  3001               	movlw	1
  6507     0DEC  07AE               	addwf	___fldiv@b,f
  6508     0DED  3000               	movlw	0
  6509     0DEE  3DAF               	addwfc	___fldiv@b+1,f
  6510     0DEF  3000               	movlw	0
  6511     0DF0  3DB0               	addwfc	___fldiv@b+2,f
  6512     0DF1  3000               	movlw	0
  6513     0DF2  3DB1               	addwfc	___fldiv@b+3,f
  6514     0DF3  1C31               	btfss	___fldiv@b+3,0
  6515     0DF4  2E11               	goto	l3509
  6516     0DF5  082E               	movf	___fldiv@b,w
  6517     0DF6  00B2               	movwf	??___fldiv
  6518     0DF7  082F               	movf	___fldiv@b+1,w
  6519     0DF8  00B3               	movwf	??___fldiv+1
  6520     0DF9  0830               	movf	___fldiv@b+2,w
  6521     0DFA  00B4               	movwf	??___fldiv+2
  6522     0DFB  0831               	movf	___fldiv@b+3,w
  6523     0DFC  00B5               	movwf	??___fldiv+3
  6524     0DFD  3001               	movlw	1
  6525     0DFE  00B6               	movwf	??___fldiv+4
  6526     0DFF                     u4505:
  6527     0DFF  37B5               	asrf	??___fldiv+3,f
  6528     0E00  0CB4               	rrf	??___fldiv+2,f
  6529     0E01  0CB3               	rrf	??___fldiv+1,f
  6530     0E02  0CB2               	rrf	??___fldiv,f
  6531     0E03  0BB6               	decfsz	??___fldiv+4,f
  6532     0E04  2DFF               	goto	u4505
  6533     0E05  0835               	movf	??___fldiv+3,w
  6534     0E06  00B1               	movwf	___fldiv@b+3
  6535     0E07  0834               	movf	??___fldiv+2,w
  6536     0E08  00B0               	movwf	___fldiv@b+2
  6537     0E09  0833               	movf	??___fldiv+1,w
  6538     0E0A  00AF               	movwf	___fldiv@b+1
  6539     0E0B  0832               	movf	??___fldiv,w
  6540     0E0C  00AE               	movwf	___fldiv@b
  6541     0E0D  3001               	movlw	1
  6542     0E0E  07BC               	addwf	___fldiv@new_exp,f
  6543     0E0F  3000               	movlw	0
  6544     0E10  3DBD               	addwfc	___fldiv@new_exp+1,f
  6545     0E11                     l3509:
  6546     0E11  083D               	movf	___fldiv@new_exp+1,w
  6547     0E12  3A80               	xorlw	128
  6548     0E13  00B2               	movwf	??___fldiv
  6549     0E14  3080               	movlw	128
  6550     0E15  0232               	subwf	??___fldiv,w
  6551     0E16  1D03               	skipz
  6552     0E17  2E1A               	goto	u4515
  6553     0E18  30FF               	movlw	255
  6554     0E19  023C               	subwf	___fldiv@new_exp,w
  6555     0E1A                     u4515:
  6556     0E1A  1C03               	skipc
  6557     0E1B  2E29               	goto	l1091
  6558     0E1C  30FF               	movlw	255
  6559     0E1D  0020               	movlb	0	; select bank0
  6560     0E1E  00BC               	movwf	___fldiv@new_exp
  6561     0E1F  3000               	movlw	0
  6562     0E20  00BD               	movwf	___fldiv@new_exp+1
  6563     0E21  3000               	movlw	0
  6564     0E22  00B1               	movwf	___fldiv@b+3
  6565     0E23  3000               	movlw	0
  6566     0E24  00B0               	movwf	___fldiv@b+2
  6567     0E25  3000               	movlw	0
  6568     0E26  00AF               	movwf	___fldiv@b+1
  6569     0E27  3000               	movlw	0
  6570     0E28  00AE               	movwf	___fldiv@b
  6571     0E29                     l1091:
  6572     0E29  0020               	movlb	0	; select bank0
  6573     0E2A  083D               	movf	___fldiv@new_exp+1,w
  6574     0E2B  3A80               	xorlw	128
  6575     0E2C  00B2               	movwf	??___fldiv
  6576     0E2D  3080               	movlw	128
  6577     0E2E  0232               	subwf	??___fldiv,w
  6578     0E2F  1D03               	skipz
  6579     0E30  2E33               	goto	u4525
  6580     0E31  3001               	movlw	1
  6581     0E32  023C               	subwf	___fldiv@new_exp,w
  6582     0E33                     u4525:
  6583     0E33  1803               	skipnc
  6584     0E34  2E41               	goto	l1092
  6585     0E35  0020               	movlb	0	; select bank0
  6586     0E36  01BC               	clrf	___fldiv@new_exp
  6587     0E37  01BD               	clrf	___fldiv@new_exp+1
  6588     0E38  3000               	movlw	0
  6589     0E39  00B1               	movwf	___fldiv@b+3
  6590     0E3A  3000               	movlw	0
  6591     0E3B  00B0               	movwf	___fldiv@b+2
  6592     0E3C  3000               	movlw	0
  6593     0E3D  00AF               	movwf	___fldiv@b+1
  6594     0E3E  3000               	movlw	0
  6595     0E3F  00AE               	movwf	___fldiv@b
  6596     0E40  01BB               	clrf	___fldiv@sign
  6597     0E41                     l1092:
  6598     0E41  0020               	movlb	0	; select bank0
  6599     0E42  083C               	movf	___fldiv@new_exp,w
  6600     0E43  00C2               	movwf	___fldiv@bexp
  6601     0E44  1C42               	btfss	___fldiv@bexp,0
  6602     0E45  2E48               	goto	l3523
  6603     0E46  17B0               	bsf	___fldiv@b+2,7
  6604     0E47  2E4C               	goto	l1094
  6605     0E48                     l3523:
  6606     0E48  307F               	movlw	127
  6607     0E49  00B2               	movwf	??___fldiv
  6608     0E4A  0832               	movf	??___fldiv,w
  6609     0E4B  05B0               	andwf	___fldiv@b+2,f
  6610     0E4C                     l1094:
  6611     0E4C  3642               	lsrf	___fldiv@bexp,w
  6612     0E4D  00B1               	movwf	___fldiv@b+3
  6613     0E4E  2D34               	goto	L4
  6614     0E4F                     __end_of___fldiv:
  6615                           
  6616                           	psect	text15
  6617     0ACC                     __ptext15:	
  6618 ;; *************** function ___fltol *****************
  6619 ;; Defined at:
  6620 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\fltol.c"
  6621 ;; Parameters:    Size  Location     Type
  6622 ;;  f1              4    3[COMMON] unsigned char 
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;  exp1            1    5[BANK0 ] unsigned char 
  6625 ;;  sign1           1    4[BANK0 ] unsigned char 
  6626 ;; Return value:  Size  Location     Type
  6627 ;;                  4    3[COMMON] long 
  6628 ;; Registers used:
  6629 ;;		wreg, status,2, status,0
  6630 ;; Tracked objects:
  6631 ;;		On entry : 1F/2
  6632 ;;		On exit  : 1F/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6635 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6636 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6637 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6638 ;;      Totals:         4       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6639 ;;Total ram usage:       10 bytes
  6640 ;; Hardware stack levels used: 1
  6641 ;; Hardware stack levels required when called: 4
  6642 ;; This function calls:
  6643 ;;		Nothing
  6644 ;; This function is called by:
  6645 ;;		__ReadSensor
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649     0ACC                     ___fltol:	
  6650                           ;psect for function ___fltol
  6651                           
  6652                           
  6653                           ;incstack = 0
  6654                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  6655     0ACC  1003               	clrc
  6656     0ACD  0D75               	rlf	___fltol@f1+2,w
  6657     0ACE  0D76               	rlf	___fltol@f1+3,w
  6658     0ACF  0020               	movlb	0	; select bank0
  6659     0AD0  00A5               	movwf	___fltol@exp1
  6660     0AD1  0825               	movf	___fltol@exp1,w
  6661     0AD2  1D03               	btfss	3,2
  6662     0AD3  2ADD               	goto	l3779
  6663     0AD4                     l3775:
  6664     0AD4  3000               	movlw	0
  6665     0AD5  00F6               	movwf	?___fltol+3
  6666     0AD6  3000               	movlw	0
  6667     0AD7  00F5               	movwf	?___fltol+2
  6668     0AD8  3000               	movlw	0
  6669     0AD9  00F4               	movwf	?___fltol+1
  6670     0ADA  3000               	movlw	0
  6671     0ADB  00F3               	movwf	?___fltol
  6672     0ADC  0008               	return
  6673     0ADD                     l3779:
  6674     0ADD  0873               	movf	___fltol@f1,w
  6675     0ADE  00A0               	movwf	??___fltol
  6676     0ADF  0874               	movf	___fltol@f1+1,w
  6677     0AE0  00A1               	movwf	??___fltol+1
  6678     0AE1  0875               	movf	___fltol@f1+2,w
  6679     0AE2  00A2               	movwf	??___fltol+2
  6680     0AE3  0876               	movf	___fltol@f1+3,w
  6681     0AE4  00A3               	movwf	??___fltol+3
  6682     0AE5  301F               	movlw	31
  6683     0AE6                     u5035:
  6684     0AE6  36A3               	lsrf	??___fltol+3,f
  6685     0AE7  0CA2               	rrf	??___fltol+2,f
  6686     0AE8  0CA1               	rrf	??___fltol+1,f
  6687     0AE9  0CA0               	rrf	??___fltol,f
  6688     0AEA  0B89               	decfsz	9,f
  6689     0AEB  2AE6               	goto	u5035
  6690     0AEC  0820               	movf	??___fltol,w
  6691     0AED  00A4               	movwf	___fltol@sign1
  6692     0AEE  17F5               	bsf	___fltol@f1+2,7
  6693     0AEF  30FF               	movlw	255
  6694     0AF0  05F3               	andwf	___fltol@f1,f
  6695     0AF1  30FF               	movlw	255
  6696     0AF2  05F4               	andwf	___fltol@f1+1,f
  6697     0AF3  30FF               	movlw	255
  6698     0AF4  05F5               	andwf	___fltol@f1+2,f
  6699     0AF5  3000               	movlw	0
  6700     0AF6  05F6               	andwf	___fltol@f1+3,f
  6701     0AF7  3096               	movlw	150
  6702     0AF8  02A5               	subwf	___fltol@exp1,f
  6703     0AF9  1FA5               	btfss	___fltol@exp1,7
  6704     0AFA  2B0E               	goto	l3797
  6705     0AFB  0825               	movf	___fltol@exp1,w
  6706     0AFC  3A80               	xorlw	128
  6707     0AFD  3E97               	addlw	151
  6708     0AFE  1C03               	btfss	3,0
  6709     0AFF  2AD4               	goto	l3775
  6710     0B00                     l3795:
  6711     0B00  3001               	movlw	1
  6712     0B01                     u5065:
  6713     0B01  36F6               	lsrf	___fltol@f1+3,f
  6714     0B02  0CF5               	rrf	___fltol@f1+2,f
  6715     0B03  0CF4               	rrf	___fltol@f1+1,f
  6716     0B04  0CF3               	rrf	___fltol@f1,f
  6717     0B05  0B89               	decfsz	9,f
  6718     0B06  2B01               	goto	u5065
  6719     0B07  3001               	movlw	1
  6720     0B08  00A0               	movwf	??___fltol
  6721     0B09  0820               	movf	??___fltol,w
  6722     0B0A  07A5               	addwf	___fltol@exp1,f
  6723     0B0B  1903               	btfsc	3,2
  6724     0B0C  2B1F               	goto	l3805
  6725     0B0D  2B00               	goto	l3795
  6726     0B0E                     l3797:
  6727     0B0E  3020               	movlw	32
  6728     0B0F  0225               	subwf	___fltol@exp1,w
  6729     0B10  1803               	btfsc	3,0
  6730     0B11  2AD4               	goto	l3775
  6731     0B12                     l914:
  6732     0B12  0825               	movf	___fltol@exp1,w
  6733     0B13  1903               	btfsc	3,2
  6734     0B14  2B1F               	goto	l3805
  6735     0B15  3001               	movlw	1
  6736     0B16                     u5095:
  6737     0B16  35F3               	lslf	___fltol@f1,f
  6738     0B17  0DF4               	rlf	___fltol@f1+1,f
  6739     0B18  0DF5               	rlf	___fltol@f1+2,f
  6740     0B19  0DF6               	rlf	___fltol@f1+3,f
  6741     0B1A  0B89               	decfsz	9,f
  6742     0B1B  2B16               	goto	u5095
  6743     0B1C  3001               	movlw	1
  6744     0B1D  02A5               	subwf	___fltol@exp1,f
  6745     0B1E  2B12               	goto	l914
  6746     0B1F                     l3805:
  6747     0B1F  0824               	movf	___fltol@sign1,w
  6748     0B20  1903               	btfsc	3,2
  6749     0B21  0008               	return
  6750     0B22  09F3               	comf	___fltol@f1,f
  6751     0B23  09F4               	comf	___fltol@f1+1,f
  6752     0B24  09F5               	comf	___fltol@f1+2,f
  6753     0B25  09F6               	comf	___fltol@f1+3,f
  6754     0B26  0AF3               	incf	___fltol@f1,f
  6755     0B27  1903               	skipnz
  6756     0B28  0AF4               	incf	___fltol@f1+1,f
  6757     0B29  1903               	skipnz
  6758     0B2A  0AF5               	incf	___fltol@f1+2,f
  6759     0B2B  1903               	skipnz
  6760     0B2C  0AF6               	incf	___fltol@f1+3,f
  6761     0B2D  0008               	return
  6762     0B2E                     __end_of___fltol:
  6763                           
  6764                           	psect	text16
  6765     07E7                     __ptext16:	
  6766 ;; *************** function _ADC_GetConversion *****************
  6767 ;; Defined at:
  6768 ;;		line 112 in file "mcc_generated_files/adc.c"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;  channel         1    wreg     enum E2490
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;  channel         1    6[COMMON] enum E2490
  6773 ;; Return value:  Size  Location     Type
  6774 ;;                  2    3[COMMON] unsigned short 
  6775 ;; Registers used:
  6776 ;;		wreg, status,2, status,0
  6777 ;; Tracked objects:
  6778 ;;		On entry : 1F/1
  6779 ;;		On exit  : 1F/1
  6780 ;;		Unchanged: 0/0
  6781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6782 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6784 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6785 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6786 ;;Total ram usage:        4 bytes
  6787 ;; Hardware stack levels used: 1
  6788 ;; Hardware stack levels required when called: 4
  6789 ;; This function calls:
  6790 ;;		Nothing
  6791 ;; This function is called by:
  6792 ;;		__ReadSensor
  6793 ;; This function uses a non-reentrant model
  6794 ;;
  6795                           
  6796     07E7                     _ADC_GetConversion:	
  6797                           ;psect for function _ADC_GetConversion
  6798                           
  6799                           
  6800                           ;incstack = 0
  6801                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  6802                           ;ADC_GetConversion@channel stored from wreg
  6803     07E7  00F6               	movwf	ADC_GetConversion@channel
  6804                           
  6805                           ;mcc_generated_files/adc.c: 112: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 113: {;mcc_generated_files/adc.c: 115:     ADCON0bits.CHS = ch
      +                          annel;
  6806     07E8  0876               	movf	ADC_GetConversion@channel,w
  6807     07E9  00F5               	movwf	??_ADC_GetConversion
  6808     07EA  0DF5               	rlf	??_ADC_GetConversion,f
  6809     07EB  0DF5               	rlf	??_ADC_GetConversion,f
  6810     07EC  081D               	movf	29,w	;volatile
  6811     07ED  0675               	xorwf	??_ADC_GetConversion,w
  6812     07EE  3983               	andlw	-125
  6813     07EF  0675               	xorwf	??_ADC_GetConversion,w
  6814     07F0  009D               	movwf	29	;volatile
  6815                           
  6816                           ;mcc_generated_files/adc.c: 118:     ADCON0bits.ADON = 1;
  6817     07F1  141D               	bsf	29,0	;volatile
  6818                           
  6819                           ;mcc_generated_files/adc.c: 121:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  6820     07F2  3003               	movlw	3
  6821     07F3                     u5207:
  6822     07F3  0B89               	decfsz	9,f
  6823     07F4  2FF3               	goto	u5207
  6824     07F5  0000               	nop
  6825                           
  6826                           ;mcc_generated_files/adc.c: 124:     ADCON0bits.GO_nDONE = 1;
  6827     07F6  0021               	movlb	1	; select bank1
  6828     07F7  149D               	bsf	29,1	;volatile
  6829     07F8                     l91:	
  6830                           ;mcc_generated_files/adc.c: 128:     {;mcc_generated_files/adc.c: 129:     }
  6831                           
  6832                           
  6833                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
  6834     07F8  189D               	btfsc	29,1	;volatile
  6835     07F9  2FF8               	goto	l91
  6836                           
  6837                           ;mcc_generated_files/adc.c: 132:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  6838     07FA  081C               	movf	28,w	;volatile
  6839     07FB  00F4               	movwf	?_ADC_GetConversion+1
  6840     07FC  081B               	movf	27,w	;volatile
  6841     07FD  00F3               	movwf	?_ADC_GetConversion
  6842     07FE  0008               	return
  6843     07FF                     __end_of_ADC_GetConversion:
  6844                           
  6845                           	psect	text17
  6846     0A6B                     __ptext17:	
  6847 ;; *************** function __ControlHeat *****************
  6848 ;; Defined at:
  6849 ;;		line 301 in file "main.c"
  6850 ;; Parameters:    Size  Location     Type
  6851 ;;		None
  6852 ;; Auto vars:     Size  Location     Type
  6853 ;;		None
  6854 ;; Return value:  Size  Location     Type
  6855 ;;                  1    wreg      void 
  6856 ;; Registers used:
  6857 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  6858 ;; Tracked objects:
  6859 ;;		On entry : 1F/1
  6860 ;;		On exit  : 0/0
  6861 ;;		Unchanged: 0/0
  6862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6865 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;Total ram usage:        5 bytes
  6868 ;; Hardware stack levels used: 1
  6869 ;; Hardware stack levels required when called: 4
  6870 ;; This function calls:
  6871 ;;		Nothing
  6872 ;; This function is called by:
  6873 ;;		_main
  6874 ;; This function uses a non-reentrant model
  6875 ;;
  6876                           
  6877     0A6B                     __ControlHeat:	
  6878                           ;psect for function __ControlHeat
  6879                           
  6880                           
  6881                           ;main.c: 303:     if (CURRENT_MODE == HEAT_MODE_0)
  6882                           
  6883                           ;incstack = 0
  6884                           ; Regs used in __ControlHeat: [wreg-fsr0h+status,2+status,0+pclath]
  6885     0A6B  0878               	movf	_CURRENT_MODE,w
  6886     0A6C  0479               	iorwf	_CURRENT_MODE+1,w
  6887     0A6D  1903               	btfsc	3,2
  6888     0A6E  2A78               	goto	l3053
  6889     0A6F  2A7B               	goto	l3057
  6890     0A70                     l3059:
  6891     0A70  3000               	movlw	0
  6892     0A71  0021               	movlb	1	; select bank1
  6893     0A72  0244               	subwf	(_HEAT_CALL_TICKS+1)^(0+128),w
  6894     0A73  30B5               	movlw	181
  6895     0A74  1903               	skipnz
  6896     0A75  0243               	subwf	_HEAT_CALL_TICKS^(0+128),w
  6897     0A76  1C03               	skipc
  6898     0A77  2A9D               	goto	l3065
  6899     0A78                     l3053:
  6900                           
  6901                           ;main.c: 304:     {;main.c: 305:         RELAY_STATUS = 0;
  6902     0A78  0020               	movlb	0	; select bank0
  6903     0A79  01E6               	clrf	_RELAY_STATUS
  6904     0A7A  0008               	return
  6905     0A7B                     l3057:
  6906     0A7B  0879               	movf	_CURRENT_MODE+1,w
  6907     0A7C  0085               	movwf	5
  6908     0A7D  0878               	movf	_CURRENT_MODE,w
  6909     0A7E  0084               	movwf	4
  6910     0A7F  3584               	lslf	4,f
  6911     0A80  0D85               	rlf	5,f
  6912     0A81  3000               	movlw	low _SETPOINTS
  6913     0A82  0784               	addwf	4,f
  6914     0A83  3010               	movlw	high _SETPOINTS
  6915     0A84  3D05               	addwfc	5,w
  6916     0A85  3880               	iorlw	128
  6917     0A86  0085               	movwf	5
  6918     0A87  3F00               	moviw [0]fsr0
  6919     0A88  00F3               	movwf	??__ControlHeat
  6920     0A89  3F01               	moviw [1]fsr0
  6921     0A8A  00F4               	movwf	??__ControlHeat+1
  6922     0A8B  0873               	movf	??__ControlHeat,w
  6923     0A8C  3E02               	addlw	2
  6924     0A8D  00F5               	movwf	??__ControlHeat+2
  6925     0A8E  3000               	movlw	0
  6926     0A8F  3D74               	addwfc	??__ControlHeat+1,w
  6927     0A90  00F6               	movwf	??__ControlHeat+3
  6928     0A91  0876               	movf	??__ControlHeat+3,w
  6929     0A92  3A80               	xorlw	128
  6930     0A93  00F7               	movwf	??__ControlHeat+4
  6931     0A94  0846               	movf	(_TEMP+1)^(0+128),w
  6932     0A95  3A80               	xorlw	128
  6933     0A96  0277               	subwf	??__ControlHeat+4,w
  6934     0A97  1D03               	skipz
  6935     0A98  2A9B               	goto	u3565
  6936     0A99  0845               	movf	_TEMP^(0+128),w
  6937     0A9A  0275               	subwf	??__ControlHeat+2,w
  6938     0A9B                     u3565:
  6939     0A9B  1C03               	btfss	3,0
  6940     0A9C  2A70               	goto	l3059
  6941     0A9D                     l3065:
  6942     0A9D  0879               	movf	_CURRENT_MODE+1,w
  6943     0A9E  0085               	movwf	5
  6944     0A9F  0878               	movf	_CURRENT_MODE,w
  6945     0AA0  0084               	movwf	4
  6946     0AA1  3584               	lslf	4,f
  6947     0AA2  0D85               	rlf	5,f
  6948     0AA3  3000               	movlw	low _SETPOINTS
  6949     0AA4  0784               	addwf	4,f
  6950     0AA5  3010               	movlw	high _SETPOINTS
  6951     0AA6  3D05               	addwfc	5,w
  6952     0AA7  3880               	iorlw	128
  6953     0AA8  0085               	movwf	5
  6954     0AA9  3F00               	moviw [0]fsr0
  6955     0AAA  00F3               	movwf	??__ControlHeat
  6956     0AAB  3F01               	moviw [1]fsr0
  6957     0AAC  00F4               	movwf	??__ControlHeat+1
  6958     0AAD  0873               	movf	??__ControlHeat,w
  6959     0AAE  3EFF               	addlw	255
  6960     0AAF  00F5               	movwf	??__ControlHeat+2
  6961     0AB0  30FF               	movlw	255
  6962     0AB1  3D74               	addwfc	??__ControlHeat+1,w
  6963     0AB2  00F6               	movwf	??__ControlHeat+3
  6964     0AB3  0021               	movlb	1	; select bank1
  6965     0AB4  0846               	movf	(_TEMP+1)^(0+128),w
  6966     0AB5  3A80               	xorlw	128
  6967     0AB6  00F7               	movwf	??__ControlHeat+4
  6968     0AB7  0876               	movf	??__ControlHeat+3,w
  6969     0AB8  3A80               	xorlw	128
  6970     0AB9  0277               	subwf	??__ControlHeat+4,w
  6971     0ABA  1D03               	skipz
  6972     0ABB  2ABE               	goto	u3585
  6973     0ABC  0875               	movf	??__ControlHeat+2,w
  6974     0ABD  0245               	subwf	_TEMP^(0+128),w
  6975     0ABE                     u3585:
  6976     0ABE  1803               	skipnc
  6977     0ABF  0008               	return
  6978     0AC0  3000               	movlw	0
  6979     0AC1  0021               	movlb	1	; select bank1
  6980     0AC2  0244               	subwf	(_HEAT_CALL_TICKS+1)^(0+128),w
  6981     0AC3  30B5               	movlw	181
  6982     0AC4  1903               	skipnz
  6983     0AC5  0243               	subwf	_HEAT_CALL_TICKS^(0+128),w
  6984     0AC6  1C03               	skipc
  6985     0AC7  0008               	return
  6986                           
  6987                           ;main.c: 327:         {;main.c: 328:             RELAY_STATUS = 1;
  6988     0AC8  0020               	movlb	0	; select bank0
  6989     0AC9  01E6               	clrf	_RELAY_STATUS
  6990     0ACA  0AE6               	incf	_RELAY_STATUS,f
  6991                           
  6992                           ;main.c: 329:             return;
  6993     0ACB  0008               	return
  6994     0ACC                     __end_of__ControlHeat:
  6995                           
  6996                           	psect	text18
  6997     08D5                     __ptext18:	
  6998 ;; *************** function _SYSTEM_Initialize *****************
  6999 ;; Defined at:
  7000 ;;		line 50 in file "mcc_generated_files/mcc.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;		None
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;		None
  7005 ;; Return value:  Size  Location     Type
  7006 ;;                  1    wreg      void 
  7007 ;; Registers used:
  7008 ;;		wreg, status,2, status,0, pclath, cstack
  7009 ;; Tracked objects:
  7010 ;;		On entry : B1F/0
  7011 ;;		On exit  : 1F/2
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7018 ;;Total ram usage:        0 bytes
  7019 ;; Hardware stack levels used: 1
  7020 ;; Hardware stack levels required when called: 6
  7021 ;; This function calls:
  7022 ;;		_ADC_Initialize
  7023 ;;		_EUSART_Initialize
  7024 ;;		_OSCILLATOR_Initialize
  7025 ;;		_PIN_MANAGER_Initialize
  7026 ;;		_TMR0_Initialize
  7027 ;;		_TMR1_Initialize
  7028 ;;		_WDT_Initialize
  7029 ;; This function is called by:
  7030 ;;		_main
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034     08D5                     _SYSTEM_Initialize:	
  7035                           ;psect for function _SYSTEM_Initialize
  7036                           
  7037                           
  7038                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  7039                           
  7040                           ;incstack = 0
  7041                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7042     08D5  3189  2101  3188   	fcall	_PIN_MANAGER_Initialize
  7043                           
  7044                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  7045     08D8  3188  2079  3188   	fcall	_OSCILLATOR_Initialize
  7046                           
  7047                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  7048     08DB  3188  204C  3188   	fcall	_WDT_Initialize
  7049                           
  7050                           ;mcc_generated_files/mcc.c: 56:     ADC_Initialize();
  7051     08DE  3188  2072  3188   	fcall	_ADC_Initialize
  7052                           
  7053                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  7054     08E1  3189  211B  3188   	fcall	_TMR1_Initialize
  7055                           
  7056                           ;mcc_generated_files/mcc.c: 58:     TMR0_Initialize();
  7057     08E4  3188  20C1  3188   	fcall	_TMR0_Initialize
  7058                           
  7059                           ;mcc_generated_files/mcc.c: 59:     EUSART_Initialize();
  7060     08E7  3189  21A7         	fcall	_EUSART_Initialize
  7061     08E9  0008               	return
  7062     08EA                     __end_of_SYSTEM_Initialize:
  7063                           
  7064                           	psect	text19
  7065     084C                     __ptext19:	
  7066 ;; *************** function _WDT_Initialize *****************
  7067 ;; Defined at:
  7068 ;;		line 72 in file "mcc_generated_files/mcc.c"
  7069 ;; Parameters:    Size  Location     Type
  7070 ;;		None
  7071 ;; Auto vars:     Size  Location     Type
  7072 ;;		None
  7073 ;; Return value:  Size  Location     Type
  7074 ;;                  1    wreg      void 
  7075 ;; Registers used:
  7076 ;;		wreg
  7077 ;; Tracked objects:
  7078 ;;		On entry : B1F/2
  7079 ;;		On exit  : B1F/1
  7080 ;;		Unchanged: B00/0
  7081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7086 ;;Total ram usage:        0 bytes
  7087 ;; Hardware stack levels used: 1
  7088 ;; Hardware stack levels required when called: 4
  7089 ;; This function calls:
  7090 ;;		Nothing
  7091 ;; This function is called by:
  7092 ;;		_SYSTEM_Initialize
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096     084C                     _WDT_Initialize:	
  7097                           ;psect for function _WDT_Initialize
  7098                           
  7099                           
  7100                           ;mcc_generated_files/mcc.c: 75:     WDTCON = 0x16;
  7101                           
  7102                           ;incstack = 0
  7103                           ; Regs used in _WDT_Initialize: [wreg]
  7104     084C  3016               	movlw	22
  7105     084D  0021               	movlb	1	; select bank1
  7106     084E  0097               	movwf	23	;volatile
  7107     084F  0008               	return
  7108     0850                     __end_of_WDT_Initialize:
  7109                           
  7110                           	psect	text20
  7111     091B                     __ptext20:	
  7112 ;; *************** function _TMR1_Initialize *****************
  7113 ;; Defined at:
  7114 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  7115 ;; Parameters:    Size  Location     Type
  7116 ;;		None
  7117 ;; Auto vars:     Size  Location     Type
  7118 ;;		None
  7119 ;; Return value:  Size  Location     Type
  7120 ;;                  1    wreg      void 
  7121 ;; Registers used:
  7122 ;;		wreg, status,2, status,0, pclath, cstack
  7123 ;; Tracked objects:
  7124 ;;		On entry : B1F/1
  7125 ;;		On exit  : 1F/0
  7126 ;;		Unchanged: 0/0
  7127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7132 ;;Total ram usage:        0 bytes
  7133 ;; Hardware stack levels used: 1
  7134 ;; Hardware stack levels required when called: 5
  7135 ;; This function calls:
  7136 ;;		_TMR1_SetInterruptHandler
  7137 ;; This function is called by:
  7138 ;;		_SYSTEM_Initialize
  7139 ;; This function uses a non-reentrant model
  7140 ;;
  7141                           
  7142     091B                     _TMR1_Initialize:	
  7143                           ;psect for function _TMR1_Initialize
  7144                           
  7145                           
  7146                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  7147                           
  7148                           ;incstack = 0
  7149                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7150     091B  0020               	movlb	0	; select bank0
  7151     091C  0199               	clrf	25	;volatile
  7152                           
  7153                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0x9E;
  7154     091D  309E               	movlw	158
  7155     091E  0097               	movwf	23	;volatile
  7156                           
  7157                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0x58;
  7158     091F  3058               	movlw	88
  7159     0920  0096               	movwf	22	;volatile
  7160                           
  7161                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  7162     0921  1011               	bcf	17,0	;volatile
  7163                           
  7164                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  7165     0922  0817               	movf	23,w	;volatile
  7166     0923  0022               	movlb	2	; select bank2
  7167     0924  00D7               	movwf	(_timer1ReloadVal+1)^(0+256)	;volatile
  7168     0925  0020               	movlb	0	; select bank0
  7169     0926  0816               	movf	22,w	;volatile
  7170     0927  0022               	movlb	2	; select bank2
  7171     0928  00D6               	movwf	_timer1ReloadVal^(0+256)	;volatile
  7172                           
  7173                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  7174     0929  0021               	movlb	1	; select bank1
  7175     092A  1411               	bsf	17,0	;volatile
  7176                           
  7177                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  7178     092B  304B               	movlw	low _TMR1_DefaultInterruptHandler
  7179     092C  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  7180     092D  3008               	movlw	high _TMR1_DefaultInterruptHandler
  7181     092E  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  7182     092F  3188  2066         	fcall	_TMR1_SetInterruptHandler
  7183                           
  7184                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x31;
  7185     0931  3031               	movlw	49
  7186     0932  0020               	movlb	0	; select bank0
  7187     0933  0098               	movwf	24	;volatile
  7188     0934  0008               	return
  7189     0935                     __end_of_TMR1_Initialize:
  7190                           
  7191                           	psect	text21
  7192     0866                     __ptext21:	
  7193 ;; *************** function _TMR1_SetInterruptHandler *****************
  7194 ;; Defined at:
  7195 ;;		line 178 in file "mcc_generated_files/tmr1.c"
  7196 ;; Parameters:    Size  Location     Type
  7197 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  7198 ;;		 -> _LogicControlISR(1), TMR1_DefaultInterruptHandler(1), 
  7199 ;; Auto vars:     Size  Location     Type
  7200 ;;		None
  7201 ;; Return value:  Size  Location     Type
  7202 ;;                  1    wreg      void 
  7203 ;; Registers used:
  7204 ;;		wreg
  7205 ;; Tracked objects:
  7206 ;;		On entry : 1C/2
  7207 ;;		On exit  : 1F/2
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7210 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7213 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7214 ;;Total ram usage:        2 bytes
  7215 ;; Hardware stack levels used: 1
  7216 ;; Hardware stack levels required when called: 4
  7217 ;; This function calls:
  7218 ;;		Nothing
  7219 ;; This function is called by:
  7220 ;;		_TMR1_Initialize
  7221 ;;		_main
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225     0866                     _TMR1_SetInterruptHandler:	
  7226                           ;psect for function _TMR1_SetInterruptHandler
  7227                           
  7228                           
  7229                           ;mcc_generated_files/tmr1.c: 179:     TMR1_InterruptHandler = InterruptHandler;
  7230                           
  7231                           ;incstack = 0
  7232                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  7233     0866  0874               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  7234     0867  0022               	movlb	2	; select bank2
  7235     0868  00E7               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
  7236     0869  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  7237     086A  00E6               	movwf	_TMR1_InterruptHandler^(0+256)
  7238     086B  0008               	return
  7239     086C                     __end_of_TMR1_SetInterruptHandler:
  7240                           
  7241                           	psect	text22
  7242     08C1                     __ptext22:	
  7243 ;; *************** function _TMR0_Initialize *****************
  7244 ;; Defined at:
  7245 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  7246 ;; Parameters:    Size  Location     Type
  7247 ;;		None
  7248 ;; Auto vars:     Size  Location     Type
  7249 ;;		None
  7250 ;; Return value:  Size  Location     Type
  7251 ;;                  1    wreg      void 
  7252 ;; Registers used:
  7253 ;;		wreg, status,2, status,0, pclath, cstack
  7254 ;; Tracked objects:
  7255 ;;		On entry : 1F/0
  7256 ;;		On exit  : 1F/2
  7257 ;;		Unchanged: 0/0
  7258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7263 ;;Total ram usage:        0 bytes
  7264 ;; Hardware stack levels used: 1
  7265 ;; Hardware stack levels required when called: 5
  7266 ;; This function calls:
  7267 ;;		_TMR0_SetInterruptHandler
  7268 ;; This function is called by:
  7269 ;;		_SYSTEM_Initialize
  7270 ;; This function uses a non-reentrant model
  7271 ;;
  7272                           
  7273     08C1                     _TMR0_Initialize:	
  7274                           ;psect for function _TMR0_Initialize
  7275                           
  7276                           
  7277                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD7 
      +                          & 0x3F));
  7278                           
  7279                           ;incstack = 0
  7280                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7281     08C1  0021               	movlb	1	; select bank1
  7282     08C2  0815               	movf	21,w	;volatile
  7283     08C3  39C0               	andlw	192
  7284     08C4  3817               	iorlw	23
  7285     08C5  0095               	movwf	21	;volatile
  7286                           
  7287                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0xB2;
  7288     08C6  30B2               	movlw	178
  7289     08C7  0020               	movlb	0	; select bank0
  7290     08C8  0095               	movwf	21	;volatile
  7291                           
  7292                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 178;
  7293     08C9  30B2               	movlw	178
  7294     08CA  0021               	movlb	1	; select bank1
  7295     08CB  00C9               	movwf	_timer0ReloadVal^(0+128)	;volatile
  7296                           
  7297                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  7298     08CC  110B               	bcf	11,2	;volatile
  7299                           
  7300                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  7301     08CD  168B               	bsf	11,5	;volatile
  7302                           
  7303                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  7304     08CE  304A               	movlw	low _TMR0_DefaultInterruptHandler
  7305     08CF  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  7306     08D0  3008               	movlw	high _TMR0_DefaultInterruptHandler
  7307     08D1  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  7308     08D2  3188  2060         	fcall	_TMR0_SetInterruptHandler
  7309     08D4  0008               	return
  7310     08D5                     __end_of_TMR0_Initialize:
  7311                           
  7312                           	psect	text23
  7313     0860                     __ptext23:	
  7314 ;; *************** function _TMR0_SetInterruptHandler *****************
  7315 ;; Defined at:
  7316 ;;		line 140 in file "mcc_generated_files/tmr0.c"
  7317 ;; Parameters:    Size  Location     Type
  7318 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  7319 ;;		 -> _UIControlISR(1), TMR0_DefaultInterruptHandler(1), 
  7320 ;; Auto vars:     Size  Location     Type
  7321 ;;		None
  7322 ;; Return value:  Size  Location     Type
  7323 ;;                  1    wreg      void 
  7324 ;; Registers used:
  7325 ;;		wreg
  7326 ;; Tracked objects:
  7327 ;;		On entry : 1C/2
  7328 ;;		On exit  : 1F/2
  7329 ;;		Unchanged: 0/0
  7330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7331 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7334 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7335 ;;Total ram usage:        2 bytes
  7336 ;; Hardware stack levels used: 1
  7337 ;; Hardware stack levels required when called: 4
  7338 ;; This function calls:
  7339 ;;		Nothing
  7340 ;; This function is called by:
  7341 ;;		_TMR0_Initialize
  7342 ;;		_main
  7343 ;; This function uses a non-reentrant model
  7344 ;;
  7345                           
  7346     0860                     _TMR0_SetInterruptHandler:	
  7347                           ;psect for function _TMR0_SetInterruptHandler
  7348                           
  7349                           
  7350                           ;mcc_generated_files/tmr0.c: 141:     TMR0_InterruptHandler = InterruptHandler;
  7351                           
  7352                           ;incstack = 0
  7353                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  7354     0860  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  7355     0861  0022               	movlb	2	; select bank2
  7356     0862  00E9               	movwf	(_TMR0_InterruptHandler+1)^(0+256)
  7357     0863  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  7358     0864  00E8               	movwf	_TMR0_InterruptHandler^(0+256)
  7359     0865  0008               	return
  7360     0866                     __end_of_TMR0_SetInterruptHandler:
  7361                           
  7362                           	psect	text24
  7363     0901                     __ptext24:	
  7364 ;; *************** function _PIN_MANAGER_Initialize *****************
  7365 ;; Defined at:
  7366 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  7367 ;; Parameters:    Size  Location     Type
  7368 ;;		None
  7369 ;; Auto vars:     Size  Location     Type
  7370 ;;		None
  7371 ;; Return value:  Size  Location     Type
  7372 ;;                  1    wreg      void 
  7373 ;; Registers used:
  7374 ;;		wreg, status,2
  7375 ;; Tracked objects:
  7376 ;;		On entry : B1F/0
  7377 ;;		On exit  : B1F/2
  7378 ;;		Unchanged: B00/0
  7379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7384 ;;Total ram usage:        0 bytes
  7385 ;; Hardware stack levels used: 1
  7386 ;; Hardware stack levels required when called: 4
  7387 ;; This function calls:
  7388 ;;		Nothing
  7389 ;; This function is called by:
  7390 ;;		_SYSTEM_Initialize
  7391 ;; This function uses a non-reentrant model
  7392 ;;
  7393                           
  7394     0901                     _PIN_MANAGER_Initialize:	
  7395                           ;psect for function _PIN_MANAGER_Initialize
  7396                           
  7397                           
  7398                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x04;
  7399                           
  7400                           ;incstack = 0
  7401                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  7402     0901  3004               	movlw	4
  7403     0902  0022               	movlb	2	; select bank2
  7404     0903  008C               	movwf	12	;volatile
  7405                           
  7406                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x08;
  7407     0904  3008               	movlw	8
  7408     0905  008D               	movwf	13	;volatile
  7409                           
  7410                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0xF1;
  7411     0906  30F1               	movlw	241
  7412     0907  0021               	movlb	1	; select bank1
  7413     0908  008C               	movwf	12	;volatile
  7414                           
  7415                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xB1;
  7416     0909  30B1               	movlw	177
  7417     090A  008D               	movwf	13	;volatile
  7418                           
  7419                           ;mcc_generated_files/pin_manager.c: 72:     ANSELB = 0xDE;
  7420     090B  30DE               	movlw	222
  7421     090C  0023               	movlb	3	; select bank3
  7422     090D  008D               	movwf	13	;volatile
  7423                           
  7424                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x0F;
  7425     090E  300F               	movlw	15
  7426     090F  008C               	movwf	12	;volatile
  7427                           
  7428                           ;mcc_generated_files/pin_manager.c: 78:     WPUB = 0x05;
  7429     0910  3005               	movlw	5
  7430     0911  0024               	movlb	4	; select bank4
  7431     0912  008D               	movwf	13	;volatile
  7432                           
  7433                           ;mcc_generated_files/pin_manager.c: 79:     WPUA = 0x00;
  7434     0913  018C               	clrf	12	;volatile
  7435                           
  7436                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 0;
  7437     0914  0021               	movlb	1	; select bank1
  7438     0915  1395               	bcf	21,7	;volatile
  7439                           
  7440                           ;mcc_generated_files/pin_manager.c: 86:     APFCON0 = 0x00;
  7441     0916  0022               	movlb	2	; select bank2
  7442     0917  019D               	clrf	29	;volatile
  7443                           
  7444                           ;mcc_generated_files/pin_manager.c: 87:     APFCON1 = 0x01;
  7445     0918  3001               	movlw	1
  7446     0919  009E               	movwf	30	;volatile
  7447     091A  0008               	return
  7448     091B                     __end_of_PIN_MANAGER_Initialize:
  7449                           
  7450                           	psect	text25
  7451     0879                     __ptext25:	
  7452 ;; *************** function _OSCILLATOR_Initialize *****************
  7453 ;; Defined at:
  7454 ;;		line 62 in file "mcc_generated_files/mcc.c"
  7455 ;; Parameters:    Size  Location     Type
  7456 ;;		None
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;		None
  7459 ;; Return value:  Size  Location     Type
  7460 ;;                  1    wreg      void 
  7461 ;; Registers used:
  7462 ;;		wreg, status,2
  7463 ;; Tracked objects:
  7464 ;;		On entry : B1F/2
  7465 ;;		On exit  : B1F/2
  7466 ;;		Unchanged: B00/0
  7467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;Total ram usage:        0 bytes
  7473 ;; Hardware stack levels used: 1
  7474 ;; Hardware stack levels required when called: 4
  7475 ;; This function calls:
  7476 ;;		Nothing
  7477 ;; This function is called by:
  7478 ;;		_SYSTEM_Initialize
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482     0879                     _OSCILLATOR_Initialize:	
  7483                           ;psect for function _OSCILLATOR_Initialize
  7484                           
  7485                           
  7486                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x70;
  7487                           
  7488                           ;incstack = 0
  7489                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7490     0879  3070               	movlw	112
  7491     087A  0021               	movlb	1	; select bank1
  7492     087B  0099               	movwf	25	;volatile
  7493                           
  7494                           ;mcc_generated_files/mcc.c: 67:     OSCTUNE = 0x00;
  7495     087C  0198               	clrf	24	;volatile
  7496                           
  7497                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  7498     087D  0022               	movlb	2	; select bank2
  7499     087E  0196               	clrf	22	;volatile
  7500     087F  0008               	return
  7501     0880                     __end_of_OSCILLATOR_Initialize:
  7502                           
  7503                           	psect	text26
  7504     09A7                     __ptext26:	
  7505 ;; *************** function _EUSART_Initialize *****************
  7506 ;; Defined at:
  7507 ;;		line 66 in file "mcc_generated_files/eusart.c"
  7508 ;; Parameters:    Size  Location     Type
  7509 ;;		None
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;		None
  7512 ;; Return value:  Size  Location     Type
  7513 ;;                  1    wreg      void 
  7514 ;; Registers used:
  7515 ;;		wreg, status,2, status,0, pclath, cstack
  7516 ;; Tracked objects:
  7517 ;;		On entry : 1F/2
  7518 ;;		On exit  : 1F/2
  7519 ;;		Unchanged: 0/0
  7520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7525 ;;Total ram usage:        0 bytes
  7526 ;; Hardware stack levels used: 1
  7527 ;; Hardware stack levels required when called: 5
  7528 ;; This function calls:
  7529 ;;		_EUSART_SetErrorHandler
  7530 ;;		_EUSART_SetFramingErrorHandler
  7531 ;;		_EUSART_SetOverrunErrorHandler
  7532 ;; This function is called by:
  7533 ;;		_SYSTEM_Initialize
  7534 ;; This function uses a non-reentrant model
  7535 ;;
  7536                           
  7537     09A7                     _EUSART_Initialize:	
  7538                           ;psect for function _EUSART_Initialize
  7539                           
  7540                           
  7541                           ;mcc_generated_files/eusart.c: 71:     BAUDCON = 0x08;
  7542                           
  7543                           ;incstack = 0
  7544                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7545     09A7  3008               	movlw	8
  7546     09A8  0023               	movlb	3	; select bank3
  7547     09A9  009F               	movwf	31	;volatile
  7548                           
  7549                           ;mcc_generated_files/eusart.c: 74:     RCSTA = 0x80;
  7550     09AA  3080               	movlw	128
  7551     09AB  009D               	movwf	29	;volatile
  7552                           
  7553                           ;mcc_generated_files/eusart.c: 77:     TXSTA = 0x24;
  7554     09AC  3024               	movlw	36
  7555     09AD  009E               	movwf	30	;volatile
  7556                           
  7557                           ;mcc_generated_files/eusart.c: 80:     SPBRGL = 0xCF;
  7558     09AE  30CF               	movlw	207
  7559     09AF  009B               	movwf	27	;volatile
  7560                           
  7561                           ;mcc_generated_files/eusart.c: 83:     SPBRGH = 0x00;
  7562     09B0  019C               	clrf	28	;volatile
  7563                           
  7564                           ;mcc_generated_files/eusart.c: 86:     EUSART_SetFramingErrorHandler(EUSART_DefaultFrami
      +                          ngErrorHandler);
  7565     09B1  3000               	movlw	0
  7566     09B2  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  7567     09B3  3000               	movlw	0
  7568     09B4  00F4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  7569     09B5  3188  205A  3189   	fcall	_EUSART_SetFramingErrorHandler
  7570                           
  7571                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOverr
      +                          unErrorHandler);
  7572     09B8  3000               	movlw	0
  7573     09B9  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  7574     09BA  3000               	movlw	0
  7575     09BB  00F4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  7576     09BC  3188  2055  3189   	fcall	_EUSART_SetOverrunErrorHandler
  7577                           
  7578                           ;mcc_generated_files/eusart.c: 88:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandler
      +                          );
  7579     09BF  3000               	movlw	0
  7580     09C0  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler
  7581     09C1  3000               	movlw	0
  7582     09C2  00F4               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  7583     09C3  3188  2050         	fcall	_EUSART_SetErrorHandler
  7584                           
  7585                           ;mcc_generated_files/eusart.c: 90:     eusartRxLastError.status = 0;
  7586     09C5  01DF               	clrf	_eusartRxLastError^(0+256)	;volatile
  7587     09C6  0008               	return
  7588     09C7                     __end_of_EUSART_Initialize:
  7589                           
  7590                           	psect	text27
  7591     0855                     __ptext27:	
  7592 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  7593 ;; Defined at:
  7594 ;;		line 161 in file "mcc_generated_files/eusart.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  7597 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  7598 ;; Auto vars:     Size  Location     Type
  7599 ;;		None
  7600 ;; Return value:  Size  Location     Type
  7601 ;;                  1    wreg      void 
  7602 ;; Registers used:
  7603 ;;		wreg
  7604 ;; Tracked objects:
  7605 ;;		On entry : 1F/2
  7606 ;;		On exit  : 1F/2
  7607 ;;		Unchanged: 0/0
  7608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7609 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7612 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7613 ;;Total ram usage:        2 bytes
  7614 ;; Hardware stack levels used: 1
  7615 ;; Hardware stack levels required when called: 4
  7616 ;; This function calls:
  7617 ;;		Nothing
  7618 ;; This function is called by:
  7619 ;;		_EUSART_Initialize
  7620 ;; This function uses a non-reentrant model
  7621 ;;
  7622                           
  7623     0855                     _EUSART_SetOverrunErrorHandler:	
  7624                           ;psect for function _EUSART_SetOverrunErrorHandler
  7625                           
  7626                           
  7627                           ;mcc_generated_files/eusart.c: 162:     EUSART_OverrunErrorHandler = interruptHandler;
  7628                           
  7629                           ;incstack = 0
  7630                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  7631     0855  0874               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  7632     0856  00E3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
  7633     0857  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  7634     0858  00E2               	movwf	_EUSART_OverrunErrorHandler^(0+256)
  7635     0859  0008               	return
  7636     085A                     __end_of_EUSART_SetOverrunErrorHandler:
  7637                           
  7638                           	psect	text28
  7639     085A                     __ptext28:	
  7640 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  7641 ;; Defined at:
  7642 ;;		line 157 in file "mcc_generated_files/eusart.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  7645 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;		None
  7648 ;; Return value:  Size  Location     Type
  7649 ;;                  1    wreg      void 
  7650 ;; Registers used:
  7651 ;;		wreg
  7652 ;; Tracked objects:
  7653 ;;		On entry : 1F/3
  7654 ;;		On exit  : 1F/2
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7657 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7661 ;;Total ram usage:        2 bytes
  7662 ;; Hardware stack levels used: 1
  7663 ;; Hardware stack levels required when called: 4
  7664 ;; This function calls:
  7665 ;;		Nothing
  7666 ;; This function is called by:
  7667 ;;		_EUSART_Initialize
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671     085A                     _EUSART_SetFramingErrorHandler:	
  7672                           ;psect for function _EUSART_SetFramingErrorHandler
  7673                           
  7674                           
  7675                           ;mcc_generated_files/eusart.c: 158:     EUSART_FramingErrorHandler = interruptHandler;
  7676                           
  7677                           ;incstack = 0
  7678                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7679     085A  0874               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  7680     085B  0022               	movlb	2	; select bank2
  7681     085C  00E5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
  7682     085D  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  7683     085E  00E4               	movwf	_EUSART_FramingErrorHandler^(0+256)
  7684     085F  0008               	return
  7685     0860                     __end_of_EUSART_SetFramingErrorHandler:
  7686                           
  7687                           	psect	text29
  7688     0850                     __ptext29:	
  7689 ;; *************** function _EUSART_SetErrorHandler *****************
  7690 ;; Defined at:
  7691 ;;		line 165 in file "mcc_generated_files/eusart.c"
  7692 ;; Parameters:    Size  Location     Type
  7693 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  7694 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7695 ;; Auto vars:     Size  Location     Type
  7696 ;;		None
  7697 ;; Return value:  Size  Location     Type
  7698 ;;                  1    wreg      void 
  7699 ;; Registers used:
  7700 ;;		wreg
  7701 ;; Tracked objects:
  7702 ;;		On entry : 1F/2
  7703 ;;		On exit  : 1F/2
  7704 ;;		Unchanged: 0/0
  7705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7706 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7709 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7710 ;;Total ram usage:        2 bytes
  7711 ;; Hardware stack levels used: 1
  7712 ;; Hardware stack levels required when called: 4
  7713 ;; This function calls:
  7714 ;;		Nothing
  7715 ;; This function is called by:
  7716 ;;		_EUSART_Initialize
  7717 ;; This function uses a non-reentrant model
  7718 ;;
  7719                           
  7720     0850                     _EUSART_SetErrorHandler:	
  7721                           ;psect for function _EUSART_SetErrorHandler
  7722                           
  7723                           
  7724                           ;mcc_generated_files/eusart.c: 166:     EUSART_ErrorHandler = interruptHandler;
  7725                           
  7726                           ;incstack = 0
  7727                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7728     0850  0874               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  7729     0851  00E1               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
  7730     0852  0873               	movf	EUSART_SetErrorHandler@interruptHandler,w
  7731     0853  00E0               	movwf	_EUSART_ErrorHandler^(0+256)
  7732     0854  0008               	return
  7733     0855                     __end_of_EUSART_SetErrorHandler:
  7734                           
  7735                           	psect	text30
  7736     0872                     __ptext30:	
  7737 ;; *************** function _ADC_Initialize *****************
  7738 ;; Defined at:
  7739 ;;		line 67 in file "mcc_generated_files/adc.c"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;		None
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;		None
  7744 ;; Return value:  Size  Location     Type
  7745 ;;                  1    wreg      void 
  7746 ;; Registers used:
  7747 ;;		wreg, status,2
  7748 ;; Tracked objects:
  7749 ;;		On entry : B1F/1
  7750 ;;		On exit  : B1F/1
  7751 ;;		Unchanged: B00/0
  7752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7757 ;;Total ram usage:        0 bytes
  7758 ;; Hardware stack levels used: 1
  7759 ;; Hardware stack levels required when called: 4
  7760 ;; This function calls:
  7761 ;;		Nothing
  7762 ;; This function is called by:
  7763 ;;		_SYSTEM_Initialize
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767     0872                     _ADC_Initialize:	
  7768                           ;psect for function _ADC_Initialize
  7769                           
  7770                           
  7771                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0xA0;
  7772                           
  7773                           ;incstack = 0
  7774                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  7775     0872  30A0               	movlw	160
  7776     0873  009E               	movwf	30	;volatile
  7777                           
  7778                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
  7779     0874  019B               	clrf	27	;volatile
  7780                           
  7781                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
  7782     0875  019C               	clrf	28	;volatile
  7783                           
  7784                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x01;
  7785     0876  3001               	movlw	1
  7786     0877  009D               	movwf	29	;volatile
  7787     0878  0008               	return
  7788     0879                     __end_of_ADC_Initialize:
  7789                           
  7790                           	psect	intentry
  7791     0004                     __pintentry:	
  7792 ;; *************** function _INTERRUPT_InterruptManager *****************
  7793 ;; Defined at:
  7794 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7795 ;; Parameters:    Size  Location     Type
  7796 ;;		None
  7797 ;; Auto vars:     Size  Location     Type
  7798 ;;		None
  7799 ;; Return value:  Size  Location     Type
  7800 ;;                  1    wreg      void 
  7801 ;; Registers used:
  7802 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7803 ;; Tracked objects:
  7804 ;;		On entry : 0/0
  7805 ;;		On exit  : 0/0
  7806 ;;		Unchanged: 0/0
  7807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7812 ;;Total ram usage:        0 bytes
  7813 ;; Hardware stack levels used: 1
  7814 ;; Hardware stack levels required when called: 3
  7815 ;; This function calls:
  7816 ;;		_TMR0_ISR
  7817 ;;		_TMR1_ISR
  7818 ;; This function is called by:
  7819 ;;		Interrupt level 1
  7820 ;; This function uses a non-reentrant model
  7821 ;;
  7822                           
  7823     0004                     _INTERRUPT_InterruptManager:
  7824                           
  7825                           ;incstack = 0
  7826     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7827                           
  7828                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7829     0005  3180               	pagesel	$
  7830                           
  7831                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  7832     0006  1A8B               	btfsc	11,5	;volatile
  7833     0007  1D0B               	btfss	11,2	;volatile
  7834     0008  280D               	goto	i1l156
  7835                           
  7836                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  7837     0009  3188  20EA  3180   	fcall	_TMR0_ISR
  7838                           
  7839                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  7840     000C  2817               	goto	i1l162
  7841     000D                     i1l156:	
  7842                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  7843                           
  7844     000D  1F0B               	btfss	11,6	;volatile
  7845     000E  2817               	goto	i1l162
  7846                           
  7847                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  7848     000F  0021               	movlb	1	; select bank1
  7849     0010  1C11               	btfss	17,0	;volatile
  7850     0011  2817               	goto	i1l162
  7851     0012  0020               	movlb	0	; select bank0
  7852     0013  1C11               	btfss	17,0	;volatile
  7853     0014  2817               	goto	i1l162
  7854                           
  7855                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR1_ISR();
  7856     0015  3188  20A6         	fcall	_TMR1_ISR
  7857     0017                     i1l162:	
  7858                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
  7859                           
  7860                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  7861                           
  7862     0017  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7863     0018  0009               	retfie
  7864     0019                     __end_of_INTERRUPT_InterruptManager:
  7865                           
  7866                           	psect	text32
  7867     08A6                     __ptext32:	
  7868 ;; *************** function _TMR1_ISR *****************
  7869 ;; Defined at:
  7870 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  7871 ;; Parameters:    Size  Location     Type
  7872 ;;		None
  7873 ;; Auto vars:     Size  Location     Type
  7874 ;;		None
  7875 ;; Return value:  Size  Location     Type
  7876 ;;                  1    wreg      void 
  7877 ;; Registers used:
  7878 ;;		wreg, status,2, status,0, pclath, cstack
  7879 ;; Tracked objects:
  7880 ;;		On entry : 1F/0
  7881 ;;		On exit  : 0/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7888 ;;Total ram usage:        0 bytes
  7889 ;; Hardware stack levels used: 1
  7890 ;; Hardware stack levels required when called: 2
  7891 ;; This function calls:
  7892 ;;		_TMR1_CallBack
  7893 ;;		_TMR1_WriteTimer
  7894 ;; This function is called by:
  7895 ;;		_INTERRUPT_InterruptManager
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899     08A6                     _TMR1_ISR:	
  7900                           ;psect for function _TMR1_ISR
  7901                           
  7902                           
  7903                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
  7904                           
  7905                           ;incstack = 0
  7906                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  7907     08A6  1011               	bcf	17,0	;volatile
  7908                           
  7909                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
  7910     08A7  0022               	movlb	2	; select bank2
  7911     08A8  0857               	movf	(_timer1ReloadVal+1)^(0+256),w	;volatile
  7912     08A9  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  7913     08AA  0856               	movf	_timer1ReloadVal^(0+256),w	;volatile
  7914     08AB  00F0               	movwf	TMR1_WriteTimer@timerVal
  7915     08AC  3188  20B2  3188   	fcall	_TMR1_WriteTimer
  7916                           
  7917                           ;mcc_generated_files/tmr1.c: 166:     TMR1_CallBack();
  7918     08AF  3188  209B         	fcall	_TMR1_CallBack
  7919     08B1  0008               	return
  7920     08B2                     __end_of_TMR1_ISR:
  7921                           
  7922                           	psect	text33
  7923     08B2                     __ptext33:	
  7924 ;; *************** function _TMR1_WriteTimer *****************
  7925 ;; Defined at:
  7926 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;  timerVal        2    0[COMMON] unsigned short 
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;		None
  7931 ;; Return value:  Size  Location     Type
  7932 ;;                  1    wreg      void 
  7933 ;; Registers used:
  7934 ;;		wreg
  7935 ;; Tracked objects:
  7936 ;;		On entry : 1F/2
  7937 ;;		On exit  : 1F/0
  7938 ;;		Unchanged: 0/0
  7939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7940 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7943 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7944 ;;Total ram usage:        2 bytes
  7945 ;; Hardware stack levels used: 1
  7946 ;; This function calls:
  7947 ;;		Nothing
  7948 ;; This function is called by:
  7949 ;;		_TMR1_ISR
  7950 ;; This function uses a non-reentrant model
  7951 ;;
  7952                           
  7953     08B2                     _TMR1_WriteTimer:	
  7954                           ;psect for function _TMR1_WriteTimer
  7955                           
  7956                           
  7957                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
  7958                           
  7959                           ;incstack = 0
  7960                           ; Regs used in _TMR1_WriteTimer: [wreg]
  7961     08B2  0020               	movlb	0	; select bank0
  7962     08B3  1D18               	btfss	24,2	;volatile
  7963     08B4  28BC               	goto	i1l2891
  7964                           
  7965                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  7966     08B5  1018               	bcf	24,0	;volatile
  7967                           
  7968                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (uint8_t)(timerVal >> 8);
  7969     08B6  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  7970     08B7  0097               	movwf	23	;volatile
  7971                           
  7972                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = (uint8_t)timerVal;
  7973     08B8  0870               	movf	TMR1_WriteTimer@timerVal,w
  7974     08B9  0096               	movwf	22	;volatile
  7975                           
  7976                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  7977     08BA  1418               	bsf	24,0	;volatile
  7978                           
  7979                           ;mcc_generated_files/tmr1.c: 133:     }
  7980     08BB  0008               	return
  7981     08BC                     i1l2891:
  7982                           
  7983                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (uint8_t)(timerVal >> 8);
  7984     08BC  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  7985     08BD  0097               	movwf	23	;volatile
  7986                           
  7987                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = (uint8_t)timerVal;
  7988     08BE  0870               	movf	TMR1_WriteTimer@timerVal,w
  7989     08BF  0096               	movwf	22	;volatile
  7990     08C0  0008               	return
  7991     08C1                     __end_of_TMR1_WriteTimer:
  7992                           
  7993                           	psect	text34
  7994     089B                     __ptext34:	
  7995 ;; *************** function _TMR1_CallBack *****************
  7996 ;; Defined at:
  7997 ;;		line 169 in file "mcc_generated_files/tmr1.c"
  7998 ;; Parameters:    Size  Location     Type
  7999 ;;		None
  8000 ;; Auto vars:     Size  Location     Type
  8001 ;;		None
  8002 ;; Return value:  Size  Location     Type
  8003 ;;                  1    wreg      void 
  8004 ;; Registers used:
  8005 ;;		wreg, status,2, status,0, pclath, cstack
  8006 ;; Tracked objects:
  8007 ;;		On entry : 1F/0
  8008 ;;		On exit  : 0/0
  8009 ;;		Unchanged: 0/0
  8010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8015 ;;Total ram usage:        0 bytes
  8016 ;; Hardware stack levels used: 1
  8017 ;; Hardware stack levels required when called: 1
  8018 ;; This function calls:
  8019 ;;		NULL
  8020 ;;		_TMR1_DefaultInterruptHandler
  8021 ;;		__LogicControlISR
  8022 ;; This function is called by:
  8023 ;;		_TMR1_ISR
  8024 ;; This function uses a non-reentrant model
  8025 ;;
  8026                           
  8027     089B                     _TMR1_CallBack:	
  8028                           ;psect for function _TMR1_CallBack
  8029                           
  8030                           
  8031                           ;mcc_generated_files/tmr1.c: 172:     if(TMR1_InterruptHandler)
  8032                           
  8033                           ;incstack = 0
  8034                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
  8035     089B  0022               	movlb	2	; select bank2
  8036     089C  0866               	movf	_TMR1_InterruptHandler^(0+256),w
  8037     089D  0467               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
  8038     089E  1903               	btfsc	3,2
  8039     089F  0008               	return
  8040                           
  8041                           ;mcc_generated_files/tmr1.c: 173:     {;mcc_generated_files/tmr1.c: 174:         TMR1_In
      +                          terruptHandler();
  8042     08A0  0867               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
  8043     08A1  008A               	movwf	10
  8044     08A2  0866               	movf	_TMR1_InterruptHandler^(0+256),w
  8045     08A3  000A               	callw
  8046     08A4  3188               	pagesel	$
  8047     08A5  0008               	return
  8048     08A6                     __end_of_TMR1_CallBack:
  8049                           
  8050                           	psect	text35
  8051     084B                     __ptext35:	
  8052 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  8053 ;; Defined at:
  8054 ;;		line 182 in file "mcc_generated_files/tmr1.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;		None
  8057 ;; Auto vars:     Size  Location     Type
  8058 ;;		None
  8059 ;; Return value:  Size  Location     Type
  8060 ;;                  1    wreg      void 
  8061 ;; Registers used:
  8062 ;;		None
  8063 ;; Tracked objects:
  8064 ;;		On entry : 1F/2
  8065 ;;		On exit  : 1F/2
  8066 ;;		Unchanged: 1F/0
  8067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8072 ;;Total ram usage:        0 bytes
  8073 ;; Hardware stack levels used: 1
  8074 ;; This function calls:
  8075 ;;		Nothing
  8076 ;; This function is called by:
  8077 ;;		_TMR1_Initialize
  8078 ;;		_TMR1_CallBack
  8079 ;; This function uses a non-reentrant model
  8080 ;;
  8081                           
  8082     084B                     _TMR1_DefaultInterruptHandler:	
  8083                           ;psect for function _TMR1_DefaultInterruptHandler
  8084                           
  8085                           
  8086                           ;incstack = 0
  8087                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  8088     084B  0008               	return
  8089     084C                     __end_of_TMR1_DefaultInterruptHandler:
  8090                           
  8091                           	psect	text36
  8092     0935                     __ptext36:	
  8093 ;; *************** function __LogicControlISR *****************
  8094 ;; Defined at:
  8095 ;;		line 261 in file "main.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;		None
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;		None
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  1    wreg      void 
  8102 ;; Registers used:
  8103 ;;		wreg, status,2, status,0
  8104 ;; Tracked objects:
  8105 ;;		On entry : 1F/2
  8106 ;;		On exit  : 1C/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8111 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8112 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8113 ;;Total ram usage:        1 bytes
  8114 ;; Hardware stack levels used: 1
  8115 ;; This function calls:
  8116 ;;		Nothing
  8117 ;; This function is called by:
  8118 ;;		_main
  8119 ;;		_TMR1_CallBack
  8120 ;; This function uses a non-reentrant model
  8121 ;;
  8122                           
  8123     0935                     __LogicControlISR:	
  8124                           ;psect for function __LogicControlISR
  8125                           
  8126                           
  8127                           ;main.c: 264:     LOGIC_TICK++;
  8128                           
  8129                           ;incstack = 0
  8130                           ; Regs used in __LogicControlISR: [wreg+status,2+status,0]
  8131     0935  3001               	movlw	1
  8132     0936  00F0               	movwf	??__LogicControlISR
  8133     0937  0870               	movf	??__LogicControlISR,w
  8134     0938  07FA               	addwf	_LOGIC_TICK,f
  8135                           
  8136                           ;main.c: 266:     if (LOGIC_TICK >= 3)
  8137     0939  3003               	movlw	3
  8138     093A  027A               	subwf	_LOGIC_TICK,w
  8139     093B  1C03               	skipc
  8140     093C  2940               	goto	i1l2437
  8141                           
  8142                           ;main.c: 267:         READ_FLAG = 1;
  8143     093D  0021               	movlb	1	; select bank1
  8144     093E  01C7               	clrf	_READ_FLAG^(0+128)
  8145     093F  0AC7               	incf	_READ_FLAG^(0+128),f
  8146     0940                     i1l2437:
  8147                           
  8148                           ;main.c: 269:     if (LOGIC_TICK >= 5)
  8149     0940  3005               	movlw	5
  8150     0941  027A               	subwf	_LOGIC_TICK,w
  8151     0942  1C03               	skipc
  8152     0943  2947               	goto	i1l2441
  8153                           
  8154                           ;main.c: 270:         UART_FLAG = 1;
  8155     0944  0022               	movlb	2	; select bank2
  8156     0945  01DD               	clrf	_UART_FLAG^(0+256)
  8157     0946  0ADD               	incf	_UART_FLAG^(0+256),f
  8158     0947                     i1l2441:
  8159     0947  300A               	movlw	10
  8160     0948  027A               	subwf	_LOGIC_TICK,w
  8161     0949  1C03               	skipc
  8162     094A  0008               	return
  8163                           
  8164                           ;main.c: 273:     {;main.c: 274:         LOGIC_FLAG = 1;
  8165     094B  0022               	movlb	2	; select bank2
  8166     094C  01DC               	clrf	_LOGIC_FLAG^(0+256)
  8167     094D  0ADC               	incf	_LOGIC_FLAG^(0+256),f
  8168                           
  8169                           ;main.c: 275:         LOGIC_TICK = 0;
  8170     094E  01FA               	clrf	_LOGIC_TICK
  8171     094F  0008               	return
  8172     0950                     __end_of__LogicControlISR:
  8173                           
  8174                           	psect	text37
  8175     08EA                     __ptext37:	
  8176 ;; *************** function _TMR0_ISR *****************
  8177 ;; Defined at:
  8178 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  8179 ;; Parameters:    Size  Location     Type
  8180 ;;		None
  8181 ;; Auto vars:     Size  Location     Type
  8182 ;;		None
  8183 ;; Return value:  Size  Location     Type
  8184 ;;                  1    wreg      void 
  8185 ;; Registers used:
  8186 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8187 ;; Tracked objects:
  8188 ;;		On entry : 0/0
  8189 ;;		On exit  : 1F/2
  8190 ;;		Unchanged: 0/0
  8191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8196 ;;Total ram usage:        0 bytes
  8197 ;; Hardware stack levels used: 1
  8198 ;; Hardware stack levels required when called: 2
  8199 ;; This function calls:
  8200 ;;		_TMR0_CallBack
  8201 ;; This function is called by:
  8202 ;;		_INTERRUPT_InterruptManager
  8203 ;; This function uses a non-reentrant model
  8204 ;;
  8205                           
  8206     08EA                     _TMR0_ISR:	
  8207                           ;psect for function _TMR0_ISR
  8208                           
  8209                           
  8210                           ;mcc_generated_files/tmr0.c: 110:     static volatile uint16_t CountCallBack = 0;;mcc_ge
      +                          nerated_files/tmr0.c: 113:     INTCONbits.TMR0IF = 0;
  8211                           
  8212                           ;incstack = 0
  8213                           ; Regs used in _TMR0_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8214     08EA  110B               	bcf	11,2	;volatile
  8215                           
  8216                           ;mcc_generated_files/tmr0.c: 115:     TMR0 = timer0ReloadVal;
  8217     08EB  0021               	movlb	1	; select bank1
  8218     08EC  0849               	movf	_timer0ReloadVal^(0+128),w	;volatile
  8219     08ED  0020               	movlb	0	; select bank0
  8220     08EE  0095               	movwf	21	;volatile
  8221                           
  8222                           ;mcc_generated_files/tmr0.c: 118:     if (++CountCallBack >= 100)
  8223     08EF  3001               	movlw	1
  8224     08F0  0022               	movlb	2	; select bank2
  8225     08F1  07D8               	addwf	TMR0_ISR@CountCallBack^(0+256),f	;volatile
  8226     08F2  3000               	movlw	0
  8227     08F3  3DD9               	addwfc	(TMR0_ISR@CountCallBack+1)^(0+256),f	;volatile
  8228     08F4  3000               	movlw	0
  8229     08F5  0259               	subwf	(TMR0_ISR@CountCallBack+1)^(0+256),w	;volatile
  8230     08F6  3064               	movlw	100
  8231     08F7  1903               	skipnz
  8232     08F8  0258               	subwf	TMR0_ISR@CountCallBack^(0+256),w	;volatile
  8233     08F9  1C03               	skipc
  8234     08FA  0008               	return
  8235                           
  8236                           ;mcc_generated_files/tmr0.c: 119:     {;mcc_generated_files/tmr0.c: 121:         TMR0_Ca
      +                          llBack();
  8237     08FB  3188  2091         	fcall	_TMR0_CallBack
  8238                           
  8239                           ;mcc_generated_files/tmr0.c: 124:         CountCallBack = 0;
  8240     08FD  0022               	movlb	2	; select bank2
  8241     08FE  01D8               	clrf	TMR0_ISR@CountCallBack^(0+256)	;volatile
  8242     08FF  01D9               	clrf	(TMR0_ISR@CountCallBack+1)^(0+256)	;volatile
  8243     0900  0008               	return
  8244     0901                     __end_of_TMR0_ISR:
  8245                           
  8246                           	psect	text38
  8247     0891                     __ptext38:	
  8248 ;; *************** function _TMR0_CallBack *****************
  8249 ;; Defined at:
  8250 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  8251 ;; Parameters:    Size  Location     Type
  8252 ;;		None
  8253 ;; Auto vars:     Size  Location     Type
  8254 ;;		None
  8255 ;; Return value:  Size  Location     Type
  8256 ;;                  1    wreg      void 
  8257 ;; Registers used:
  8258 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8259 ;; Tracked objects:
  8260 ;;		On entry : 1F/2
  8261 ;;		On exit  : 0/0
  8262 ;;		Unchanged: 0/0
  8263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8268 ;;Total ram usage:        0 bytes
  8269 ;; Hardware stack levels used: 1
  8270 ;; Hardware stack levels required when called: 1
  8271 ;; This function calls:
  8272 ;;		NULL
  8273 ;;		_TMR0_DefaultInterruptHandler
  8274 ;;		__UIControlISR
  8275 ;; This function is called by:
  8276 ;;		_TMR0_ISR
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280     0891                     _TMR0_CallBack:	
  8281                           ;psect for function _TMR0_CallBack
  8282                           
  8283                           
  8284                           ;mcc_generated_files/tmr0.c: 134:     if(TMR0_InterruptHandler)
  8285                           
  8286                           ;incstack = 0
  8287                           ; Regs used in _TMR0_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8288     0891  0868               	movf	_TMR0_InterruptHandler^(0+256),w
  8289     0892  0469               	iorwf	(_TMR0_InterruptHandler+1)^(0+256),w
  8290     0893  1903               	btfsc	3,2
  8291     0894  0008               	return
  8292                           
  8293                           ;mcc_generated_files/tmr0.c: 135:     {;mcc_generated_files/tmr0.c: 136:         TMR0_In
      +                          terruptHandler();
  8294     0895  0869               	movf	(_TMR0_InterruptHandler+1)^(0+256),w
  8295     0896  008A               	movwf	10
  8296     0897  0868               	movf	_TMR0_InterruptHandler^(0+256),w
  8297     0898  000A               	callw
  8298     0899  3188               	pagesel	$
  8299     089A  0008               	return
  8300     089B                     __end_of_TMR0_CallBack:
  8301                           
  8302                           	psect	text39
  8303     084A                     __ptext39:	
  8304 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  8305 ;; Defined at:
  8306 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;		None
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;		None
  8311 ;; Return value:  Size  Location     Type
  8312 ;;                  1    wreg      void 
  8313 ;; Registers used:
  8314 ;;		None
  8315 ;; Tracked objects:
  8316 ;;		On entry : 1F/2
  8317 ;;		On exit  : 1F/2
  8318 ;;		Unchanged: 1F/0
  8319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8324 ;;Total ram usage:        0 bytes
  8325 ;; Hardware stack levels used: 1
  8326 ;; This function calls:
  8327 ;;		Nothing
  8328 ;; This function is called by:
  8329 ;;		_TMR0_Initialize
  8330 ;;		_TMR0_CallBack
  8331 ;; This function uses a non-reentrant model
  8332 ;;
  8333                           
  8334     084A                     _TMR0_DefaultInterruptHandler:	
  8335                           ;psect for function _TMR0_DefaultInterruptHandler
  8336                           
  8337                           
  8338                           ;incstack = 0
  8339                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  8340     084A  0008               	return
  8341     084B                     __end_of_TMR0_DefaultInterruptHandler:
  8342                           
  8343                           	psect	text40
  8344     0731                     __ptext40:	
  8345 ;; *************** function __UIControlISR *****************
  8346 ;; Defined at:
  8347 ;;		line 133 in file "main.c"
  8348 ;; Parameters:    Size  Location     Type
  8349 ;;		None
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;  btnDnRead       1    2[COMMON] _Bool 
  8352 ;;  btnUpRead       1    1[COMMON] _Bool 
  8353 ;; Return value:  Size  Location     Type
  8354 ;;                  1    wreg      void 
  8355 ;; Registers used:
  8356 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8357 ;; Tracked objects:
  8358 ;;		On entry : 1F/2
  8359 ;;		On exit  : 1F/2
  8360 ;;		Unchanged: 0/0
  8361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8363 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8364 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8365 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8366 ;;Total ram usage:        3 bytes
  8367 ;; Hardware stack levels used: 1
  8368 ;; This function calls:
  8369 ;;		Nothing
  8370 ;; This function is called by:
  8371 ;;		_main
  8372 ;;		_TMR0_CallBack
  8373 ;; This function uses a non-reentrant model
  8374 ;;
  8375                           
  8376     0731                     __UIControlISR:	
  8377                           ;psect for function __UIControlISR
  8378                           
  8379                           
  8380                           ;main.c: 135:     _Bool btnUpRead, btnDnRead;;main.c: 138:     switch(DISP_STATE)
  8381                           
  8382                           ;incstack = 0
  8383                           ; Regs used in __UIControlISR: [wreg-fsr0h+status,2+status,0]
  8384     0731  2FD6               	goto	i1l2425
  8385     0732                     i1l2379:
  8386                           
  8387                           ;main.c: 142:             btnUpRead = PORTAbits.RA4;
  8388     0732  3000               	movlw	0
  8389     0733  0020               	movlb	0	; select bank0
  8390     0734  1A0C               	btfsc	12,4	;volatile
  8391     0735  3001               	movlw	1
  8392     0736  00F1               	movwf	__UIControlISR@btnUpRead
  8393                           
  8394                           ;main.c: 143:             btnDnRead = PORTBbits.RB0;
  8395     0737  3000               	movlw	0
  8396     0738  180D               	btfsc	13,0	;volatile
  8397     0739  3001               	movlw	1
  8398     073A  00F2               	movwf	__UIControlISR@btnDnRead
  8399                           
  8400                           ;main.c: 145:             if (!btnUpRead)
  8401     073B  0871               	movf	__UIControlISR@btnUpRead,w
  8402     073C  1D03               	btfss	3,2
  8403     073D  2F51               	goto	i1l2389
  8404                           
  8405                           ;main.c: 146:             {;main.c: 148:                 if (_LastUpState)
  8406     073E  0021               	movlb	1	; select bank1
  8407     073F  084A               	movf	__LastUpState^(0+128),w
  8408     0740  1903               	btfsc	3,2
  8409     0741  2F51               	goto	i1l2389
  8410                           
  8411                           ;main.c: 149:                 {;main.c: 152:                     if (CURRENT_MODE > HEAT
      +                          _MODE_0)
  8412     0742  0879               	movf	_CURRENT_MODE+1,w
  8413     0743  3A80               	xorlw	128
  8414     0744  00F0               	movwf	??__UIControlISR
  8415     0745  3080               	movlw	128
  8416     0746  0270               	subwf	??__UIControlISR,w
  8417     0747  1D03               	skipz
  8418     0748  2F4B               	goto	u235_25
  8419     0749  3001               	movlw	1
  8420     074A  0278               	subwf	_CURRENT_MODE,w
  8421     074B                     u235_25:
  8422     074B  1C03               	skipc
  8423     074C  2F51               	goto	i1l2389
  8424                           
  8425                           ;main.c: 153:                         CURRENT_MODE--;
  8426     074D  30FF               	movlw	255
  8427     074E  07F8               	addwf	_CURRENT_MODE,f
  8428     074F  30FF               	movlw	255
  8429     0750  3DF9               	addwfc	_CURRENT_MODE+1,f
  8430     0751                     i1l2389:
  8431                           
  8432                           ;main.c: 165:             _LastUpState = btnUpRead;
  8433     0751  0871               	movf	__UIControlISR@btnUpRead,w
  8434     0752  0021               	movlb	1	; select bank1
  8435     0753  00CA               	movwf	__LastUpState^(0+128)
  8436                           
  8437                           ;main.c: 167:             if (!btnDnRead)
  8438     0754  0872               	movf	__UIControlISR@btnDnRead,w
  8439     0755  1D03               	btfss	3,2
  8440     0756  2F69               	goto	i1l2399
  8441                           
  8442                           ;main.c: 168:             {;main.c: 170:                 if (_LastDownState)
  8443     0757  0848               	movf	__LastDownState^(0+128),w
  8444     0758  1903               	btfsc	3,2
  8445     0759  2F69               	goto	i1l2399
  8446                           
  8447                           ;main.c: 171:                 {;main.c: 174:                     if (CURRENT_MODE < HEAT
      +                          _MODE_5)
  8448     075A  0879               	movf	_CURRENT_MODE+1,w
  8449     075B  3A80               	xorlw	128
  8450     075C  00F0               	movwf	??__UIControlISR
  8451     075D  3080               	movlw	128
  8452     075E  0270               	subwf	??__UIControlISR,w
  8453     075F  1D03               	skipz
  8454     0760  2F63               	goto	u238_25
  8455     0761  3005               	movlw	5
  8456     0762  0278               	subwf	_CURRENT_MODE,w
  8457     0763                     u238_25:
  8458     0763  1803               	skipnc
  8459     0764  2F69               	goto	i1l2399
  8460                           
  8461                           ;main.c: 175:                         CURRENT_MODE++;
  8462     0765  3001               	movlw	1
  8463     0766  07F8               	addwf	_CURRENT_MODE,f
  8464     0767  3000               	movlw	0
  8465     0768  3DF9               	addwfc	_CURRENT_MODE+1,f
  8466     0769                     i1l2399:
  8467                           
  8468                           ;main.c: 187:             _LastDownState = btnDnRead;
  8469     0769  0872               	movf	__UIControlISR@btnDnRead,w
  8470     076A  0021               	movlb	1	; select bank1
  8471     076B  00C8               	movwf	__LastDownState^(0+128)
  8472                           
  8473                           ;main.c: 190:             DISP_STATE = DISP_STATE_2;
  8474     076C  3001               	movlw	1
  8475     076D  0022               	movlb	2	; select bank2
  8476     076E  00D4               	movwf	_DISP_STATE^(0+256)
  8477     076F  3000               	movlw	0
  8478     0770  00D5               	movwf	(_DISP_STATE^(0+256)+1)
  8479     0771  148D               	bsf	13,1	;volatile
  8480     0772  118C               	bcf	12,3	;volatile
  8481                           
  8482                           ;main.c: 196:             if (CURRENT_MODE > HEAT_MODE_1)
  8483     0773  0879               	movf	_CURRENT_MODE+1,w
  8484     0774  3A80               	xorlw	128
  8485     0775  00F0               	movwf	??__UIControlISR
  8486     0776  3080               	movlw	128
  8487     0777  0270               	subwf	??__UIControlISR,w
  8488     0778  1D03               	skipz
  8489     0779  2F7C               	goto	u239_25
  8490     077A  3002               	movlw	2
  8491     077B  0278               	subwf	_CURRENT_MODE,w
  8492     077C                     u239_25:
  8493     077C  1C03               	skipc
  8494     077D  2F90               	goto	i1l495
  8495                           
  8496                           ;main.c: 197:             {;main.c: 198:                 do { LATAbits.LATA4 = 0; } whil
      +                          e(0);
  8497     077E  0022               	movlb	2	; select bank2
  8498     077F  120C               	bcf	12,4	;volatile
  8499                           
  8500                           ;main.c: 200:                 if (CURRENT_MODE > HEAT_MODE_2)
  8501     0780  0879               	movf	_CURRENT_MODE+1,w
  8502     0781  3A80               	xorlw	128
  8503     0782  00F0               	movwf	??__UIControlISR
  8504     0783  3080               	movlw	128
  8505     0784  0270               	subwf	??__UIControlISR,w
  8506     0785  1D03               	skipz
  8507     0786  2F89               	goto	u240_25
  8508     0787  3003               	movlw	3
  8509     0788  0278               	subwf	_CURRENT_MODE,w
  8510     0789                     u240_25:
  8511     0789  1C03               	skipc
  8512     078A  2F8E               	goto	i1l492
  8513                           
  8514                           ;main.c: 201:                     do { LATBbits.LATB0 = 0; } while(0);
  8515     078B  0022               	movlb	2	; select bank2
  8516     078C  100D               	bcf	13,0	;volatile
  8517     078D  2F93               	goto	i1l499
  8518     078E                     i1l492:	
  8519                           ;main.c: 203:                     do { LATBbits.LATB0 = 1; } while(0);
  8520                           
  8521     078E  0022               	movlb	2	; select bank2
  8522     078F  2F92               	goto	i1l497
  8523     0790                     i1l495:	
  8524                           ;main.c: 206:             {;main.c: 207:                 do { LATAbits.LATA4 = 1; } whil
      +                          e(0);
  8525                           
  8526     0790  0022               	movlb	2	; select bank2
  8527     0791  160C               	bsf	12,4	;volatile
  8528     0792                     i1l497:	
  8529                           ;main.c: 208:                 do { LATBbits.LATB0 = 1; } while(0);
  8530                           
  8531     0792  140D               	bsf	13,0	;volatile
  8532     0793                     i1l499:	
  8533                           ;main.c: 212:             do { LATBbits.LATB2 = 1; } while(0);
  8534                           
  8535     0793  150D               	bsf	13,2	;volatile
  8536     0794  0008               	return
  8537     0795                     i1l2407:
  8538                           
  8539                           ;main.c: 217:             DISP_STATE = DISP_STATE_3;
  8540     0795  3002               	movlw	2
  8541     0796  00D4               	movwf	_DISP_STATE^(0+256)
  8542     0797  3000               	movlw	0
  8543     0798  00D5               	movwf	(_DISP_STATE^(0+256)+1)
  8544     0799  108D               	bcf	13,1	;volatile
  8545     079A  158C               	bsf	12,3	;volatile
  8546                           
  8547                           ;main.c: 223:             if (CURRENT_MODE > HEAT_MODE_3)
  8548     079B  0879               	movf	_CURRENT_MODE+1,w
  8549     079C  3A80               	xorlw	128
  8550     079D  00F0               	movwf	??__UIControlISR
  8551     079E  3080               	movlw	128
  8552     079F  0270               	subwf	??__UIControlISR,w
  8553     07A0  1D03               	skipz
  8554     07A1  2FA4               	goto	u241_25
  8555     07A2  3004               	movlw	4
  8556     07A3  0278               	subwf	_CURRENT_MODE,w
  8557     07A4                     u241_25:
  8558     07A4  1C03               	skipc
  8559     07A5  2FB9               	goto	i1l517
  8560                           
  8561                           ;main.c: 224:             {;main.c: 225:                 do { LATBbits.LATB0 = 0; } whil
      +                          e(0);
  8562     07A6  0022               	movlb	2	; select bank2
  8563     07A7  100D               	bcf	13,0	;volatile
  8564                           
  8565                           ;main.c: 227:                 if (CURRENT_MODE > HEAT_MODE_4)
  8566     07A8  0879               	movf	_CURRENT_MODE+1,w
  8567     07A9  3A80               	xorlw	128
  8568     07AA  00F0               	movwf	??__UIControlISR
  8569     07AB  3080               	movlw	128
  8570     07AC  0270               	subwf	??__UIControlISR,w
  8571     07AD  1D03               	skipz
  8572     07AE  2FB1               	goto	u242_25
  8573     07AF  3005               	movlw	5
  8574     07B0  0278               	subwf	_CURRENT_MODE,w
  8575     07B1                     u242_25:
  8576     07B1  1C03               	skipc
  8577     07B2  2FB6               	goto	i1l514
  8578                           
  8579                           ;main.c: 228:                     do { LATAbits.LATA4 = 0; } while(0);
  8580     07B3  0022               	movlb	2	; select bank2
  8581     07B4  120C               	bcf	12,4	;volatile
  8582     07B5  0008               	return
  8583     07B6                     i1l514:	
  8584                           ;main.c: 230:                     do { LATAbits.LATA4 = 1; } while(0);
  8585                           
  8586     07B6  0022               	movlb	2	; select bank2
  8587     07B7  160C               	bsf	12,4	;volatile
  8588     07B8  0008               	return
  8589     07B9                     i1l517:	
  8590                           ;main.c: 233:             {;main.c: 234:                 do { LATAbits.LATA4 = 1; } whil
      +                          e(0);
  8591                           
  8592     07B9  0022               	movlb	2	; select bank2
  8593     07BA  160C               	bsf	12,4	;volatile
  8594                           
  8595                           ;main.c: 235:                 do { LATBbits.LATB0 = 1; } while(0);
  8596     07BB  140D               	bsf	13,0	;volatile
  8597     07BC  0008               	return
  8598     07BD                     i1l2415:
  8599                           
  8600                           ;main.c: 241:             DISP_STATE = DISP_STATE_1;
  8601     07BD  01D4               	clrf	_DISP_STATE^(0+256)
  8602     07BE  01D5               	clrf	(_DISP_STATE+1)^(0+256)
  8603     07BF  0021               	movlb	1	; select bank1
  8604     07C0  160C               	bsf	12,4	;volatile
  8605     07C1  140D               	bsf	13,0	;volatile
  8606                           
  8607                           ;main.c: 246:             if (CURRENT_MODE > HEAT_MODE_0)
  8608     07C2  0879               	movf	_CURRENT_MODE+1,w
  8609     07C3  3A80               	xorlw	128
  8610     07C4  00F0               	movwf	??__UIControlISR
  8611     07C5  3080               	movlw	128
  8612     07C6  0270               	subwf	??__UIControlISR,w
  8613     07C7  1D03               	skipz
  8614     07C8  2FCB               	goto	u243_25
  8615     07C9  3001               	movlw	1
  8616     07CA  0278               	subwf	_CURRENT_MODE,w
  8617     07CB                     u243_25:
  8618     07CB  1C03               	skipc
  8619     07CC  2FD0               	goto	i1l530
  8620                           
  8621                           ;main.c: 247:                 do { LATBbits.LATB2 = 0; } while(0);
  8622     07CD  0022               	movlb	2	; select bank2
  8623     07CE  110D               	bcf	13,2	;volatile
  8624     07CF  0008               	return
  8625     07D0                     i1l530:	
  8626                           ;main.c: 249:                 do { LATBbits.LATB2 = 1; } while(0);
  8627                           
  8628     07D0  0022               	movlb	2	; select bank2
  8629     07D1  150D               	bsf	13,2	;volatile
  8630     07D2  0008               	return
  8631     07D3                     i1l2423:
  8632                           
  8633                           ;main.c: 254:             DISP_STATE = DISP_STATE_1;
  8634     07D3  01D4               	clrf	_DISP_STATE^(0+256)
  8635     07D4  01D5               	clrf	(_DISP_STATE+1)^(0+256)
  8636                           
  8637                           ;main.c: 255:     }
  8638     07D5  0008               	return
  8639     07D6                     i1l2425:
  8640                           
  8641                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8642                           ; Switch size 1, requested type "simple"
  8643                           ; Number of cases is 1, Range of values is 0 to 0
  8644                           ; switch strategies available:
  8645                           ; Name         Instructions Cycles
  8646                           ; simple_byte            4     3 (average)
  8647                           ; direct_byte            8     6 (fixed)
  8648                           ; jumptable            260     6 (fixed)
  8649                           ;	Chosen strategy is simple_byte
  8650     07D6  0855               	movf	(_DISP_STATE+1)^(0+256),w
  8651     07D7  3A00               	xorlw	0	; case 0
  8652     07D8  1903               	skipnz
  8653     07D9  2FDB               	goto	i1l3881
  8654     07DA  2FD3               	goto	i1l2423
  8655     07DB                     i1l3881:
  8656                           
  8657                           ; Switch size 1, requested type "simple"
  8658                           ; Number of cases is 3, Range of values is 0 to 2
  8659                           ; switch strategies available:
  8660                           ; Name         Instructions Cycles
  8661                           ; simple_byte           10     6 (average)
  8662                           ; direct_byte           12     6 (fixed)
  8663                           ; jumptable            260     6 (fixed)
  8664                           ;	Chosen strategy is simple_byte
  8665     07DB  0854               	movf	_DISP_STATE^(0+256),w
  8666     07DC  3A00               	xorlw	0	; case 0
  8667     07DD  1903               	skipnz
  8668     07DE  2F32               	goto	i1l2379
  8669     07DF  3A01               	xorlw	1	; case 1
  8670     07E0  1903               	skipnz
  8671     07E1  2F95               	goto	i1l2407
  8672     07E2  3A03               	xorlw	3	; case 2
  8673     07E3  1903               	skipnz
  8674     07E4  2FBD               	goto	i1l2415
  8675     07E5  2FD3               	goto	i1l2423
  8676     07E6  0008               	return
  8677     07E7                     __end_of__UIControlISR:
  8678     007E                     btemp	set	126	;btemp
  8679     007E                     int$flags	set	126
  8680     007E                     wtemp0	set	126
  8681                           
  8682                           	psect	idloc
  8683                           
  8684                           ;Config register IDLOC0 @ 0x8000
  8685                           ;	unspecified, using default values
  8686     8000                     	org	32768
  8687     8000  3FFF               	dw	16383
  8688                           
  8689                           ;Config register IDLOC1 @ 0x8001
  8690                           ;	unspecified, using default values
  8691     8001                     	org	32769
  8692     8001  3FFF               	dw	16383
  8693                           
  8694                           ;Config register IDLOC2 @ 0x8002
  8695                           ;	unspecified, using default values
  8696     8002                     	org	32770
  8697     8002  3FFF               	dw	16383
  8698                           
  8699                           ;Config register IDLOC3 @ 0x8003
  8700                           ;	unspecified, using default values
  8701     8003                     	org	32771
  8702     8003  3FFF               	dw	16383
  8703                           
  8704                           	psect	config
  8705                           
  8706                           ;Config register CONFIG1 @ 0x8007
  8707                           ;	Oscillator Selection
  8708                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  8709                           ;	Watchdog Timer Enable
  8710                           ;	WDTE = OFF, WDT disabled
  8711                           ;	Power-up Timer Enable
  8712                           ;	PWRTE = OFF, PWRT disabled
  8713                           ;	MCLR Pin Function Select
  8714                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  8715                           ;	Flash Program Memory Code Protection
  8716                           ;	CP = OFF, Program memory code protection is disabled
  8717                           ;	Data Memory Code Protection
  8718                           ;	CPD = OFF, Data memory code protection is disabled
  8719                           ;	Brown-out Reset Enable
  8720                           ;	BOREN = ON, Brown-out Reset enabled
  8721                           ;	Clock Out Enable
  8722                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  8723                           ;	Internal/External Switchover
  8724                           ;	IESO = ON, Internal/External Switchover mode is enabled
  8725                           ;	Fail-Safe Clock Monitor Enable
  8726                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  8727     8007                     	org	32775
  8728     8007  3FE4               	dw	16356
  8729                           
  8730                           ;Config register CONFIG2 @ 0x8008
  8731                           ;	Flash Memory Self-Write Protection
  8732                           ;	WRT = OFF, Write protection off
  8733                           ;	PLL Enable
  8734                           ;	PLLEN = OFF, 4x PLL disabled
  8735                           ;	Stack Overflow/Underflow Reset Enable
  8736                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  8737                           ;	Brown-out Reset Voltage Selection
  8738                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  8739                           ;	Low-Voltage Programming Enable
  8740                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  8741     8008                     	org	32776
  8742     8008  1EFF               	dw	7935

Data Sizes:
    Strings     0
    Constant    32
    Data        3
    BSS         23
    Persistent  42
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     70      71
    BANK1            80     35      43
    BANK2            80     50      74
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _LogicControlISR(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _LogicControlISR(), TMR1_DefaultInterruptHandler(), NULL(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _UIControlISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _UIControlISR(), NULL(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->__ControlHeat
    __SendDataToConsole->___awdiv
    ___awdiv->___wmul
    __ReadSensor->_ADC_GetConversion
    __ReadSensor->___fltol
    __ReadSensor->___xxtofl
    _my_log->___flge
    _my_log->___flneg
    _my_log->___xxtofl
    ___fladd->__Umul8_16
    ___flmul->__Umul8_16
    ___flmul->___flneg
    ___flmul->___xxtofl
    ___fldiv->__Umul8_16
    ___fldiv->___flneg
    ___fldiv->___xxtofl
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer
    _TMR1_CallBack->__LogicControlISR
    _TMR0_CallBack->__UIControlISR

Critical Paths under _main in BANK0

    __SendDataToConsole->___awdiv
    ___awdiv->___wmul
    __ReadSensor->___flmul
    _my_log->___flmul
    ___flsub->___fladd
    ___fladd->___fldiv
    ___flmul->___fladd
    ___fldiv->___xxtofl

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    __ReadSensor->_my_log
    _my_log->___flmul

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->__ReadSensor

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   35126
                                             69 BANK0      1     1      0
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
           _TMR1_SetInterruptHandler
                       __ControlHeat
                        __ReadSensor
                 __SendDataToConsole
 ---------------------------------------------------------------------------------
 (1) __SendDataToConsole                                  10    10      0    1497
                                             10 BANK0     10    10      0
                       _EUSART_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     676
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     604
                                              7 COMMON     1     1      0
                                              2 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) __ReadSensor                                         50    50      0   32605
                                              0 BANK2     50    50      0
                  _ADC_GetConversion
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                             _my_log
 ---------------------------------------------------------------------------------
 (2) _my_log                                              22    18      4   19105
                                             13 BANK1     22    18      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     746
                                              3 COMMON     4     0      4
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    4807
                                             56 BANK0      8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    4562
                                             36 BANK0     20    12      8
                          __Umul8_16 (ARG)
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4     155
                                              3 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             26    18      8    4796
                                             56 BANK0     13     5      8
                                              0 BANK1     13    13      0
                          __Umul8_16
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) __Umul8_16                                            9     7      2     980
                                              3 COMMON     4     2      2
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8     986
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             26    18      8    2403
                                             10 BANK0     26    18      8
                          __Umul8_16 (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     427
                                              3 COMMON     4     0      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      31
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) __ControlHeat                                         5     5      0       0
                                              3 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     642
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2     174
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     174
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     294
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0     319
                           _TMR0_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0     229
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_WriteTimer                                      2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) _TMR1_CallBack                                        0     0      0       0
                                NULL *
       _TMR1_DefaultInterruptHandler *
                   __LogicControlISR *
 ---------------------------------------------------------------------------------
 (8) __LogicControlISR                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0      90
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0      90
                                NULL *
       _TMR0_DefaultInterruptHandler *
                      __UIControlISR *
 ---------------------------------------------------------------------------------
 (8) __UIControlISR                                        3     3      0      90
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _WDT_Initialize
   _TMR0_SetInterruptHandler
   _TMR1_SetInterruptHandler
   __ControlHeat
   __ReadSensor
     _ADC_GetConversion
     ___fladd
       __Umul8_16 (ARG)
       ___fldiv (ARG)
         __Umul8_16 (ARG)
         ___flneg (ARG)
         ___xxtofl (ARG)
     ___fldiv
     ___flmul
       __Umul8_16
       ___fladd (ARG)
       ___fldiv (ARG)
       ___flneg (ARG)
       ___xxtofl (ARG)
     ___fltol
     ___xxtofl
     _my_log
       ___fladd
       ___fldiv
       ___flge
       ___flmul
       ___flneg
       ___flsub
         ___fladd
       ___xxtofl
   __SendDataToConsole
     _EUSART_Write
     ___awdiv
       ___wmul (ARG)
     ___wmul

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       NULL(Fake) *
       _TMR0_DefaultInterruptHandler *
       __UIControlISR *
   _TMR1_ISR
     _TMR1_CallBack
       NULL(Fake) *
       _TMR1_DefaultInterruptHandler *
       __LogicControlISR *
     _TMR1_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     46      47       5       88.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     23      2B       7       53.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     32      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      C7      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      C7      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Thu May 23 21:51:26 2024

                                            _A 1012                                              _B 100E  
                                            _C 100A                                   ___fldiv@aexp 0043  
                                 ___fldiv@bexp 0042                                   ___fldiv@sign 003B  
                                           l91 07F8                                   ___awdiv@sign 0027  
                          ___wmul@multiplicand 0075                                _timer0ReloadVal 00C9  
                          __Umul8_16@word_mpld 0022                                            l294 0881  
                                          l464 0A68                                            l713 0958  
                                          l914 0B12                                            l891 0B48  
                                          l894 0B96                                _timer1ReloadVal 0156  
               ?_EUSART_SetFramingErrorHandler 0073                                            wreg 0009  
                                 ___flmul@aexp 00A1                                   ___flmul@bexp 00A2  
                                 ___flmul@sign 00A0                                   ___flmul@temp 00AB  
                                 ___flmul@prod 00A7                                   ___fltol@exp1 0025  
                                         l1020 0EE7                                           l1014 0E93  
                                         l1122 02B6                                           l1018 0F02  
                                         l1035 0F83                                           l1070 0D22  
                                         l1056 0FFA                                           l1048 0FE2  
                                         l1160 0BFB                                           l1129 0998  
                                         l1154 0BC7                                           l1091 0E29  
                                         l1092 0E41                                           l1094 0E4C  
                                         l1167 0C0F                                           l1168 0C19  
                                         l3053 0A78                                           l3301 0FA9  
                                         l3303 0FAB                                           l3065 0A9D  
                                         l3057 0A7B                                           l3313 0FB6  
                                         l3233 0EED                                           l3225 0EBB  
                                         l3161 0E64                                           l3059 0A70  
                                         l3403 0CF5                                           l3331 0FF2  
                                         l3251 0F10                                           l3235 0EEF  
                                         l3243 0EFD                                           l3309 0FB4  
                                         l3261 0F22                                           l3165 0E67  
                                         l3423 0D17                                           l3407 0CF8  
                                         l3335 0FF6                                           l3167 0E6F  
                                         l3409 0D00                                           l3361 0B62  
                                         l3345 0992                                           l3185 0E88  
                                         l3523 0E48                                           l3443 0D4D  
                                         l3427 0D1A                                           l3259 0F20  
                                         l3195 0E9D                                           l3509 0E11  
                                         l3437 0D41                                           l3365 0B7C  
                                         l3269 0F31                                           l3189 0E8B  
                                         l3463 0D94                                           l3471 0D76  
                                         l3543 005B                                           l3295 0FA2  
                                         l3287 0F95                                           l3279 0F7B  
                                         l3473 0DB2                                           l3633 023D  
                                         l3625 0207                                           l3561 0086  
                                         l3545 005E                                           l3537 004B  
                                         l3651 028E                                           l3627 021E  
                                         l3563 0089                                           l3555 0076  
                                         l3547 0067                                           l3731 0543  
                                         l3805 0B1F                                           l3469 0DAD  
                                         l3637 0240                                           l3573 00A2  
                                         l3565 0092                                           l3709 0C34  
                                         l3495 0DE6                                           l3487 0DB8  
                                         l3647 0277                                           l3743 061B  
                                         l3751 05FD                                           l3735 05BF  
                                         l3823 0A2B                                           l3489 0DCF  
                                         l3657 02A7                                           l3681 0BD6  
                                         l3753 06E2                                           l3761 0952  
                                         l3499 0DE8                                           l3675 0BBF  
                                         l2963 09DC                                           l3835 0A3B  
                                         l3685 0BD8                                           l2981 0A02  
                                         l2973 09E4                                           l2957 09D1  
                                         l3853 0A56                                           l3829 0A33  
                                         l3775 0AD4                                           l3695 0C0D  
                                         l3687 0BE8                                           l2975 09F0  
                                         l3697 0C00                                           l2985 0A0B  
                                         l3795 0B00                                           l3779 0ADD  
                                         l3859 0A61                                           l3797 0B0E  
                                         l2989 0A13                                           _LATA 010C  
                                         _LATB 010D                                           u3405 09FB  
                                         u5005 095E                                           u3415 0A03  
                                         u5035 0AE6                                           u5207 07F3  
                                         u4415 0DBB                                           u4175 0999  
                                         u4095 0FCD                                           u3375 09E7  
                                         u5065 0B01                                           u4505 0DFF  
                                         u4345 0D7E                                           u4515 0E1A  
                                         u4435 0DC4                                           u4355 0D85  
                                         u3395 09F1                                           u3565 0A9B  
                                         u4525 0E33                                           u3830 0EDA  
                                         u5095 0B16                                           u4375 0D8E  
                                         u3840 0EDB                                           u3585 0ABE  
                                         u4385 0DA2                                           u4625 0145  
                                         u3825 0ECF                                           u4635 0172  
                                         u4645 01C7                                           u4655 01F2  
                                         u4665 020A                                           u3953 0F43  
                                         u3945 0F26                                           u4905 0C21  
                                         u4825 0BE1                                           u4755 025E  
                                         u3875 0EF3                                           u4765 0282  
                                         u4685 0213                                           u4845 0BF5  
                                         u4775 029A                                           u4865 0C07  
                                         u3995 0F96                                           u4995 0959  
                                         _TEMP 00C5                                           _TMR0 0015  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _main 0A18                                           fsr0h 0005  
                                         indf0 0000                                           fsr0l 0004  
                                         btemp 007E                                __end_of_TURN_ON 101A  
                                         start 0019                                ___fldiv@new_exp 003C  
                   ??_TMR1_SetInterruptHandler 0075                        __end_of_TMR0_Initialize 08D5  
               ??_TMR0_DefaultInterruptHandler 0070                                  ?_EUSART_Write 0070  
                __end_of_OSCILLATOR_Initialize 0880                                  ___fltol@sign1 0024  
                              __end_of___fladd 1000                                          ?_main 0070  
                              __end_of___fldiv 0E4F                                __end_of___awdiv 0A18  
                              __end_of___flneg 0891                                __end_of___flmul 02CC  
                              __end_of___flsub 0988                                __end_of___fltol 0B2E  
                              ___awdiv@divisor 0022                                          _T1CON 0018  
                                        i1l162 0017                                          i1l156 000D  
                                        i1l530 07D0                                          i1l514 07B6  
                                        i1l517 07B9                                          i1l492 078E  
                                        i1l495 0790                                          i1l497 0792  
                                        i1l499 0793                                ___awdiv@counter 0026  
                                        _RCSTA 019D                                          _TMR1H 0017  
                                        _TMR1L 0016                                          _TRISA 008C  
                                        _TRISB 008D                                          _TXREG 019A  
                                        _TXSTA 019E                      ?_TMR0_SetInterruptHandler 0073  
                             __end_of_TMR0_ISR 0901                               __end_of_TMR1_ISR 08B2  
                             __end_of_SHUT_OFF 101C                                 _WDT_Initialize 084C  
                              ??__UIControlISR 0070                        __end_of_TMR1_Initialize 0935  
                                        pclath 000A                                          status 0003  
                                        wtemp0 007E                                _TMR1_WriteTimer 08B2  
                              __initialization 001B                                   __end_of_main 0A6B  
                               ??_EUSART_Write 0073                    ?_INTERRUPT_InterruptManager 0070  
                                       ??_main 0078                                  ??__ReadSensor 0077  
                       __end_of_WDT_Initialize 0850              _EUSART_DefaultFramingErrorHandler 0000  
                                       _ADCON0 009D                                         _ADCON1 009E  
                   _EUSART_OverrunErrorHandler 0162                                         _ADRESH 009C  
                                       _ADRESL 009B                               ___awdiv@dividend 0024  
                                       _ANSELA 018C                                         _ANSELB 018D  
                                       _BORCON 0116                                         _T1GCON 0019  
                      TMR1_WriteTimer@timerVal 0070                                         i1l2423 07D3  
                                       i1l2415 07BD                                         i1l2407 0795  
                                       i1l2425 07D6                                         i1l2441 0947  
                                       i1l2437 0940                                         i1l2379 0732  
                                       i1l2389 0751                                         i1l2399 0769  
                                       i1l2891 08BC                                         i1l3881 07DB  
                                       u240_25 0789                                         u241_25 07A4  
                                       u242_25 07B1                                         u243_25 07CB  
                                       u235_25 074B                                         u238_25 0763  
                                       u239_25 077C                                         _OSCCON 0099  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _WDTCON 0097                               __end_of___xxtofl 0C3D  
                            __end_of_SETPOINTS 100A                                  ?__ControlHeat 0070  
         __end_of_TMR1_DefaultInterruptHandler 084C                   _TMR1_DefaultInterruptHandler 084B  
                                       ___flge 0B2E                                      ??___fladd 004C  
                                       ___wmul 0950                                      ??___fldiv 0032  
                                    ??___awdiv 0077                                      ??___flneg 0077  
                                    ??___flmul 0060                                      ??___flsub 0077  
                                    ??___fltol 0020                              ?__LogicControlISR 0070  
                             ?_TMR0_Initialize 0070                               ___awdiv@quotient 0028  
                                       _my_log 051B                             ??__LogicControlISR 0070  
                                 __pdataCOMMON 0078                                ?_WDT_Initialize 0070  
                     ADC_GetConversion@channel 0076                          __end_of_TMR0_CallBack 089B  
                          __end_of__ReadSensor 051B       TMR1_SetInterruptHandler@InterruptHandler 0073  
     TMR0_SetInterruptHandler@InterruptHandler 0073                        __end_of_TMR1_WriteTimer 08C1  
                        __end_of_TMR1_CallBack 08A6                                     ___flge@ff1 0020  
                                   ___flge@ff2 0024                               ?_TMR1_Initialize 0070  
                                 ___xxtofl@arg 0026                                   ___xxtofl@exp 0025  
                            _SYSTEM_Initialize 08D5                                   ___xxtofl@val 0073  
                      __end_of__initialization 003A                                     ___flneg@f1 0073  
                           ?_SYSTEM_Initialize 0070                                 ??__ControlHeat 0073  
                                   ___fltol@f1 0073                            __ReadSensor@Rpullup 0124  
                               __pcstackCOMMON 0070                                   __pidataBANK1 07FF  
                          ??_SYSTEM_Initialize 0075                                      ?_TMR0_ISR 0070  
                                    ?_TMR1_ISR 0070                  ?_TMR1_DefaultInterruptHandler 0070  
                                _MIN_IDLE_TIME 101C                                 _OPTION_REGbits 0095  
                        TMR0_ISR@CountCallBack 0158                ??_EUSART_SetOverrunErrorHandler 0075  
                    __end_of_SYSTEM_Initialize 08EA                                     __pbssBANK0 0066  
                                   __pbssBANK1 00C3                                     __pbssBANK2 0152  
                         __end_of_EUSART_Write 0888                              __end_of__Umul8_16 09A7  
                              _HEAT_CALL_TICKS 00C3                                     __pmaintext 0A18  
                                      ?___flge 0020               __end_of_TMR0_SetInterruptHandler 0866  
                                      ?___wmul 0073                                     ??_TMR0_ISR 0073  
                                   ??_TMR1_ISR 0072                                     __pintentry 0004  
                                      _BAUDCON 019F                                        _APFCON0 011D  
                                      _APFCON1 011E                                        ?_my_log 00AD  
                                  __ReadSensor 02CC                                      ?___xxtofl 0073  
                                      _OSCTUNE 0098                       ??_EUSART_SetErrorHandler 0075  
                           __end_of_ONE_SECOND 1018                               ?_TMR1_WriteTimer 0070  
                                      _TURN_ON 1018                               __ReadSensor$1710 0144  
                             __ReadSensor$1711 0148                               __ReadSensor$1709 0140  
                         _ADC_InterruptHandler 015A                        __UIControlISR@btnDnRead 0072  
                                      ___fladd 0E4F                                        ___fldiv 0CE0  
                                      ___awdiv 09C7                                        ___flneg 0888  
                                      ___flmul 003E                                        ___flsub 096B  
                                      ___fltol 0ACC                        __UIControlISR@btnUpRead 0071  
                             __ReadSensor@Rntc 012C                               __ReadSensor@Vout 0120  
                             __ReadSensor@logR 014E                               __ReadSensor@invT 0130  
                               main@savedRelay 0065                                        __ptext1 0C3D  
                                      __ptext2 0950                                        __ptext3 09C7  
                                      __ptext4 0880                                        __ptext5 02CC  
                                      __ptext6 051B                                        __ptext7 0BA9  
                                      __ptext8 096B                                        __ptext9 0E4F  
               ??_TMR1_DefaultInterruptHandler 0070                                      _T1CONbits 0018  
                        _OSCILLATOR_Initialize 0879                                  __ReadSensor@T 0134  
                                   ??___xxtofl 0020                           __end_of__ControlHeat 0ACC  
                     ??_PIN_MANAGER_Initialize 0073                      ?_TMR1_SetInterruptHandler 0073  
                                      clrloop0 086D                           end_of_initialization 003A  
                                    _READ_FLAG 00C7                          __end_of__UIControlISR 07E7  
        __end_of_EUSART_SetOverrunErrorHandler 085A                  _EUSART_SetOverrunErrorHandler 0855  
                         __end_of_MIN_RUN_TIME 1020                              _EUSART_Initialize 09A7  
                                      my_log@n 00BD                                        my_log@x 00AD  
                           ?_EUSART_Initialize 0070                                      _SETPOINTS 1000  
                                    _UART_FLAG 015D                            ??_EUSART_Initialize 0075  
                             ??_WDT_Initialize 0073                       _TMR0_SetInterruptHandler 0860  
                                    _PORTAbits 000C                                      _PORTBbits 000D  
                                  ___fladd@grs 0057                                  ___xxtofl@sign 0024  
                                    _TRISAbits 008C                                      _TRISBbits 008D  
                                 _CURRENT_MODE 0078                                    ___fldiv@grs 003E  
                                  ___fldiv@rem 0037                                    ___flmul@grs 00A3  
                    __end_of_EUSART_Initialize 09C7                                   _READING_ITER 0152  
                         __ReadSensor@adcValue 014C                                 __end_of___flge 0BA9  
                   _EUSART_DefaultErrorHandler 0000                                 __end_of___wmul 096B  
                                __pidataCOMMON 0002                                   _EUSART_Write 0880  
                               _ADC_Initialize 0872                         ?_OSCILLATOR_Initialize 0070  
                               __end_of_my_log 0731                            start_initialization 001B  
               ?_EUSART_SetOverrunErrorHandler 0073                     _EUSART_FramingErrorHandler 0164  
                                     ??___flge 0073                                       ??___wmul 0077  
                       _EUSART_SetErrorHandler 0850                         __end_of_ADC_Initialize 0879  
                                    __Umul8_16 0988                                    __pdataBANK1 00CA  
                                     ??_my_log 0077                                   ?__ReadSensor 0070  
                                    ___fladd@a 0048                                      ___fladd@b 0044  
                                    ___fldiv@a 002A                                      ___fldiv@b 002E  
                                    ___flmul@a 005C                                      ___flmul@b 0058  
                                  __pbssCOMMON 007A                                      ___flsub@a 0058  
                                    ___flsub@b 005C                                      ___latbits 0002  
                                __pcstackBANK0 0020                                  __pcstackBANK1 00A0  
                                __pcstackBANK2 0120                     __end_of__SendDataToConsole 0CE0  
                                    __end_of_A 1016                                      __end_of_B 1012  
                                    __end_of_C 100E                          _TMR0_InterruptHandler 0168  
                                    __pnvBANK2 0160                                   __ControlHeat 0A6B  
                       _PIN_MANAGER_Initialize 0901                                   _RELAY_STATUS 0066  
             __end_of_TMR1_SetInterruptHandler 086C                                       ?___fladd 0044  
                                     ?___fldiv 002A                                       ?___awdiv 0022  
                                     ?___flneg 0073                                       ?___flmul 0058  
                                     ?___flsub 0058                                       ?___fltol 0073  
                                   ?__Umul8_16 0073                                ?_ADC_Initialize 0070  
                 ??_INTERRUPT_InterruptManager 0073                                   _MIN_RUN_TIME 101E  
                                 __LastUpState 00CA                                __ReadSensor@Vcc 0128  
                             __LogicControlISR 0935                                  _TMR0_CallBack 0891  
                               __LastDownState 00C8                                  _TMR1_CallBack 089B  
                            ??_TMR0_Initialize 0075                                     my_log@term 00BF  
                               ___wmul@product 0020                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 0073                                       _LATBbits 010D  
                                    clear_ram0 086C                                       _PIE1bits 0091  
                            _eusartRxLastError 015F                     ??_TMR0_SetInterruptHandler 0075  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0075  
                                     _TMR0_ISR 08EA              _EUSART_DefaultOverrunErrorHandler 0000  
                                     _TMR1_ISR 08A6                                       _SHUT_OFF 101A  
                            ??_TMR1_Initialize 0075                                     _ADCON0bits 009D  
                            ___wmul@multiplier 0073                                 ?_TMR0_CallBack 0070  
                               ?_TMR1_CallBack 0070                                    _FULL_SAMPLE 015E  
                            _ADC_GetConversion 07E7                        ??_OSCILLATOR_Initialize 0073  
                                  ??__Umul8_16 0075                            _EUSART_ErrorHandler 0160  
                           ?_ADC_GetConversion 0073                       _TMR1_SetInterruptHandler 0866  
                        __end_of_MIN_IDLE_TIME 101E                          _TMR1_InterruptHandler 0166  
                          ??_ADC_GetConversion 0075                                       ___xxtofl 0BA9  
                                     __ptext10 0888                                       __ptext11 003E  
                                     __ptext20 091B                                       __ptext12 0988  
                                     __ptext21 0866                                       __ptext13 0B2E  
                                     __ptext30 0872                                       __ptext22 08C1  
                                     __ptext14 0CE0                                       __ptext23 0860  
                                     __ptext15 0ACC                                       __ptext40 0731  
                                     __ptext32 08A6                                       __ptext24 0901  
                                     __ptext16 07E7                                       __ptext33 08B2  
                                     __ptext25 0879                                       __ptext17 0A6B  
                                     __ptext34 089B                                       __ptext26 09A7  
                                     __ptext18 08D5                                       __ptext35 084B  
                                     __ptext27 0855                                       __ptext19 084C  
                                     __ptext36 0935                                       __ptext28 085A  
                                     __ptext37 08EA                                       __ptext29 0850  
                                     __ptext38 0891                                       __ptext39 084A  
                                   _DISP_STATE 0154                                 __ReadSensor@Tc 0138  
                               __ReadSensor@Tf 013C                        __SendDataToConsole@huns 0032  
                      __SendDataToConsole@ones 002E                        __SendDataToConsole@tens 0030  
         __end_of_TMR0_DefaultInterruptHandler 084B                   _TMR0_DefaultInterruptHandler 084A  
                                    my_log@sum 00B9                      __end_of_ADC_GetConversion 07FF  
                      ?_EUSART_SetErrorHandler 0073  EUSART_SetOverrunErrorHandler@interruptHandler 0073  
                                 my_log@result 00B5                                       int$flags 007E  
           __end_of_INTERRUPT_InterruptManager 0019                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 0860                  _EUSART_SetFramingErrorHandler 085A  
                            ??_TMR1_WriteTimer 0072                                     _LOGIC_FLAG 015C  
                                   _INTCONbits 000B                                     _LOGIC_TICK 007A  
                              ??_TMR0_CallBack 0073                                ??_TMR1_CallBack 0071  
                                  _my_log$1712 00B1                                       intlevel1 0000  
                                __UIControlISR 0731                        ?_PIN_MANAGER_Initialize 0070  
               __end_of_EUSART_SetErrorHandler 0855                               ??_ADC_Initialize 0073  
                ?_TMR0_DefaultInterruptHandler 0070                             __SendDataToConsole 0C3D  
                                   _ONE_SECOND 1016                       __end_of__LogicControlISR 0950  
EUSART_SetFramingErrorHandler@interruptHandler 0073                            ?__SendDataToConsole 0070  
                                __pstringtext1 1000                                  __pstringtext2 100A  
                                __pstringtext3 100E                                  __pstringtext4 1012  
                                __pstringtext5 1016                                  __pstringtext6 1018  
                                __pstringtext7 101A                                  __pstringtext8 101C  
                                __pstringtext9 101E                         __Umul8_16@multiplicand 0073  
                                   _OPTION_REG 0095                                _TMR0_Initialize 08C1  
                                ___fladd@signs 0054                             EUSART_Write@txData 0073  
               __end_of_PIN_MANAGER_Initialize 091B                                 ?__UIControlISR 0070  
                         ??__SendDataToConsole 002A                                   ___fladd@aexp 0055  
                                 ___fladd@bexp 0056                           __Umul8_16@multiplier 0024  
                              _TMR1_Initialize 091B                              __Umul8_16@product 0020  
